// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package apierrors

import (
	"encoding/json"
	"github.com/SquadcastHub/squadcast-sdk-go/models/components"
)

// EscalationPoliciesGetEscalationPolicyByIDGatewayTimeoutError - Server error
type EscalationPoliciesGetEscalationPolicyByIDGatewayTimeoutError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &EscalationPoliciesGetEscalationPolicyByIDGatewayTimeoutError{}

func (e *EscalationPoliciesGetEscalationPolicyByIDGatewayTimeoutError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// EscalationPoliciesGetEscalationPolicyByIDServiceUnavailableError - Service unavailable.
type EscalationPoliciesGetEscalationPolicyByIDServiceUnavailableError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &EscalationPoliciesGetEscalationPolicyByIDServiceUnavailableError{}

func (e *EscalationPoliciesGetEscalationPolicyByIDServiceUnavailableError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// EscalationPoliciesGetEscalationPolicyByIDBadGatewayError - Server error
type EscalationPoliciesGetEscalationPolicyByIDBadGatewayError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &EscalationPoliciesGetEscalationPolicyByIDBadGatewayError{}

func (e *EscalationPoliciesGetEscalationPolicyByIDBadGatewayError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// EscalationPoliciesGetEscalationPolicyByIDInternalServerError - Server error
type EscalationPoliciesGetEscalationPolicyByIDInternalServerError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &EscalationPoliciesGetEscalationPolicyByIDInternalServerError{}

func (e *EscalationPoliciesGetEscalationPolicyByIDInternalServerError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// EscalationPoliciesGetEscalationPolicyByIDUnprocessableEntityError - Client error
type EscalationPoliciesGetEscalationPolicyByIDUnprocessableEntityError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &EscalationPoliciesGetEscalationPolicyByIDUnprocessableEntityError{}

func (e *EscalationPoliciesGetEscalationPolicyByIDUnprocessableEntityError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// EscalationPoliciesGetEscalationPolicyByIDConflictError - The request conflicts with the current state of the server.
type EscalationPoliciesGetEscalationPolicyByIDConflictError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &EscalationPoliciesGetEscalationPolicyByIDConflictError{}

func (e *EscalationPoliciesGetEscalationPolicyByIDConflictError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// EscalationPoliciesGetEscalationPolicyByIDNotFoundError - The server cannot find the requested resource.
type EscalationPoliciesGetEscalationPolicyByIDNotFoundError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &EscalationPoliciesGetEscalationPolicyByIDNotFoundError{}

func (e *EscalationPoliciesGetEscalationPolicyByIDNotFoundError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// EscalationPoliciesGetEscalationPolicyByIDForbiddenError - Access is forbidden.
type EscalationPoliciesGetEscalationPolicyByIDForbiddenError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &EscalationPoliciesGetEscalationPolicyByIDForbiddenError{}

func (e *EscalationPoliciesGetEscalationPolicyByIDForbiddenError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// EscalationPoliciesGetEscalationPolicyByIDPaymentRequiredError - Client error
type EscalationPoliciesGetEscalationPolicyByIDPaymentRequiredError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &EscalationPoliciesGetEscalationPolicyByIDPaymentRequiredError{}

func (e *EscalationPoliciesGetEscalationPolicyByIDPaymentRequiredError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// EscalationPoliciesGetEscalationPolicyByIDUnauthorizedError - Access is unauthorized.
type EscalationPoliciesGetEscalationPolicyByIDUnauthorizedError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &EscalationPoliciesGetEscalationPolicyByIDUnauthorizedError{}

func (e *EscalationPoliciesGetEscalationPolicyByIDUnauthorizedError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// EscalationPoliciesGetEscalationPolicyByIDBadRequestError - The server could not understand the request due to invalid syntax.
type EscalationPoliciesGetEscalationPolicyByIDBadRequestError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &EscalationPoliciesGetEscalationPolicyByIDBadRequestError{}

func (e *EscalationPoliciesGetEscalationPolicyByIDBadRequestError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}
