// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package apierrors

import (
	"encoding/json"
	"github.com/SquadcastHub/squadcast-sdk-go/squadcastv1/models/components"
)

// GlobalEventRulesUpdateGlobalEventRuleByIDGatewayTimeoutError - Server error
type GlobalEventRulesUpdateGlobalEventRuleByIDGatewayTimeoutError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &GlobalEventRulesUpdateGlobalEventRuleByIDGatewayTimeoutError{}

func (e *GlobalEventRulesUpdateGlobalEventRuleByIDGatewayTimeoutError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// GlobalEventRulesUpdateGlobalEventRuleByIDServiceUnavailableError - Service unavailable.
type GlobalEventRulesUpdateGlobalEventRuleByIDServiceUnavailableError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &GlobalEventRulesUpdateGlobalEventRuleByIDServiceUnavailableError{}

func (e *GlobalEventRulesUpdateGlobalEventRuleByIDServiceUnavailableError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// GlobalEventRulesUpdateGlobalEventRuleByIDBadGatewayError - Server error
type GlobalEventRulesUpdateGlobalEventRuleByIDBadGatewayError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &GlobalEventRulesUpdateGlobalEventRuleByIDBadGatewayError{}

func (e *GlobalEventRulesUpdateGlobalEventRuleByIDBadGatewayError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// GlobalEventRulesUpdateGlobalEventRuleByIDInternalServerError - Server error
type GlobalEventRulesUpdateGlobalEventRuleByIDInternalServerError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &GlobalEventRulesUpdateGlobalEventRuleByIDInternalServerError{}

func (e *GlobalEventRulesUpdateGlobalEventRuleByIDInternalServerError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// GlobalEventRulesUpdateGlobalEventRuleByIDUnprocessableEntityError - Client error
type GlobalEventRulesUpdateGlobalEventRuleByIDUnprocessableEntityError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &GlobalEventRulesUpdateGlobalEventRuleByIDUnprocessableEntityError{}

func (e *GlobalEventRulesUpdateGlobalEventRuleByIDUnprocessableEntityError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// GlobalEventRulesUpdateGlobalEventRuleByIDConflictError - The request conflicts with the current state of the server.
type GlobalEventRulesUpdateGlobalEventRuleByIDConflictError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &GlobalEventRulesUpdateGlobalEventRuleByIDConflictError{}

func (e *GlobalEventRulesUpdateGlobalEventRuleByIDConflictError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// GlobalEventRulesUpdateGlobalEventRuleByIDNotFoundError - The server cannot find the requested resource.
type GlobalEventRulesUpdateGlobalEventRuleByIDNotFoundError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &GlobalEventRulesUpdateGlobalEventRuleByIDNotFoundError{}

func (e *GlobalEventRulesUpdateGlobalEventRuleByIDNotFoundError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// GlobalEventRulesUpdateGlobalEventRuleByIDForbiddenError - Access is forbidden.
type GlobalEventRulesUpdateGlobalEventRuleByIDForbiddenError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &GlobalEventRulesUpdateGlobalEventRuleByIDForbiddenError{}

func (e *GlobalEventRulesUpdateGlobalEventRuleByIDForbiddenError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// GlobalEventRulesUpdateGlobalEventRuleByIDPaymentRequiredError - Client error
type GlobalEventRulesUpdateGlobalEventRuleByIDPaymentRequiredError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &GlobalEventRulesUpdateGlobalEventRuleByIDPaymentRequiredError{}

func (e *GlobalEventRulesUpdateGlobalEventRuleByIDPaymentRequiredError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// GlobalEventRulesUpdateGlobalEventRuleByIDUnauthorizedError - Access is unauthorized.
type GlobalEventRulesUpdateGlobalEventRuleByIDUnauthorizedError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &GlobalEventRulesUpdateGlobalEventRuleByIDUnauthorizedError{}

func (e *GlobalEventRulesUpdateGlobalEventRuleByIDUnauthorizedError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// GlobalEventRulesUpdateGlobalEventRuleByIDBadRequestError - The server could not understand the request due to invalid syntax.
type GlobalEventRulesUpdateGlobalEventRuleByIDBadRequestError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &GlobalEventRulesUpdateGlobalEventRuleByIDBadRequestError{}

func (e *GlobalEventRulesUpdateGlobalEventRuleByIDBadRequestError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}
