// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package apierrors

import (
	"encoding/json"
	"github.com/SquadcastHub/squadcast-sdk-go/models/components"
)

// GlobalEventRulesGetGlobalEventRuleByIDGatewayTimeoutError - Server error
type GlobalEventRulesGetGlobalEventRuleByIDGatewayTimeoutError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &GlobalEventRulesGetGlobalEventRuleByIDGatewayTimeoutError{}

func (e *GlobalEventRulesGetGlobalEventRuleByIDGatewayTimeoutError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// GlobalEventRulesGetGlobalEventRuleByIDServiceUnavailableError - Service unavailable.
type GlobalEventRulesGetGlobalEventRuleByIDServiceUnavailableError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &GlobalEventRulesGetGlobalEventRuleByIDServiceUnavailableError{}

func (e *GlobalEventRulesGetGlobalEventRuleByIDServiceUnavailableError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// GlobalEventRulesGetGlobalEventRuleByIDBadGatewayError - Server error
type GlobalEventRulesGetGlobalEventRuleByIDBadGatewayError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &GlobalEventRulesGetGlobalEventRuleByIDBadGatewayError{}

func (e *GlobalEventRulesGetGlobalEventRuleByIDBadGatewayError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// GlobalEventRulesGetGlobalEventRuleByIDInternalServerError - Server error
type GlobalEventRulesGetGlobalEventRuleByIDInternalServerError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &GlobalEventRulesGetGlobalEventRuleByIDInternalServerError{}

func (e *GlobalEventRulesGetGlobalEventRuleByIDInternalServerError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// GlobalEventRulesGetGlobalEventRuleByIDUnprocessableEntityError - Client error
type GlobalEventRulesGetGlobalEventRuleByIDUnprocessableEntityError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &GlobalEventRulesGetGlobalEventRuleByIDUnprocessableEntityError{}

func (e *GlobalEventRulesGetGlobalEventRuleByIDUnprocessableEntityError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// GlobalEventRulesGetGlobalEventRuleByIDConflictError - The request conflicts with the current state of the server.
type GlobalEventRulesGetGlobalEventRuleByIDConflictError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &GlobalEventRulesGetGlobalEventRuleByIDConflictError{}

func (e *GlobalEventRulesGetGlobalEventRuleByIDConflictError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// GlobalEventRulesGetGlobalEventRuleByIDNotFoundError - The server cannot find the requested resource.
type GlobalEventRulesGetGlobalEventRuleByIDNotFoundError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &GlobalEventRulesGetGlobalEventRuleByIDNotFoundError{}

func (e *GlobalEventRulesGetGlobalEventRuleByIDNotFoundError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// GlobalEventRulesGetGlobalEventRuleByIDForbiddenError - Access is forbidden.
type GlobalEventRulesGetGlobalEventRuleByIDForbiddenError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &GlobalEventRulesGetGlobalEventRuleByIDForbiddenError{}

func (e *GlobalEventRulesGetGlobalEventRuleByIDForbiddenError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// GlobalEventRulesGetGlobalEventRuleByIDPaymentRequiredError - Client error
type GlobalEventRulesGetGlobalEventRuleByIDPaymentRequiredError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &GlobalEventRulesGetGlobalEventRuleByIDPaymentRequiredError{}

func (e *GlobalEventRulesGetGlobalEventRuleByIDPaymentRequiredError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// GlobalEventRulesGetGlobalEventRuleByIDUnauthorizedError - Access is unauthorized.
type GlobalEventRulesGetGlobalEventRuleByIDUnauthorizedError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &GlobalEventRulesGetGlobalEventRuleByIDUnauthorizedError{}

func (e *GlobalEventRulesGetGlobalEventRuleByIDUnauthorizedError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// GlobalEventRulesGetGlobalEventRuleByIDBadRequestError - The server could not understand the request due to invalid syntax.
type GlobalEventRulesGetGlobalEventRuleByIDBadRequestError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &GlobalEventRulesGetGlobalEventRuleByIDBadRequestError{}

func (e *GlobalEventRulesGetGlobalEventRuleByIDBadRequestError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}
