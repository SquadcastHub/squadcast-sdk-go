// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package apierrors

import (
	"encoding/json"
	"github.com/SquadcastHub/squadcast-sdk-go/squadcastv1/models/components"
)

// TaggingRulesCreateOrUpdateTaggingRulesGatewayTimeoutError - Server error
type TaggingRulesCreateOrUpdateTaggingRulesGatewayTimeoutError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &TaggingRulesCreateOrUpdateTaggingRulesGatewayTimeoutError{}

func (e *TaggingRulesCreateOrUpdateTaggingRulesGatewayTimeoutError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// TaggingRulesCreateOrUpdateTaggingRulesServiceUnavailableError - Service unavailable.
type TaggingRulesCreateOrUpdateTaggingRulesServiceUnavailableError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &TaggingRulesCreateOrUpdateTaggingRulesServiceUnavailableError{}

func (e *TaggingRulesCreateOrUpdateTaggingRulesServiceUnavailableError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// TaggingRulesCreateOrUpdateTaggingRulesBadGatewayError - Server error
type TaggingRulesCreateOrUpdateTaggingRulesBadGatewayError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &TaggingRulesCreateOrUpdateTaggingRulesBadGatewayError{}

func (e *TaggingRulesCreateOrUpdateTaggingRulesBadGatewayError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// TaggingRulesCreateOrUpdateTaggingRulesInternalServerError - Server error
type TaggingRulesCreateOrUpdateTaggingRulesInternalServerError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &TaggingRulesCreateOrUpdateTaggingRulesInternalServerError{}

func (e *TaggingRulesCreateOrUpdateTaggingRulesInternalServerError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// TaggingRulesCreateOrUpdateTaggingRulesUnprocessableEntityError - Client error
type TaggingRulesCreateOrUpdateTaggingRulesUnprocessableEntityError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &TaggingRulesCreateOrUpdateTaggingRulesUnprocessableEntityError{}

func (e *TaggingRulesCreateOrUpdateTaggingRulesUnprocessableEntityError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// TaggingRulesCreateOrUpdateTaggingRulesConflictError - The request conflicts with the current state of the server.
type TaggingRulesCreateOrUpdateTaggingRulesConflictError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &TaggingRulesCreateOrUpdateTaggingRulesConflictError{}

func (e *TaggingRulesCreateOrUpdateTaggingRulesConflictError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// TaggingRulesCreateOrUpdateTaggingRulesNotFoundError - The server cannot find the requested resource.
type TaggingRulesCreateOrUpdateTaggingRulesNotFoundError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &TaggingRulesCreateOrUpdateTaggingRulesNotFoundError{}

func (e *TaggingRulesCreateOrUpdateTaggingRulesNotFoundError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// TaggingRulesCreateOrUpdateTaggingRulesForbiddenError - Access is forbidden.
type TaggingRulesCreateOrUpdateTaggingRulesForbiddenError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &TaggingRulesCreateOrUpdateTaggingRulesForbiddenError{}

func (e *TaggingRulesCreateOrUpdateTaggingRulesForbiddenError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// TaggingRulesCreateOrUpdateTaggingRulesPaymentRequiredError - Client error
type TaggingRulesCreateOrUpdateTaggingRulesPaymentRequiredError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &TaggingRulesCreateOrUpdateTaggingRulesPaymentRequiredError{}

func (e *TaggingRulesCreateOrUpdateTaggingRulesPaymentRequiredError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// TaggingRulesCreateOrUpdateTaggingRulesUnauthorizedError - Access is unauthorized.
type TaggingRulesCreateOrUpdateTaggingRulesUnauthorizedError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &TaggingRulesCreateOrUpdateTaggingRulesUnauthorizedError{}

func (e *TaggingRulesCreateOrUpdateTaggingRulesUnauthorizedError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// TaggingRulesCreateOrUpdateTaggingRulesBadRequestError - The server could not understand the request due to invalid syntax.
type TaggingRulesCreateOrUpdateTaggingRulesBadRequestError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &TaggingRulesCreateOrUpdateTaggingRulesBadRequestError{}

func (e *TaggingRulesCreateOrUpdateTaggingRulesBadRequestError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}
