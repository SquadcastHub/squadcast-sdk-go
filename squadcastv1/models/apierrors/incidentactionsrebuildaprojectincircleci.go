// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package apierrors

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/SquadcastHub/squadcast-sdk-go/internal/utils"
	"github.com/SquadcastHub/squadcast-sdk-go/models/components"
)

// IncidentActionsRebuildAProjectInCircleciGatewayTimeoutError - Server error
type IncidentActionsRebuildAProjectInCircleciGatewayTimeoutError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &IncidentActionsRebuildAProjectInCircleciGatewayTimeoutError{}

func (e *IncidentActionsRebuildAProjectInCircleciGatewayTimeoutError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// IncidentActionsRebuildAProjectInCircleciServiceUnavailableError - Service unavailable.
type IncidentActionsRebuildAProjectInCircleciServiceUnavailableError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &IncidentActionsRebuildAProjectInCircleciServiceUnavailableError{}

func (e *IncidentActionsRebuildAProjectInCircleciServiceUnavailableError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// IncidentActionsRebuildAProjectInCircleciBadGatewayError - Server error
type IncidentActionsRebuildAProjectInCircleciBadGatewayError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &IncidentActionsRebuildAProjectInCircleciBadGatewayError{}

func (e *IncidentActionsRebuildAProjectInCircleciBadGatewayError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// IncidentActionsRebuildAProjectInCircleciInternalServerError - Server error
type IncidentActionsRebuildAProjectInCircleciInternalServerError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &IncidentActionsRebuildAProjectInCircleciInternalServerError{}

func (e *IncidentActionsRebuildAProjectInCircleciInternalServerError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// IncidentActionsRebuildAProjectInCircleciUnprocessableEntityError - Client error
type IncidentActionsRebuildAProjectInCircleciUnprocessableEntityError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &IncidentActionsRebuildAProjectInCircleciUnprocessableEntityError{}

func (e *IncidentActionsRebuildAProjectInCircleciUnprocessableEntityError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// IncidentActionsRebuildAProjectInCircleciConflictError - The request conflicts with the current state of the server.
type IncidentActionsRebuildAProjectInCircleciConflictError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &IncidentActionsRebuildAProjectInCircleciConflictError{}

func (e *IncidentActionsRebuildAProjectInCircleciConflictError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// IncidentActionsRebuildAProjectInCircleciNotFoundError - The server cannot find the requested resource.
type IncidentActionsRebuildAProjectInCircleciNotFoundError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &IncidentActionsRebuildAProjectInCircleciNotFoundError{}

func (e *IncidentActionsRebuildAProjectInCircleciNotFoundError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// IncidentActionsRebuildAProjectInCircleciForbiddenError - Access is forbidden.
type IncidentActionsRebuildAProjectInCircleciForbiddenError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &IncidentActionsRebuildAProjectInCircleciForbiddenError{}

func (e *IncidentActionsRebuildAProjectInCircleciForbiddenError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// IncidentActionsRebuildAProjectInCircleciPaymentRequiredError - Client error
type IncidentActionsRebuildAProjectInCircleciPaymentRequiredError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &IncidentActionsRebuildAProjectInCircleciPaymentRequiredError{}

func (e *IncidentActionsRebuildAProjectInCircleciPaymentRequiredError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// IncidentActionsRebuildAProjectInCircleciUnauthorizedError - Access is unauthorized.
type IncidentActionsRebuildAProjectInCircleciUnauthorizedError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &IncidentActionsRebuildAProjectInCircleciUnauthorizedError{}

func (e *IncidentActionsRebuildAProjectInCircleciUnauthorizedError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

type ResponseBodyError2 struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &ResponseBodyError2{}

func (e *ResponseBodyError2) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

type ResponseBodyError1 struct {
	// Represents the metadata for a CircleCI error response.
	Meta     components.V3IncidentsIncidentActionsCircleCIErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata                                `json:"-"`
}

var _ error = &ResponseBodyError1{}

func (e *ResponseBodyError1) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

type BadRequestType string

const (
	BadRequestTypeResponseBodyError1 BadRequestType = "ResponseBody_error_1"
	BadRequestTypeResponseBodyError2 BadRequestType = "ResponseBody_error_2"
)

// BadRequest - Represents a CircleCI error response for a 400 status code.
type BadRequest struct {
	ResponseBodyError1 *ResponseBodyError1 `queryParam:"inline" name:"ResponseBody"`
	ResponseBodyError2 *ResponseBodyError2 `queryParam:"inline" name:"ResponseBody"`

	Type BadRequestType

	HTTPMeta components.HTTPMetadata `json:"-"`
}

var _ error = &BadRequest{}

func CreateBadRequestResponseBodyError1(responseBodyError1 ResponseBodyError1) BadRequest {
	typ := BadRequestTypeResponseBodyError1

	return BadRequest{
		ResponseBodyError1: &responseBodyError1,
		Type:               typ,
	}
}

func CreateBadRequestResponseBodyError2(responseBodyError2 ResponseBodyError2) BadRequest {
	typ := BadRequestTypeResponseBodyError2

	return BadRequest{
		ResponseBodyError2: &responseBodyError2,
		Type:               typ,
	}
}

func (u *BadRequest) UnmarshalJSON(data []byte) error {

	var responseBodyError1 ResponseBodyError1 = ResponseBodyError1{}
	if err := utils.UnmarshalJSON(data, &responseBodyError1, "", true, nil); err == nil {
		u.ResponseBodyError1 = &responseBodyError1
		u.Type = BadRequestTypeResponseBodyError1
		return nil
	}

	var responseBodyError2 ResponseBodyError2 = ResponseBodyError2{}
	if err := utils.UnmarshalJSON(data, &responseBodyError2, "", true, nil); err == nil {
		u.ResponseBodyError2 = &responseBodyError2
		u.Type = BadRequestTypeResponseBodyError2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for BadRequest", string(data))
}

func (u BadRequest) MarshalJSON() ([]byte, error) {
	if u.ResponseBodyError1 != nil {
		return utils.MarshalJSON(u.ResponseBodyError1, "", true)
	}

	if u.ResponseBodyError2 != nil {
		return utils.MarshalJSON(u.ResponseBodyError2, "", true)
	}

	return nil, errors.New("could not marshal union type BadRequest: all fields are null")
}

func (u BadRequest) Error() string {
	switch u.Type {
	case BadRequestTypeResponseBodyError1:
		data, _ := json.Marshal(u.ResponseBodyError1)
		return string(data)
	case BadRequestTypeResponseBodyError2:
		data, _ := json.Marshal(u.ResponseBodyError2)
		return string(data)
	default:
		return "unknown error"
	}
}
