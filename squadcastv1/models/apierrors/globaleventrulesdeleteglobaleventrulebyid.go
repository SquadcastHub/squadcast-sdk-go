// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package apierrors

import (
	"encoding/json"
	"github.com/SquadcastHub/squadcast-sdk-go/squadcastv1/models/components"
)

// GlobalEventRulesDeleteGlobalEventRuleByIDGatewayTimeoutError - Server error
type GlobalEventRulesDeleteGlobalEventRuleByIDGatewayTimeoutError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &GlobalEventRulesDeleteGlobalEventRuleByIDGatewayTimeoutError{}

func (e *GlobalEventRulesDeleteGlobalEventRuleByIDGatewayTimeoutError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// GlobalEventRulesDeleteGlobalEventRuleByIDServiceUnavailableError - Service unavailable.
type GlobalEventRulesDeleteGlobalEventRuleByIDServiceUnavailableError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &GlobalEventRulesDeleteGlobalEventRuleByIDServiceUnavailableError{}

func (e *GlobalEventRulesDeleteGlobalEventRuleByIDServiceUnavailableError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// GlobalEventRulesDeleteGlobalEventRuleByIDBadGatewayError - Server error
type GlobalEventRulesDeleteGlobalEventRuleByIDBadGatewayError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &GlobalEventRulesDeleteGlobalEventRuleByIDBadGatewayError{}

func (e *GlobalEventRulesDeleteGlobalEventRuleByIDBadGatewayError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// GlobalEventRulesDeleteGlobalEventRuleByIDInternalServerError - Server error
type GlobalEventRulesDeleteGlobalEventRuleByIDInternalServerError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &GlobalEventRulesDeleteGlobalEventRuleByIDInternalServerError{}

func (e *GlobalEventRulesDeleteGlobalEventRuleByIDInternalServerError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// GlobalEventRulesDeleteGlobalEventRuleByIDUnprocessableEntityError - Client error
type GlobalEventRulesDeleteGlobalEventRuleByIDUnprocessableEntityError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &GlobalEventRulesDeleteGlobalEventRuleByIDUnprocessableEntityError{}

func (e *GlobalEventRulesDeleteGlobalEventRuleByIDUnprocessableEntityError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// GlobalEventRulesDeleteGlobalEventRuleByIDConflictError - The request conflicts with the current state of the server.
type GlobalEventRulesDeleteGlobalEventRuleByIDConflictError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &GlobalEventRulesDeleteGlobalEventRuleByIDConflictError{}

func (e *GlobalEventRulesDeleteGlobalEventRuleByIDConflictError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// GlobalEventRulesDeleteGlobalEventRuleByIDNotFoundError - The server cannot find the requested resource.
type GlobalEventRulesDeleteGlobalEventRuleByIDNotFoundError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &GlobalEventRulesDeleteGlobalEventRuleByIDNotFoundError{}

func (e *GlobalEventRulesDeleteGlobalEventRuleByIDNotFoundError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// GlobalEventRulesDeleteGlobalEventRuleByIDForbiddenError - Access is forbidden.
type GlobalEventRulesDeleteGlobalEventRuleByIDForbiddenError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &GlobalEventRulesDeleteGlobalEventRuleByIDForbiddenError{}

func (e *GlobalEventRulesDeleteGlobalEventRuleByIDForbiddenError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// GlobalEventRulesDeleteGlobalEventRuleByIDPaymentRequiredError - Client error
type GlobalEventRulesDeleteGlobalEventRuleByIDPaymentRequiredError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &GlobalEventRulesDeleteGlobalEventRuleByIDPaymentRequiredError{}

func (e *GlobalEventRulesDeleteGlobalEventRuleByIDPaymentRequiredError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// GlobalEventRulesDeleteGlobalEventRuleByIDUnauthorizedError - Access is unauthorized.
type GlobalEventRulesDeleteGlobalEventRuleByIDUnauthorizedError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &GlobalEventRulesDeleteGlobalEventRuleByIDUnauthorizedError{}

func (e *GlobalEventRulesDeleteGlobalEventRuleByIDUnauthorizedError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// GlobalEventRulesDeleteGlobalEventRuleByIDBadRequestError - The server could not understand the request due to invalid syntax.
type GlobalEventRulesDeleteGlobalEventRuleByIDBadRequestError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &GlobalEventRulesDeleteGlobalEventRuleByIDBadRequestError{}

func (e *GlobalEventRulesDeleteGlobalEventRuleByIDBadRequestError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}
