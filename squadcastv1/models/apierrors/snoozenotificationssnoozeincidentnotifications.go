// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package apierrors

import (
	"encoding/json"
	"github.com/SquadcastHub/squadcast-sdk-go/models/components"
)

// SnoozeNotificationsSnoozeIncidentNotificationsGatewayTimeoutError - Server error
type SnoozeNotificationsSnoozeIncidentNotificationsGatewayTimeoutError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &SnoozeNotificationsSnoozeIncidentNotificationsGatewayTimeoutError{}

func (e *SnoozeNotificationsSnoozeIncidentNotificationsGatewayTimeoutError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// SnoozeNotificationsSnoozeIncidentNotificationsServiceUnavailableError - Service unavailable.
type SnoozeNotificationsSnoozeIncidentNotificationsServiceUnavailableError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &SnoozeNotificationsSnoozeIncidentNotificationsServiceUnavailableError{}

func (e *SnoozeNotificationsSnoozeIncidentNotificationsServiceUnavailableError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// SnoozeNotificationsSnoozeIncidentNotificationsBadGatewayError - Server error
type SnoozeNotificationsSnoozeIncidentNotificationsBadGatewayError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &SnoozeNotificationsSnoozeIncidentNotificationsBadGatewayError{}

func (e *SnoozeNotificationsSnoozeIncidentNotificationsBadGatewayError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// SnoozeNotificationsSnoozeIncidentNotificationsInternalServerError - Server error
type SnoozeNotificationsSnoozeIncidentNotificationsInternalServerError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &SnoozeNotificationsSnoozeIncidentNotificationsInternalServerError{}

func (e *SnoozeNotificationsSnoozeIncidentNotificationsInternalServerError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// SnoozeNotificationsSnoozeIncidentNotificationsUnprocessableEntityError - Client error
type SnoozeNotificationsSnoozeIncidentNotificationsUnprocessableEntityError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &SnoozeNotificationsSnoozeIncidentNotificationsUnprocessableEntityError{}

func (e *SnoozeNotificationsSnoozeIncidentNotificationsUnprocessableEntityError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// SnoozeNotificationsSnoozeIncidentNotificationsConflictError - The request conflicts with the current state of the server.
type SnoozeNotificationsSnoozeIncidentNotificationsConflictError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &SnoozeNotificationsSnoozeIncidentNotificationsConflictError{}

func (e *SnoozeNotificationsSnoozeIncidentNotificationsConflictError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// SnoozeNotificationsSnoozeIncidentNotificationsNotFoundError - The server cannot find the requested resource.
type SnoozeNotificationsSnoozeIncidentNotificationsNotFoundError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &SnoozeNotificationsSnoozeIncidentNotificationsNotFoundError{}

func (e *SnoozeNotificationsSnoozeIncidentNotificationsNotFoundError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// SnoozeNotificationsSnoozeIncidentNotificationsForbiddenError - Access is forbidden.
type SnoozeNotificationsSnoozeIncidentNotificationsForbiddenError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &SnoozeNotificationsSnoozeIncidentNotificationsForbiddenError{}

func (e *SnoozeNotificationsSnoozeIncidentNotificationsForbiddenError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// SnoozeNotificationsSnoozeIncidentNotificationsPaymentRequiredError - Client error
type SnoozeNotificationsSnoozeIncidentNotificationsPaymentRequiredError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &SnoozeNotificationsSnoozeIncidentNotificationsPaymentRequiredError{}

func (e *SnoozeNotificationsSnoozeIncidentNotificationsPaymentRequiredError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// SnoozeNotificationsSnoozeIncidentNotificationsUnauthorizedError - Access is unauthorized.
type SnoozeNotificationsSnoozeIncidentNotificationsUnauthorizedError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &SnoozeNotificationsSnoozeIncidentNotificationsUnauthorizedError{}

func (e *SnoozeNotificationsSnoozeIncidentNotificationsUnauthorizedError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// SnoozeNotificationsSnoozeIncidentNotificationsBadRequestError - The server could not understand the request due to invalid syntax.
type SnoozeNotificationsSnoozeIncidentNotificationsBadRequestError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &SnoozeNotificationsSnoozeIncidentNotificationsBadRequestError{}

func (e *SnoozeNotificationsSnoozeIncidentNotificationsBadRequestError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}
