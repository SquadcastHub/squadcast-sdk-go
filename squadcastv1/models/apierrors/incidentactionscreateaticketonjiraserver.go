// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package apierrors

import (
	"encoding/json"
	"github.com/SquadcastHub/squadcast-sdk-go/models/components"
)

// IncidentActionsCreateATicketOnJiraServerGatewayTimeoutError - Server error
type IncidentActionsCreateATicketOnJiraServerGatewayTimeoutError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &IncidentActionsCreateATicketOnJiraServerGatewayTimeoutError{}

func (e *IncidentActionsCreateATicketOnJiraServerGatewayTimeoutError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// IncidentActionsCreateATicketOnJiraServerServiceUnavailableError - Service unavailable.
type IncidentActionsCreateATicketOnJiraServerServiceUnavailableError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &IncidentActionsCreateATicketOnJiraServerServiceUnavailableError{}

func (e *IncidentActionsCreateATicketOnJiraServerServiceUnavailableError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// IncidentActionsCreateATicketOnJiraServerBadGatewayError - Server error
type IncidentActionsCreateATicketOnJiraServerBadGatewayError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &IncidentActionsCreateATicketOnJiraServerBadGatewayError{}

func (e *IncidentActionsCreateATicketOnJiraServerBadGatewayError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// IncidentActionsCreateATicketOnJiraServerInternalServerError - Server error
type IncidentActionsCreateATicketOnJiraServerInternalServerError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &IncidentActionsCreateATicketOnJiraServerInternalServerError{}

func (e *IncidentActionsCreateATicketOnJiraServerInternalServerError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// IncidentActionsCreateATicketOnJiraServerUnprocessableEntityError - Client error
type IncidentActionsCreateATicketOnJiraServerUnprocessableEntityError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &IncidentActionsCreateATicketOnJiraServerUnprocessableEntityError{}

func (e *IncidentActionsCreateATicketOnJiraServerUnprocessableEntityError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// IncidentActionsCreateATicketOnJiraServerConflictError - The request conflicts with the current state of the server.
type IncidentActionsCreateATicketOnJiraServerConflictError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &IncidentActionsCreateATicketOnJiraServerConflictError{}

func (e *IncidentActionsCreateATicketOnJiraServerConflictError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// IncidentActionsCreateATicketOnJiraServerNotFoundError - The server cannot find the requested resource.
type IncidentActionsCreateATicketOnJiraServerNotFoundError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &IncidentActionsCreateATicketOnJiraServerNotFoundError{}

func (e *IncidentActionsCreateATicketOnJiraServerNotFoundError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// IncidentActionsCreateATicketOnJiraServerForbiddenError - Access is forbidden.
type IncidentActionsCreateATicketOnJiraServerForbiddenError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &IncidentActionsCreateATicketOnJiraServerForbiddenError{}

func (e *IncidentActionsCreateATicketOnJiraServerForbiddenError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// IncidentActionsCreateATicketOnJiraServerPaymentRequiredError - Client error
type IncidentActionsCreateATicketOnJiraServerPaymentRequiredError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &IncidentActionsCreateATicketOnJiraServerPaymentRequiredError{}

func (e *IncidentActionsCreateATicketOnJiraServerPaymentRequiredError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// IncidentActionsCreateATicketOnJiraServerUnauthorizedError - Access is unauthorized.
type IncidentActionsCreateATicketOnJiraServerUnauthorizedError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &IncidentActionsCreateATicketOnJiraServerUnauthorizedError{}

func (e *IncidentActionsCreateATicketOnJiraServerUnauthorizedError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// IncidentActionsCreateATicketOnJiraServerBadRequestError - The server could not understand the request due to invalid syntax.
type IncidentActionsCreateATicketOnJiraServerBadRequestError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &IncidentActionsCreateATicketOnJiraServerBadRequestError{}

func (e *IncidentActionsCreateATicketOnJiraServerBadRequestError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}
