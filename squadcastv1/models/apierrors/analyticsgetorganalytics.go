// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package apierrors

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/SquadcastHub/squadcast-sdk-go/squadcastv1/internal/utils"
	"github.com/SquadcastHub/squadcast-sdk-go/squadcastv1/models/components"
)

// GatewayTimeoutError - Server error
type GatewayTimeoutError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &GatewayTimeoutError{}

func (e *GatewayTimeoutError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// ServiceUnavailableError - Service unavailable.
type ServiceUnavailableError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &ServiceUnavailableError{}

func (e *ServiceUnavailableError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// BadGatewayError - Server error
type BadGatewayError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &BadGatewayError{}

func (e *BadGatewayError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// InternalServerError - Server error
type InternalServerError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &InternalServerError{}

func (e *InternalServerError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// UnprocessableEntityError - Client error
type UnprocessableEntityError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &UnprocessableEntityError{}

func (e *UnprocessableEntityError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// ConflictError - The request conflicts with the current state of the server.
type ConflictError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &ConflictError{}

func (e *ConflictError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// NotFoundError - The server cannot find the requested resource.
type NotFoundError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &NotFoundError{}

func (e *NotFoundError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// ForbiddenError - Access is forbidden.
type ForbiddenError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &ForbiddenError{}

func (e *ForbiddenError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// PaymentRequiredError - Client error
type PaymentRequiredError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &PaymentRequiredError{}

func (e *PaymentRequiredError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// UnauthorizedError - Access is unauthorized.
type UnauthorizedError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &UnauthorizedError{}

func (e *UnauthorizedError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// BadRequestError - The server could not understand the request due to invalid syntax.
type BadRequestError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &BadRequestError{}

func (e *BadRequestError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

type ResponseBodyError2 struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &ResponseBodyError2{}

func (e *ResponseBodyError2) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

type ResponseBodyError1 struct {
	// Represents the metadata for a CircleCI error response.
	Meta     components.V3IncidentsIncidentActionsCircleCIErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata                                `json:"-"`
}

var _ error = &ResponseBodyError1{}

func (e *ResponseBodyError1) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

type BadRequestType string

const (
	BadRequestTypeResponseBodyError1 BadRequestType = "ResponseBody_error_1"
	BadRequestTypeResponseBodyError2 BadRequestType = "ResponseBody_error_2"
)

// BadRequest - Represents a CircleCI error response for a 400 status code.
type BadRequest struct {
	ResponseBodyError1 *ResponseBodyError1 `queryParam:"inline,name=ResponseBody"`
	ResponseBodyError2 *ResponseBodyError2 `queryParam:"inline,name=ResponseBody"`

	Type BadRequestType

	HTTPMeta components.HTTPMetadata `json:"-"`
}

var _ error = &BadRequest{}

func CreateBadRequestResponseBodyError1(responseBodyError1 ResponseBodyError1) BadRequest {
	typ := BadRequestTypeResponseBodyError1

	return BadRequest{
		ResponseBodyError1: &responseBodyError1,
		Type:               typ,
	}
}

func CreateBadRequestResponseBodyError2(responseBodyError2 ResponseBodyError2) BadRequest {
	typ := BadRequestTypeResponseBodyError2

	return BadRequest{
		ResponseBodyError2: &responseBodyError2,
		Type:               typ,
	}
}

func (u *BadRequest) UnmarshalJSON(data []byte) error {

	var responseBodyError1 ResponseBodyError1 = ResponseBodyError1{}
	if err := utils.UnmarshalJSON(data, &responseBodyError1, "", true, nil); err == nil {
		u.ResponseBodyError1 = &responseBodyError1
		u.Type = BadRequestTypeResponseBodyError1
		return nil
	}

	var responseBodyError2 ResponseBodyError2 = ResponseBodyError2{}
	if err := utils.UnmarshalJSON(data, &responseBodyError2, "", true, nil); err == nil {
		u.ResponseBodyError2 = &responseBodyError2
		u.Type = BadRequestTypeResponseBodyError2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for BadRequest", string(data))
}

func (u BadRequest) MarshalJSON() ([]byte, error) {
	if u.ResponseBodyError1 != nil {
		return utils.MarshalJSON(u.ResponseBodyError1, "", true)
	}

	if u.ResponseBodyError2 != nil {
		return utils.MarshalJSON(u.ResponseBodyError2, "", true)
	}

	return nil, errors.New("could not marshal union type BadRequest: all fields are null")
}

func (u BadRequest) Error() string {
	switch u.Type {
	case BadRequestTypeResponseBodyError1:
		data, _ := json.Marshal(u.ResponseBodyError1)
		return string(data)
	case BadRequestTypeResponseBodyError2:
		data, _ := json.Marshal(u.ResponseBodyError2)
		return string(data)
	default:
		return "unknown error"
	}
}
