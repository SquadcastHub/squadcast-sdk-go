// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package apierrors

import (
	"encoding/json"
	"github.com/SquadcastHub/squadcast-sdk-go/models/components"
)

// IncidentsResolveIncidentGatewayTimeoutError - Server error
type IncidentsResolveIncidentGatewayTimeoutError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &IncidentsResolveIncidentGatewayTimeoutError{}

func (e *IncidentsResolveIncidentGatewayTimeoutError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// IncidentsResolveIncidentServiceUnavailableError - Service unavailable.
type IncidentsResolveIncidentServiceUnavailableError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &IncidentsResolveIncidentServiceUnavailableError{}

func (e *IncidentsResolveIncidentServiceUnavailableError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// IncidentsResolveIncidentBadGatewayError - Server error
type IncidentsResolveIncidentBadGatewayError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &IncidentsResolveIncidentBadGatewayError{}

func (e *IncidentsResolveIncidentBadGatewayError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// IncidentsResolveIncidentInternalServerError - Server error
type IncidentsResolveIncidentInternalServerError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &IncidentsResolveIncidentInternalServerError{}

func (e *IncidentsResolveIncidentInternalServerError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// IncidentsResolveIncidentUnprocessableEntityError - Client error
type IncidentsResolveIncidentUnprocessableEntityError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &IncidentsResolveIncidentUnprocessableEntityError{}

func (e *IncidentsResolveIncidentUnprocessableEntityError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// IncidentsResolveIncidentConflictError - The request conflicts with the current state of the server.
type IncidentsResolveIncidentConflictError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &IncidentsResolveIncidentConflictError{}

func (e *IncidentsResolveIncidentConflictError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// IncidentsResolveIncidentNotFoundError - The server cannot find the requested resource.
type IncidentsResolveIncidentNotFoundError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &IncidentsResolveIncidentNotFoundError{}

func (e *IncidentsResolveIncidentNotFoundError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// IncidentsResolveIncidentForbiddenError - Access is forbidden.
type IncidentsResolveIncidentForbiddenError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &IncidentsResolveIncidentForbiddenError{}

func (e *IncidentsResolveIncidentForbiddenError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// IncidentsResolveIncidentPaymentRequiredError - Client error
type IncidentsResolveIncidentPaymentRequiredError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &IncidentsResolveIncidentPaymentRequiredError{}

func (e *IncidentsResolveIncidentPaymentRequiredError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// IncidentsResolveIncidentUnauthorizedError - Access is unauthorized.
type IncidentsResolveIncidentUnauthorizedError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &IncidentsResolveIncidentUnauthorizedError{}

func (e *IncidentsResolveIncidentUnauthorizedError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// IncidentsResolveIncidentBadRequestError - The server could not understand the request due to invalid syntax.
type IncidentsResolveIncidentBadRequestError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &IncidentsResolveIncidentBadRequestError{}

func (e *IncidentsResolveIncidentBadRequestError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}
