// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package apierrors

import (
	"encoding/json"
	"github.com/SquadcastHub/squadcast-sdk-go/squadcastv1/models/components"
)

// MSTeamsCreateOrUpdateMsteamsConfigurationGatewayTimeoutError - Server error
type MSTeamsCreateOrUpdateMsteamsConfigurationGatewayTimeoutError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &MSTeamsCreateOrUpdateMsteamsConfigurationGatewayTimeoutError{}

func (e *MSTeamsCreateOrUpdateMsteamsConfigurationGatewayTimeoutError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// MSTeamsCreateOrUpdateMsteamsConfigurationServiceUnavailableError - Service unavailable.
type MSTeamsCreateOrUpdateMsteamsConfigurationServiceUnavailableError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &MSTeamsCreateOrUpdateMsteamsConfigurationServiceUnavailableError{}

func (e *MSTeamsCreateOrUpdateMsteamsConfigurationServiceUnavailableError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// MSTeamsCreateOrUpdateMsteamsConfigurationBadGatewayError - Server error
type MSTeamsCreateOrUpdateMsteamsConfigurationBadGatewayError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &MSTeamsCreateOrUpdateMsteamsConfigurationBadGatewayError{}

func (e *MSTeamsCreateOrUpdateMsteamsConfigurationBadGatewayError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// MSTeamsCreateOrUpdateMsteamsConfigurationInternalServerError - Server error
type MSTeamsCreateOrUpdateMsteamsConfigurationInternalServerError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &MSTeamsCreateOrUpdateMsteamsConfigurationInternalServerError{}

func (e *MSTeamsCreateOrUpdateMsteamsConfigurationInternalServerError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// MSTeamsCreateOrUpdateMsteamsConfigurationUnprocessableEntityError - Client error
type MSTeamsCreateOrUpdateMsteamsConfigurationUnprocessableEntityError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &MSTeamsCreateOrUpdateMsteamsConfigurationUnprocessableEntityError{}

func (e *MSTeamsCreateOrUpdateMsteamsConfigurationUnprocessableEntityError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// MSTeamsCreateOrUpdateMsteamsConfigurationConflictError - The request conflicts with the current state of the server.
type MSTeamsCreateOrUpdateMsteamsConfigurationConflictError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &MSTeamsCreateOrUpdateMsteamsConfigurationConflictError{}

func (e *MSTeamsCreateOrUpdateMsteamsConfigurationConflictError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// MSTeamsCreateOrUpdateMsteamsConfigurationNotFoundError - The server cannot find the requested resource.
type MSTeamsCreateOrUpdateMsteamsConfigurationNotFoundError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &MSTeamsCreateOrUpdateMsteamsConfigurationNotFoundError{}

func (e *MSTeamsCreateOrUpdateMsteamsConfigurationNotFoundError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// MSTeamsCreateOrUpdateMsteamsConfigurationForbiddenError - Access is forbidden.
type MSTeamsCreateOrUpdateMsteamsConfigurationForbiddenError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &MSTeamsCreateOrUpdateMsteamsConfigurationForbiddenError{}

func (e *MSTeamsCreateOrUpdateMsteamsConfigurationForbiddenError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// MSTeamsCreateOrUpdateMsteamsConfigurationPaymentRequiredError - Client error
type MSTeamsCreateOrUpdateMsteamsConfigurationPaymentRequiredError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &MSTeamsCreateOrUpdateMsteamsConfigurationPaymentRequiredError{}

func (e *MSTeamsCreateOrUpdateMsteamsConfigurationPaymentRequiredError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// MSTeamsCreateOrUpdateMsteamsConfigurationUnauthorizedError - Access is unauthorized.
type MSTeamsCreateOrUpdateMsteamsConfigurationUnauthorizedError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &MSTeamsCreateOrUpdateMsteamsConfigurationUnauthorizedError{}

func (e *MSTeamsCreateOrUpdateMsteamsConfigurationUnauthorizedError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// MSTeamsCreateOrUpdateMsteamsConfigurationBadRequestError - The server could not understand the request due to invalid syntax.
type MSTeamsCreateOrUpdateMsteamsConfigurationBadRequestError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &MSTeamsCreateOrUpdateMsteamsConfigurationBadRequestError{}

func (e *MSTeamsCreateOrUpdateMsteamsConfigurationBadRequestError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}
