// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package apierrors

import (
	"encoding/json"
	"github.com/SquadcastHub/squadcast-sdk-go/squadcastv1/models/components"
)

// CommunicationCardsGetAllCommunicationCardGatewayTimeoutError - Server error
type CommunicationCardsGetAllCommunicationCardGatewayTimeoutError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &CommunicationCardsGetAllCommunicationCardGatewayTimeoutError{}

func (e *CommunicationCardsGetAllCommunicationCardGatewayTimeoutError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// CommunicationCardsGetAllCommunicationCardServiceUnavailableError - Service unavailable.
type CommunicationCardsGetAllCommunicationCardServiceUnavailableError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &CommunicationCardsGetAllCommunicationCardServiceUnavailableError{}

func (e *CommunicationCardsGetAllCommunicationCardServiceUnavailableError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// CommunicationCardsGetAllCommunicationCardBadGatewayError - Server error
type CommunicationCardsGetAllCommunicationCardBadGatewayError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &CommunicationCardsGetAllCommunicationCardBadGatewayError{}

func (e *CommunicationCardsGetAllCommunicationCardBadGatewayError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// CommunicationCardsGetAllCommunicationCardInternalServerError - Server error
type CommunicationCardsGetAllCommunicationCardInternalServerError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &CommunicationCardsGetAllCommunicationCardInternalServerError{}

func (e *CommunicationCardsGetAllCommunicationCardInternalServerError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// CommunicationCardsGetAllCommunicationCardUnprocessableEntityError - Client error
type CommunicationCardsGetAllCommunicationCardUnprocessableEntityError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &CommunicationCardsGetAllCommunicationCardUnprocessableEntityError{}

func (e *CommunicationCardsGetAllCommunicationCardUnprocessableEntityError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// CommunicationCardsGetAllCommunicationCardConflictError - The request conflicts with the current state of the server.
type CommunicationCardsGetAllCommunicationCardConflictError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &CommunicationCardsGetAllCommunicationCardConflictError{}

func (e *CommunicationCardsGetAllCommunicationCardConflictError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// CommunicationCardsGetAllCommunicationCardNotFoundError - The server cannot find the requested resource.
type CommunicationCardsGetAllCommunicationCardNotFoundError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &CommunicationCardsGetAllCommunicationCardNotFoundError{}

func (e *CommunicationCardsGetAllCommunicationCardNotFoundError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// CommunicationCardsGetAllCommunicationCardForbiddenError - Access is forbidden.
type CommunicationCardsGetAllCommunicationCardForbiddenError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &CommunicationCardsGetAllCommunicationCardForbiddenError{}

func (e *CommunicationCardsGetAllCommunicationCardForbiddenError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// CommunicationCardsGetAllCommunicationCardPaymentRequiredError - Client error
type CommunicationCardsGetAllCommunicationCardPaymentRequiredError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &CommunicationCardsGetAllCommunicationCardPaymentRequiredError{}

func (e *CommunicationCardsGetAllCommunicationCardPaymentRequiredError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// CommunicationCardsGetAllCommunicationCardUnauthorizedError - Access is unauthorized.
type CommunicationCardsGetAllCommunicationCardUnauthorizedError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &CommunicationCardsGetAllCommunicationCardUnauthorizedError{}

func (e *CommunicationCardsGetAllCommunicationCardUnauthorizedError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// CommunicationCardsGetAllCommunicationCardBadRequestError - The server could not understand the request due to invalid syntax.
type CommunicationCardsGetAllCommunicationCardBadRequestError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &CommunicationCardsGetAllCommunicationCardBadRequestError{}

func (e *CommunicationCardsGetAllCommunicationCardBadRequestError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}
