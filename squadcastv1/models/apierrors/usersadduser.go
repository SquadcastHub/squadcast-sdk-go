// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package apierrors

import (
	"encoding/json"
	"github.com/SquadcastHub/squadcast-sdk-go/squadcastv1/models/components"
)

// UsersAddUserGatewayTimeoutError - Server error
type UsersAddUserGatewayTimeoutError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &UsersAddUserGatewayTimeoutError{}

func (e *UsersAddUserGatewayTimeoutError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// UsersAddUserServiceUnavailableError - Service unavailable.
type UsersAddUserServiceUnavailableError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &UsersAddUserServiceUnavailableError{}

func (e *UsersAddUserServiceUnavailableError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// UsersAddUserBadGatewayError - Server error
type UsersAddUserBadGatewayError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &UsersAddUserBadGatewayError{}

func (e *UsersAddUserBadGatewayError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// UsersAddUserInternalServerError - Server error
type UsersAddUserInternalServerError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &UsersAddUserInternalServerError{}

func (e *UsersAddUserInternalServerError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// UsersAddUserUnprocessableEntityError - Client error
type UsersAddUserUnprocessableEntityError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &UsersAddUserUnprocessableEntityError{}

func (e *UsersAddUserUnprocessableEntityError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// UsersAddUserConflictError - The request conflicts with the current state of the server.
type UsersAddUserConflictError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &UsersAddUserConflictError{}

func (e *UsersAddUserConflictError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// UsersAddUserNotFoundError - The server cannot find the requested resource.
type UsersAddUserNotFoundError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &UsersAddUserNotFoundError{}

func (e *UsersAddUserNotFoundError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// UsersAddUserForbiddenError - Access is forbidden.
type UsersAddUserForbiddenError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &UsersAddUserForbiddenError{}

func (e *UsersAddUserForbiddenError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// UsersAddUserPaymentRequiredError - Client error
type UsersAddUserPaymentRequiredError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &UsersAddUserPaymentRequiredError{}

func (e *UsersAddUserPaymentRequiredError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// UsersAddUserUnauthorizedError - Access is unauthorized.
type UsersAddUserUnauthorizedError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &UsersAddUserUnauthorizedError{}

func (e *UsersAddUserUnauthorizedError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// UsersAddUserBadRequestError - The server could not understand the request due to invalid syntax.
type UsersAddUserBadRequestError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &UsersAddUserBadRequestError{}

func (e *UsersAddUserBadRequestError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}
