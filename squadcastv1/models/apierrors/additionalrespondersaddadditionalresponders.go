// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package apierrors

import (
	"encoding/json"
	"github.com/SquadcastHub/squadcast-sdk-go/squadcastv1/models/components"
)

// AdditionalRespondersAddAdditionalRespondersGatewayTimeoutError - Server error
type AdditionalRespondersAddAdditionalRespondersGatewayTimeoutError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &AdditionalRespondersAddAdditionalRespondersGatewayTimeoutError{}

func (e *AdditionalRespondersAddAdditionalRespondersGatewayTimeoutError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// AdditionalRespondersAddAdditionalRespondersServiceUnavailableError - Service unavailable.
type AdditionalRespondersAddAdditionalRespondersServiceUnavailableError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &AdditionalRespondersAddAdditionalRespondersServiceUnavailableError{}

func (e *AdditionalRespondersAddAdditionalRespondersServiceUnavailableError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// AdditionalRespondersAddAdditionalRespondersBadGatewayError - Server error
type AdditionalRespondersAddAdditionalRespondersBadGatewayError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &AdditionalRespondersAddAdditionalRespondersBadGatewayError{}

func (e *AdditionalRespondersAddAdditionalRespondersBadGatewayError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// AdditionalRespondersAddAdditionalRespondersInternalServerError - Server error
type AdditionalRespondersAddAdditionalRespondersInternalServerError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &AdditionalRespondersAddAdditionalRespondersInternalServerError{}

func (e *AdditionalRespondersAddAdditionalRespondersInternalServerError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// AdditionalRespondersAddAdditionalRespondersUnprocessableEntityError - Client error
type AdditionalRespondersAddAdditionalRespondersUnprocessableEntityError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &AdditionalRespondersAddAdditionalRespondersUnprocessableEntityError{}

func (e *AdditionalRespondersAddAdditionalRespondersUnprocessableEntityError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// AdditionalRespondersAddAdditionalRespondersConflictError - The request conflicts with the current state of the server.
type AdditionalRespondersAddAdditionalRespondersConflictError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &AdditionalRespondersAddAdditionalRespondersConflictError{}

func (e *AdditionalRespondersAddAdditionalRespondersConflictError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// AdditionalRespondersAddAdditionalRespondersNotFoundError - The server cannot find the requested resource.
type AdditionalRespondersAddAdditionalRespondersNotFoundError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &AdditionalRespondersAddAdditionalRespondersNotFoundError{}

func (e *AdditionalRespondersAddAdditionalRespondersNotFoundError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// AdditionalRespondersAddAdditionalRespondersForbiddenError - Access is forbidden.
type AdditionalRespondersAddAdditionalRespondersForbiddenError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &AdditionalRespondersAddAdditionalRespondersForbiddenError{}

func (e *AdditionalRespondersAddAdditionalRespondersForbiddenError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// AdditionalRespondersAddAdditionalRespondersPaymentRequiredError - Client error
type AdditionalRespondersAddAdditionalRespondersPaymentRequiredError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &AdditionalRespondersAddAdditionalRespondersPaymentRequiredError{}

func (e *AdditionalRespondersAddAdditionalRespondersPaymentRequiredError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// AdditionalRespondersAddAdditionalRespondersUnauthorizedError - Access is unauthorized.
type AdditionalRespondersAddAdditionalRespondersUnauthorizedError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &AdditionalRespondersAddAdditionalRespondersUnauthorizedError{}

func (e *AdditionalRespondersAddAdditionalRespondersUnauthorizedError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// AdditionalRespondersAddAdditionalRespondersBadRequestError - The server could not understand the request due to invalid syntax.
type AdditionalRespondersAddAdditionalRespondersBadRequestError struct {
	// Represents a single response containing data of type T.
	Meta     components.CommonV3ErrorMeta `json:"meta"`
	HTTPMeta components.HTTPMetadata      `json:"-"`
}

var _ error = &AdditionalRespondersAddAdditionalRespondersBadRequestError{}

func (e *AdditionalRespondersAddAdditionalRespondersBadRequestError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}
