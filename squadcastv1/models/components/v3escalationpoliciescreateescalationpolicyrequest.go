// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

type V3EscalationPoliciesCreateEscalationPolicyRequest struct {
	// The ID of the team that owns this escalation policy.
	OwnerID string `json:"owner_id"`
	// The name of the escalation policy.
	Name string `json:"name"`
	// A description of the escalation policy.
	Description string `json:"description"`
	// The number of times the entire policy should be repeated.
	Repetition int `json:"repetition"`
	// The time in minutes after which the policy should be repeated.
	RepeatAfter int `json:"repeat_after"`
	// The rules that define the escalation steps.
	Rules []V3EscalationPoliciesEscalationPolicyRule `json:"rules"`
	// Enable or disable incident reminders.
	EnableIncidentReminders bool `json:"enable_incident_reminders"`
	// The rules for incident reminders.
	IncidentReminderRules []V3EscalationPoliciesIncidentReminderRule `json:"incident_reminder_rules"`
	// Enable or disable automatic incident re-triggering.
	EnableIncidentRetrigger bool `json:"enable_incident_retrigger"`
	// The time in hours after which an incident should be re-triggered.
	RetriggerAfter int `json:"retrigger_after"`
	// The owner of the entity.
	EntityOwner *CommonV3EntityOwner `json:"entity_owner,omitempty"`
}

func (o *V3EscalationPoliciesCreateEscalationPolicyRequest) GetOwnerID() string {
	if o == nil {
		return ""
	}
	return o.OwnerID
}

func (o *V3EscalationPoliciesCreateEscalationPolicyRequest) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *V3EscalationPoliciesCreateEscalationPolicyRequest) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *V3EscalationPoliciesCreateEscalationPolicyRequest) GetRepetition() int {
	if o == nil {
		return 0
	}
	return o.Repetition
}

func (o *V3EscalationPoliciesCreateEscalationPolicyRequest) GetRepeatAfter() int {
	if o == nil {
		return 0
	}
	return o.RepeatAfter
}

func (o *V3EscalationPoliciesCreateEscalationPolicyRequest) GetRules() []V3EscalationPoliciesEscalationPolicyRule {
	if o == nil {
		return []V3EscalationPoliciesEscalationPolicyRule{}
	}
	return o.Rules
}

func (o *V3EscalationPoliciesCreateEscalationPolicyRequest) GetEnableIncidentReminders() bool {
	if o == nil {
		return false
	}
	return o.EnableIncidentReminders
}

func (o *V3EscalationPoliciesCreateEscalationPolicyRequest) GetIncidentReminderRules() []V3EscalationPoliciesIncidentReminderRule {
	if o == nil {
		return []V3EscalationPoliciesIncidentReminderRule{}
	}
	return o.IncidentReminderRules
}

func (o *V3EscalationPoliciesCreateEscalationPolicyRequest) GetEnableIncidentRetrigger() bool {
	if o == nil {
		return false
	}
	return o.EnableIncidentRetrigger
}

func (o *V3EscalationPoliciesCreateEscalationPolicyRequest) GetRetriggerAfter() int {
	if o == nil {
		return 0
	}
	return o.RetriggerAfter
}

func (o *V3EscalationPoliciesCreateEscalationPolicyRequest) GetEntityOwner() *CommonV3EntityOwner {
	if o == nil {
		return nil
	}
	return o.EntityOwner
}
