// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type V3WorkflowsCreateWorkflowRequestOwnerType string

const (
	V3WorkflowsCreateWorkflowRequestOwnerTypeUser  V3WorkflowsCreateWorkflowRequestOwnerType = "user"
	V3WorkflowsCreateWorkflowRequestOwnerTypeSquad V3WorkflowsCreateWorkflowRequestOwnerType = "squad"
)

func (e V3WorkflowsCreateWorkflowRequestOwnerType) ToPointer() *V3WorkflowsCreateWorkflowRequestOwnerType {
	return &e
}
func (e *V3WorkflowsCreateWorkflowRequestOwnerType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "user":
		fallthrough
	case "squad":
		*e = V3WorkflowsCreateWorkflowRequestOwnerType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for V3WorkflowsCreateWorkflowRequestOwnerType: %v", v)
	}
}

type V3WorkflowsCreateWorkflowRequest struct {
	Title       string                                     `json:"title"`
	Description *string                                    `json:"description,omitempty"`
	OwnerID     string                                     `json:"owner_id"`
	OwnerType   *V3WorkflowsCreateWorkflowRequestOwnerType `json:"owner_type,omitempty"`
	EntityOwner *V3WorkflowsEntityOwner                    `json:"entity_owner,omitempty"`
	Tags        []V3WorkflowsTag                           `json:"tags,omitempty"`
	Trigger     V3WorkflowsWorkflowTrigger                 `json:"trigger"`
	Filters     V3WorkflowsCreateWorkflowFilter            `json:"filters"`
	Actions     []V3WorkflowsActionRequest                 `json:"actions"`
	Enabled     *bool                                      `json:"enabled,omitempty"`
}

func (v *V3WorkflowsCreateWorkflowRequest) GetTitle() string {
	if v == nil {
		return ""
	}
	return v.Title
}

func (v *V3WorkflowsCreateWorkflowRequest) GetDescription() *string {
	if v == nil {
		return nil
	}
	return v.Description
}

func (v *V3WorkflowsCreateWorkflowRequest) GetOwnerID() string {
	if v == nil {
		return ""
	}
	return v.OwnerID
}

func (v *V3WorkflowsCreateWorkflowRequest) GetOwnerType() *V3WorkflowsCreateWorkflowRequestOwnerType {
	if v == nil {
		return nil
	}
	return v.OwnerType
}

func (v *V3WorkflowsCreateWorkflowRequest) GetEntityOwner() *V3WorkflowsEntityOwner {
	if v == nil {
		return nil
	}
	return v.EntityOwner
}

func (v *V3WorkflowsCreateWorkflowRequest) GetTags() []V3WorkflowsTag {
	if v == nil {
		return nil
	}
	return v.Tags
}

func (v *V3WorkflowsCreateWorkflowRequest) GetTrigger() V3WorkflowsWorkflowTrigger {
	if v == nil {
		return V3WorkflowsWorkflowTrigger("")
	}
	return v.Trigger
}

func (v *V3WorkflowsCreateWorkflowRequest) GetFilters() V3WorkflowsCreateWorkflowFilter {
	if v == nil {
		return V3WorkflowsCreateWorkflowFilter{}
	}
	return v.Filters
}

func (v *V3WorkflowsCreateWorkflowRequest) GetActions() []V3WorkflowsActionRequest {
	if v == nil {
		return []V3WorkflowsActionRequest{}
	}
	return v.Actions
}

func (v *V3WorkflowsCreateWorkflowRequest) GetEnabled() *bool {
	if v == nil {
		return nil
	}
	return v.Enabled
}
