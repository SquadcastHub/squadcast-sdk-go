// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/SquadcastHub/squadcast-sdk-go/internal/utils"
)

type V3ExtensionsMSTeamsEventClassEnum string

const (
	V3ExtensionsMSTeamsEventClassEnumIncidentTriggered                   V3ExtensionsMSTeamsEventClassEnum = "incident_triggered"
	V3ExtensionsMSTeamsEventClassEnumIncidentRetriggered                 V3ExtensionsMSTeamsEventClassEnum = "incident_retriggered"
	V3ExtensionsMSTeamsEventClassEnumIncidentAcknowledged                V3ExtensionsMSTeamsEventClassEnum = "incident_acknowledged"
	V3ExtensionsMSTeamsEventClassEnumIncidentResolved                    V3ExtensionsMSTeamsEventClassEnum = "incident_resolved"
	V3ExtensionsMSTeamsEventClassEnumIncidentReassigned                  V3ExtensionsMSTeamsEventClassEnum = "incident_reassigned"
	V3ExtensionsMSTeamsEventClassEnumIncidentNotesAdded                  V3ExtensionsMSTeamsEventClassEnum = "incident_notes_added"
	V3ExtensionsMSTeamsEventClassEnumIncidentPostmortemStarted           V3ExtensionsMSTeamsEventClassEnum = "incident_postmortem_started"
	V3ExtensionsMSTeamsEventClassEnumIncidentPriorityUpdated             V3ExtensionsMSTeamsEventClassEnum = "incident_priority_updated"
	V3ExtensionsMSTeamsEventClassEnumIncidentSnoozed                     V3ExtensionsMSTeamsEventClassEnum = "incident_snoozed"
	V3ExtensionsMSTeamsEventClassEnumIncidentUnsnoozed                   V3ExtensionsMSTeamsEventClassEnum = "incident_unsnoozed"
	V3ExtensionsMSTeamsEventClassEnumIncidentDelayedNotificationsResumed V3ExtensionsMSTeamsEventClassEnum = "incident_delayed_notifications_resumed"
)

func (e V3ExtensionsMSTeamsEventClassEnum) ToPointer() *V3ExtensionsMSTeamsEventClassEnum {
	return &e
}
func (e *V3ExtensionsMSTeamsEventClassEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "incident_triggered":
		fallthrough
	case "incident_retriggered":
		fallthrough
	case "incident_acknowledged":
		fallthrough
	case "incident_resolved":
		fallthrough
	case "incident_reassigned":
		fallthrough
	case "incident_notes_added":
		fallthrough
	case "incident_postmortem_started":
		fallthrough
	case "incident_priority_updated":
		fallthrough
	case "incident_snoozed":
		fallthrough
	case "incident_unsnoozed":
		fallthrough
	case "incident_delayed_notifications_resumed":
		*e = V3ExtensionsMSTeamsEventClassEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for V3ExtensionsMSTeamsEventClassEnum: %v", v)
	}
}

type V3ExtensionsMSTeamsEventClassType string

const (
	V3ExtensionsMSTeamsEventClassTypeStr                               V3ExtensionsMSTeamsEventClassType = "str"
	V3ExtensionsMSTeamsEventClassTypeV3ExtensionsMSTeamsEventClassEnum V3ExtensionsMSTeamsEventClassType = "V3.Extensions.MSTeams.EventClass_enum"
)

// V3ExtensionsMSTeamsEventClass - Represents the specific type of an incident-related event.
type V3ExtensionsMSTeamsEventClass struct {
	Str                               *string                            `queryParam:"inline" name:"V3_Extensions_MSTeams_EventClass"`
	V3ExtensionsMSTeamsEventClassEnum *V3ExtensionsMSTeamsEventClassEnum `queryParam:"inline" name:"V3_Extensions_MSTeams_EventClass"`

	Type V3ExtensionsMSTeamsEventClassType
}

func CreateV3ExtensionsMSTeamsEventClassStr(str string) V3ExtensionsMSTeamsEventClass {
	typ := V3ExtensionsMSTeamsEventClassTypeStr

	return V3ExtensionsMSTeamsEventClass{
		Str:  &str,
		Type: typ,
	}
}

func CreateV3ExtensionsMSTeamsEventClassV3ExtensionsMSTeamsEventClassEnum(v3ExtensionsMSTeamsEventClassEnum V3ExtensionsMSTeamsEventClassEnum) V3ExtensionsMSTeamsEventClass {
	typ := V3ExtensionsMSTeamsEventClassTypeV3ExtensionsMSTeamsEventClassEnum

	return V3ExtensionsMSTeamsEventClass{
		V3ExtensionsMSTeamsEventClassEnum: &v3ExtensionsMSTeamsEventClassEnum,
		Type:                              typ,
	}
}

func (u *V3ExtensionsMSTeamsEventClass) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = V3ExtensionsMSTeamsEventClassTypeStr
		return nil
	}

	var v3ExtensionsMSTeamsEventClassEnum V3ExtensionsMSTeamsEventClassEnum = V3ExtensionsMSTeamsEventClassEnum("")
	if err := utils.UnmarshalJSON(data, &v3ExtensionsMSTeamsEventClassEnum, "", true, nil); err == nil {
		u.V3ExtensionsMSTeamsEventClassEnum = &v3ExtensionsMSTeamsEventClassEnum
		u.Type = V3ExtensionsMSTeamsEventClassTypeV3ExtensionsMSTeamsEventClassEnum
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for V3ExtensionsMSTeamsEventClass", string(data))
}

func (u V3ExtensionsMSTeamsEventClass) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.V3ExtensionsMSTeamsEventClassEnum != nil {
		return utils.MarshalJSON(u.V3ExtensionsMSTeamsEventClassEnum, "", true)
	}

	return nil, errors.New("could not marshal union type V3ExtensionsMSTeamsEventClass: all fields are null")
}
