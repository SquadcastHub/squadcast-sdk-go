// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/SquadcastHub/squadcast-sdk-go/internal/utils"
)

type V3WorkflowsSqMakeHTTPCallUpdateName string

const (
	V3WorkflowsSqMakeHTTPCallUpdateNameSqMakeHTTPCall V3WorkflowsSqMakeHTTPCallUpdateName = "sq_make_http_call"
)

func (e V3WorkflowsSqMakeHTTPCallUpdateName) ToPointer() *V3WorkflowsSqMakeHTTPCallUpdateName {
	return &e
}
func (e *V3WorkflowsSqMakeHTTPCallUpdateName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "sq_make_http_call":
		*e = V3WorkflowsSqMakeHTTPCallUpdateName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for V3WorkflowsSqMakeHTTPCallUpdateName: %v", v)
	}
}

type V3WorkflowsSqMakeHTTPCallUpdateMethod string

const (
	V3WorkflowsSqMakeHTTPCallUpdateMethodGet    V3WorkflowsSqMakeHTTPCallUpdateMethod = "GET"
	V3WorkflowsSqMakeHTTPCallUpdateMethodPost   V3WorkflowsSqMakeHTTPCallUpdateMethod = "POST"
	V3WorkflowsSqMakeHTTPCallUpdateMethodPut    V3WorkflowsSqMakeHTTPCallUpdateMethod = "PUT"
	V3WorkflowsSqMakeHTTPCallUpdateMethodPatch  V3WorkflowsSqMakeHTTPCallUpdateMethod = "PATCH"
	V3WorkflowsSqMakeHTTPCallUpdateMethodDelete V3WorkflowsSqMakeHTTPCallUpdateMethod = "DELETE"
)

func (e V3WorkflowsSqMakeHTTPCallUpdateMethod) ToPointer() *V3WorkflowsSqMakeHTTPCallUpdateMethod {
	return &e
}
func (e *V3WorkflowsSqMakeHTTPCallUpdateMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "GET":
		fallthrough
	case "POST":
		fallthrough
	case "PUT":
		fallthrough
	case "PATCH":
		fallthrough
	case "DELETE":
		*e = V3WorkflowsSqMakeHTTPCallUpdateMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for V3WorkflowsSqMakeHTTPCallUpdateMethod: %v", v)
	}
}

type V3WorkflowsSqMakeHTTPCallUpdateHeader struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

func (v V3WorkflowsSqMakeHTTPCallUpdateHeader) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *V3WorkflowsSqMakeHTTPCallUpdateHeader) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, []string{"key", "value"}); err != nil {
		return err
	}
	return nil
}

func (o *V3WorkflowsSqMakeHTTPCallUpdateHeader) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *V3WorkflowsSqMakeHTTPCallUpdateHeader) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type V3WorkflowsSqMakeHTTPCallUpdateData struct {
	Method  *V3WorkflowsSqMakeHTTPCallUpdateMethod  `json:"method,omitempty"`
	URL     *string                                 `json:"url,omitempty"`
	Headers []V3WorkflowsSqMakeHTTPCallUpdateHeader `json:"headers,omitempty"`
	Body    *string                                 `json:"body,omitempty"`
}

func (v V3WorkflowsSqMakeHTTPCallUpdateData) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *V3WorkflowsSqMakeHTTPCallUpdateData) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *V3WorkflowsSqMakeHTTPCallUpdateData) GetMethod() *V3WorkflowsSqMakeHTTPCallUpdateMethod {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *V3WorkflowsSqMakeHTTPCallUpdateData) GetURL() *string {
	if o == nil {
		return nil
	}
	return o.URL
}

func (o *V3WorkflowsSqMakeHTTPCallUpdateData) GetHeaders() []V3WorkflowsSqMakeHTTPCallUpdateHeader {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *V3WorkflowsSqMakeHTTPCallUpdateData) GetBody() *string {
	if o == nil {
		return nil
	}
	return o.Body
}

type V3WorkflowsSqMakeHTTPCallUpdate struct {
	Name V3WorkflowsSqMakeHTTPCallUpdateName  `json:"name"`
	Data *V3WorkflowsSqMakeHTTPCallUpdateData `json:"data,omitempty"`
}

func (v V3WorkflowsSqMakeHTTPCallUpdate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *V3WorkflowsSqMakeHTTPCallUpdate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, []string{"name"}); err != nil {
		return err
	}
	return nil
}

func (o *V3WorkflowsSqMakeHTTPCallUpdate) GetName() V3WorkflowsSqMakeHTTPCallUpdateName {
	if o == nil {
		return V3WorkflowsSqMakeHTTPCallUpdateName("")
	}
	return o.Name
}

func (o *V3WorkflowsSqMakeHTTPCallUpdate) GetData() *V3WorkflowsSqMakeHTTPCallUpdateData {
	if o == nil {
		return nil
	}
	return o.Data
}
