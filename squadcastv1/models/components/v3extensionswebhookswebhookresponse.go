// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

type V3ExtensionsWebhooksWebhookResponseHeader struct {
}

type V3ExtensionsWebhooksWebhookResponse struct {
	// Name of the webhook
	Name string `json:"name"`
	// Description of the webhook
	Description *string `json:"description,omitempty"`
	// A list of triggers for this webhook
	Triggers []V3ExtensionsWebhooksWebhookTrigger `json:"triggers"`
	// A list of URLs to which the webhook payload will be sent
	Urls []V3ExtensionsWebhooksWebhookURL `json:"urls"`
	// Headers to be sent with the webhook
	Header *V3ExtensionsWebhooksWebhookResponseHeader `json:"header,omitempty"`
	// Filters to apply to the webhook
	Filters *V3ExtensionsWebhooksWebhookFilter `json:"filters,omitempty"`
	// Maximum number of retries for the webhook
	MaxRetry *int64 `json:"max_retry,omitempty"`
	// List of team IDs to which this webhook is applicable
	Teams []string `json:"teams,omitempty"`
	// Set to true if the webhook is configured for all teams
	IsAllTeamsConfigured *bool `json:"is_all_teams_configured,omitempty"`
	// Slug of the custom payload template
	CustomPayloadTemplateSlug *string `json:"custom_payload_template_slug,omitempty"`
	// Language for the webhook payload
	Language *string `json:"language,omitempty"`
	// List of email IDs for notification
	MailIds []string `json:"mail_ids,omitempty"`
	// Type of trigger
	TriggerType string `json:"trigger_type"`
	// Custom payload for the webhook
	CustomPayload *string `json:"custom_payload,omitempty"`
	// Type of payload
	PayloadType    *string `json:"payload_type,omitempty"`
	ID             string  `json:"id"`
	CreatedAt      string  `json:"created_at"`
	UpdatedAt      string  `json:"updated_at"`
	OrganizationID *string `json:"organization_id,omitempty"`
	AuthorID       string  `json:"author_id"`
	Slug           string  `json:"slug"`
	Version        *string `json:"version,omitempty"`
}

func (o *V3ExtensionsWebhooksWebhookResponse) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *V3ExtensionsWebhooksWebhookResponse) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *V3ExtensionsWebhooksWebhookResponse) GetTriggers() []V3ExtensionsWebhooksWebhookTrigger {
	if o == nil {
		return []V3ExtensionsWebhooksWebhookTrigger{}
	}
	return o.Triggers
}

func (o *V3ExtensionsWebhooksWebhookResponse) GetUrls() []V3ExtensionsWebhooksWebhookURL {
	if o == nil {
		return []V3ExtensionsWebhooksWebhookURL{}
	}
	return o.Urls
}

func (o *V3ExtensionsWebhooksWebhookResponse) GetHeader() *V3ExtensionsWebhooksWebhookResponseHeader {
	if o == nil {
		return nil
	}
	return o.Header
}

func (o *V3ExtensionsWebhooksWebhookResponse) GetFilters() *V3ExtensionsWebhooksWebhookFilter {
	if o == nil {
		return nil
	}
	return o.Filters
}

func (o *V3ExtensionsWebhooksWebhookResponse) GetMaxRetry() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxRetry
}

func (o *V3ExtensionsWebhooksWebhookResponse) GetTeams() []string {
	if o == nil {
		return nil
	}
	return o.Teams
}

func (o *V3ExtensionsWebhooksWebhookResponse) GetIsAllTeamsConfigured() *bool {
	if o == nil {
		return nil
	}
	return o.IsAllTeamsConfigured
}

func (o *V3ExtensionsWebhooksWebhookResponse) GetCustomPayloadTemplateSlug() *string {
	if o == nil {
		return nil
	}
	return o.CustomPayloadTemplateSlug
}

func (o *V3ExtensionsWebhooksWebhookResponse) GetLanguage() *string {
	if o == nil {
		return nil
	}
	return o.Language
}

func (o *V3ExtensionsWebhooksWebhookResponse) GetMailIds() []string {
	if o == nil {
		return nil
	}
	return o.MailIds
}

func (o *V3ExtensionsWebhooksWebhookResponse) GetTriggerType() string {
	if o == nil {
		return ""
	}
	return o.TriggerType
}

func (o *V3ExtensionsWebhooksWebhookResponse) GetCustomPayload() *string {
	if o == nil {
		return nil
	}
	return o.CustomPayload
}

func (o *V3ExtensionsWebhooksWebhookResponse) GetPayloadType() *string {
	if o == nil {
		return nil
	}
	return o.PayloadType
}

func (o *V3ExtensionsWebhooksWebhookResponse) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *V3ExtensionsWebhooksWebhookResponse) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *V3ExtensionsWebhooksWebhookResponse) GetUpdatedAt() string {
	if o == nil {
		return ""
	}
	return o.UpdatedAt
}

func (o *V3ExtensionsWebhooksWebhookResponse) GetOrganizationID() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationID
}

func (o *V3ExtensionsWebhooksWebhookResponse) GetAuthorID() string {
	if o == nil {
		return ""
	}
	return o.AuthorID
}

func (o *V3ExtensionsWebhooksWebhookResponse) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *V3ExtensionsWebhooksWebhookResponse) GetVersion() *string {
	if o == nil {
		return nil
	}
	return o.Version
}
