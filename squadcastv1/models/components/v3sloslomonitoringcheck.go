// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/SquadcastHub/squadcast-sdk-go/squadcastv1/internal/utils"
	"time"
)

type V3SLOSLOMonitoringCheck struct {
	ID        *int64     `json:"id,omitempty"`
	SloID     *int64     `json:"slo_id,omitempty"`
	Name      string     `json:"name"`
	Threshold *int64     `json:"threshold,omitempty"`
	OwnerType string     `json:"owner_type"`
	OwnerID   string     `json:"owner_id"`
	OrgID     *string    `json:"org_id,omitempty"`
	IsChecked *bool      `json:"is_checked,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
}

func (v V3SLOSLOMonitoringCheck) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *V3SLOSLOMonitoringCheck) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, []string{"name", "owner_type", "owner_id"}); err != nil {
		return err
	}
	return nil
}

func (v *V3SLOSLOMonitoringCheck) GetID() *int64 {
	if v == nil {
		return nil
	}
	return v.ID
}

func (v *V3SLOSLOMonitoringCheck) GetSloID() *int64 {
	if v == nil {
		return nil
	}
	return v.SloID
}

func (v *V3SLOSLOMonitoringCheck) GetName() string {
	if v == nil {
		return ""
	}
	return v.Name
}

func (v *V3SLOSLOMonitoringCheck) GetThreshold() *int64 {
	if v == nil {
		return nil
	}
	return v.Threshold
}

func (v *V3SLOSLOMonitoringCheck) GetOwnerType() string {
	if v == nil {
		return ""
	}
	return v.OwnerType
}

func (v *V3SLOSLOMonitoringCheck) GetOwnerID() string {
	if v == nil {
		return ""
	}
	return v.OwnerID
}

func (v *V3SLOSLOMonitoringCheck) GetOrgID() *string {
	if v == nil {
		return nil
	}
	return v.OrgID
}

func (v *V3SLOSLOMonitoringCheck) GetIsChecked() *bool {
	if v == nil {
		return nil
	}
	return v.IsChecked
}

func (v *V3SLOSLOMonitoringCheck) GetCreatedAt() *time.Time {
	if v == nil {
		return nil
	}
	return v.CreatedAt
}

func (v *V3SLOSLOMonitoringCheck) GetUpdatedAt() *time.Time {
	if v == nil {
		return nil
	}
	return v.UpdatedAt
}

func (v *V3SLOSLOMonitoringCheck) GetDeletedAt() *time.Time {
	if v == nil {
		return nil
	}
	return v.DeletedAt
}
