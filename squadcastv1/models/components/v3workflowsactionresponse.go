// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/SquadcastHub/squadcast-sdk-go/squadcastv1/internal/utils"
)

type V3WorkflowsActionResponseName string

const (
	V3WorkflowsActionResponseNameSqAttachRunbooks V3WorkflowsActionResponseName = "sq_attach_runbooks"
)

func (e V3WorkflowsActionResponseName) ToPointer() *V3WorkflowsActionResponseName {
	return &e
}
func (e *V3WorkflowsActionResponseName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "sq_attach_runbooks":
		*e = V3WorkflowsActionResponseName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for V3WorkflowsActionResponseName: %v", v)
	}
}

type V3WorkflowsActionResponseData struct {
	Runbooks []V3WorkflowsRunbookResponse `json:"runbooks"`
}

func (v V3WorkflowsActionResponseData) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *V3WorkflowsActionResponseData) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, []string{"runbooks"}); err != nil {
		return err
	}
	return nil
}

func (v *V3WorkflowsActionResponseData) GetRunbooks() []V3WorkflowsRunbookResponse {
	if v == nil {
		return []V3WorkflowsRunbookResponse{}
	}
	return v.Runbooks
}

type V3WorkflowsActionResponseSqAttachRunbooks struct {
	Name V3WorkflowsActionResponseName `json:"name"`
	Data V3WorkflowsActionResponseData `json:"data"`
}

func (v V3WorkflowsActionResponseSqAttachRunbooks) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *V3WorkflowsActionResponseSqAttachRunbooks) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, []string{"name", "data"}); err != nil {
		return err
	}
	return nil
}

func (v *V3WorkflowsActionResponseSqAttachRunbooks) GetName() V3WorkflowsActionResponseName {
	if v == nil {
		return V3WorkflowsActionResponseName("")
	}
	return v.Name
}

func (v *V3WorkflowsActionResponseSqAttachRunbooks) GetData() V3WorkflowsActionResponseData {
	if v == nil {
		return V3WorkflowsActionResponseData{}
	}
	return v.Data
}

type V3WorkflowsActionResponseType string

const (
	V3WorkflowsActionResponseTypeV3WorkflowsActionResponseSqAttachRunbooks V3WorkflowsActionResponseType = "V3.Workflows.ActionResponse_SqAttachRunbooks"
	V3WorkflowsActionResponseTypeV3WorkflowsSqMarkIncidentSLOAffecting     V3WorkflowsActionResponseType = "V3.Workflows.SqMarkIncidentSLOAffecting"
	V3WorkflowsActionResponseTypeV3WorkflowsSqTriggerManualWebhook         V3WorkflowsActionResponseType = "V3.Workflows.SqTriggerManualWebhook"
	V3WorkflowsActionResponseTypeV3WorkflowsUpdateIncidentPriority         V3WorkflowsActionResponseType = "V3.Workflows.UpdateIncidentPriority"
	V3WorkflowsActionResponseTypeV3WorkflowsSqCreateStatusPageIssue        V3WorkflowsActionResponseType = "V3.Workflows.SqCreateStatusPageIssue"
	V3WorkflowsActionResponseTypeV3WorkflowsSqAddIncidentNote              V3WorkflowsActionResponseType = "V3.Workflows.SqAddIncidentNote"
	V3WorkflowsActionResponseTypeV3WorkflowsSlackArchiveChannel            V3WorkflowsActionResponseType = "V3.Workflows.SlackArchiveChannel"
	V3WorkflowsActionResponseTypeV3WorkflowsSqAddCommunicationChannel      V3WorkflowsActionResponseType = "V3.Workflows.SqAddCommunicationChannel"
	V3WorkflowsActionResponseTypeV3WorkflowsSlackMessageChannel            V3WorkflowsActionResponseType = "V3.Workflows.SlackMessageChannel"
	V3WorkflowsActionResponseTypeV3WorkflowsSlackMessageUser               V3WorkflowsActionResponseType = "V3.Workflows.SlackMessageUser"
	V3WorkflowsActionResponseTypeV3WorkflowsSqMakeHTTPCall                 V3WorkflowsActionResponseType = "V3.Workflows.SqMakeHTTPCall"
	V3WorkflowsActionResponseTypeV3WorkflowsSlackCreateIncidentChannel     V3WorkflowsActionResponseType = "V3.Workflows.SlackCreateIncidentChannel"
	V3WorkflowsActionResponseTypeV3WorkflowsJiraCreateTicket               V3WorkflowsActionResponseType = "V3.Workflows.JiraCreateTicket"
	V3WorkflowsActionResponseTypeV3WorkflowsMsTeamsMessageChannel          V3WorkflowsActionResponseType = "V3.Workflows.MsTeamsMessageChannel"
	V3WorkflowsActionResponseTypeV3WorkflowsMsTeamsMessageUser             V3WorkflowsActionResponseType = "V3.Workflows.MsTeamsMessageUser"
	V3WorkflowsActionResponseTypeV3WorkflowsSqSendEmail                    V3WorkflowsActionResponseType = "V3.Workflows.SqSendEmail"
	V3WorkflowsActionResponseTypeV3WorkflowsMsTeamsCreateMeetingLink       V3WorkflowsActionResponseType = "V3.Workflows.MsTeamsCreateMeetingLink"
	V3WorkflowsActionResponseTypeAny                                       V3WorkflowsActionResponseType = "any"
)

type V3WorkflowsActionResponse struct {
	V3WorkflowsActionResponseSqAttachRunbooks *V3WorkflowsActionResponseSqAttachRunbooks `queryParam:"inline,name=V3_Workflows_ActionResponse"`
	V3WorkflowsSqMarkIncidentSLOAffecting     *V3WorkflowsSqMarkIncidentSLOAffecting     `queryParam:"inline,name=V3_Workflows_ActionResponse"`
	V3WorkflowsSqTriggerManualWebhook         *V3WorkflowsSqTriggerManualWebhook         `queryParam:"inline,name=V3_Workflows_ActionResponse"`
	V3WorkflowsUpdateIncidentPriority         *V3WorkflowsUpdateIncidentPriority         `queryParam:"inline,name=V3_Workflows_ActionResponse"`
	V3WorkflowsSqCreateStatusPageIssue        *V3WorkflowsSqCreateStatusPageIssue        `queryParam:"inline,name=V3_Workflows_ActionResponse"`
	V3WorkflowsSqAddIncidentNote              *V3WorkflowsSqAddIncidentNote              `queryParam:"inline,name=V3_Workflows_ActionResponse"`
	V3WorkflowsSlackArchiveChannel            *V3WorkflowsSlackArchiveChannel            `queryParam:"inline,name=V3_Workflows_ActionResponse"`
	V3WorkflowsSqAddCommunicationChannel      *V3WorkflowsSqAddCommunicationChannel      `queryParam:"inline,name=V3_Workflows_ActionResponse"`
	V3WorkflowsSlackMessageChannel            *V3WorkflowsSlackMessageChannel            `queryParam:"inline,name=V3_Workflows_ActionResponse"`
	V3WorkflowsSlackMessageUser               *V3WorkflowsSlackMessageUser               `queryParam:"inline,name=V3_Workflows_ActionResponse"`
	V3WorkflowsSqMakeHTTPCall                 *V3WorkflowsSqMakeHTTPCall                 `queryParam:"inline,name=V3_Workflows_ActionResponse"`
	V3WorkflowsSlackCreateIncidentChannel     *V3WorkflowsSlackCreateIncidentChannel     `queryParam:"inline,name=V3_Workflows_ActionResponse"`
	V3WorkflowsJiraCreateTicket               *V3WorkflowsJiraCreateTicket               `queryParam:"inline,name=V3_Workflows_ActionResponse"`
	V3WorkflowsMsTeamsMessageChannel          *V3WorkflowsMsTeamsMessageChannel          `queryParam:"inline,name=V3_Workflows_ActionResponse"`
	V3WorkflowsMsTeamsMessageUser             *V3WorkflowsMsTeamsMessageUser             `queryParam:"inline,name=V3_Workflows_ActionResponse"`
	V3WorkflowsSqSendEmail                    *V3WorkflowsSqSendEmail                    `queryParam:"inline,name=V3_Workflows_ActionResponse"`
	V3WorkflowsMsTeamsCreateMeetingLink       *V3WorkflowsMsTeamsCreateMeetingLink       `queryParam:"inline,name=V3_Workflows_ActionResponse"`
	Any                                       any                                        `queryParam:"inline,name=V3_Workflows_ActionResponse"`

	Type V3WorkflowsActionResponseType
}

func CreateV3WorkflowsActionResponseV3WorkflowsActionResponseSqAttachRunbooks(v3WorkflowsActionResponseSqAttachRunbooks V3WorkflowsActionResponseSqAttachRunbooks) V3WorkflowsActionResponse {
	typ := V3WorkflowsActionResponseTypeV3WorkflowsActionResponseSqAttachRunbooks

	return V3WorkflowsActionResponse{
		V3WorkflowsActionResponseSqAttachRunbooks: &v3WorkflowsActionResponseSqAttachRunbooks,
		Type: typ,
	}
}

func CreateV3WorkflowsActionResponseV3WorkflowsSqMarkIncidentSLOAffecting(v3WorkflowsSqMarkIncidentSLOAffecting V3WorkflowsSqMarkIncidentSLOAffecting) V3WorkflowsActionResponse {
	typ := V3WorkflowsActionResponseTypeV3WorkflowsSqMarkIncidentSLOAffecting

	return V3WorkflowsActionResponse{
		V3WorkflowsSqMarkIncidentSLOAffecting: &v3WorkflowsSqMarkIncidentSLOAffecting,
		Type:                                  typ,
	}
}

func CreateV3WorkflowsActionResponseV3WorkflowsSqTriggerManualWebhook(v3WorkflowsSqTriggerManualWebhook V3WorkflowsSqTriggerManualWebhook) V3WorkflowsActionResponse {
	typ := V3WorkflowsActionResponseTypeV3WorkflowsSqTriggerManualWebhook

	return V3WorkflowsActionResponse{
		V3WorkflowsSqTriggerManualWebhook: &v3WorkflowsSqTriggerManualWebhook,
		Type:                              typ,
	}
}

func CreateV3WorkflowsActionResponseV3WorkflowsUpdateIncidentPriority(v3WorkflowsUpdateIncidentPriority V3WorkflowsUpdateIncidentPriority) V3WorkflowsActionResponse {
	typ := V3WorkflowsActionResponseTypeV3WorkflowsUpdateIncidentPriority

	return V3WorkflowsActionResponse{
		V3WorkflowsUpdateIncidentPriority: &v3WorkflowsUpdateIncidentPriority,
		Type:                              typ,
	}
}

func CreateV3WorkflowsActionResponseV3WorkflowsSqCreateStatusPageIssue(v3WorkflowsSqCreateStatusPageIssue V3WorkflowsSqCreateStatusPageIssue) V3WorkflowsActionResponse {
	typ := V3WorkflowsActionResponseTypeV3WorkflowsSqCreateStatusPageIssue

	return V3WorkflowsActionResponse{
		V3WorkflowsSqCreateStatusPageIssue: &v3WorkflowsSqCreateStatusPageIssue,
		Type:                               typ,
	}
}

func CreateV3WorkflowsActionResponseV3WorkflowsSqAddIncidentNote(v3WorkflowsSqAddIncidentNote V3WorkflowsSqAddIncidentNote) V3WorkflowsActionResponse {
	typ := V3WorkflowsActionResponseTypeV3WorkflowsSqAddIncidentNote

	return V3WorkflowsActionResponse{
		V3WorkflowsSqAddIncidentNote: &v3WorkflowsSqAddIncidentNote,
		Type:                         typ,
	}
}

func CreateV3WorkflowsActionResponseV3WorkflowsSlackArchiveChannel(v3WorkflowsSlackArchiveChannel V3WorkflowsSlackArchiveChannel) V3WorkflowsActionResponse {
	typ := V3WorkflowsActionResponseTypeV3WorkflowsSlackArchiveChannel

	return V3WorkflowsActionResponse{
		V3WorkflowsSlackArchiveChannel: &v3WorkflowsSlackArchiveChannel,
		Type:                           typ,
	}
}

func CreateV3WorkflowsActionResponseV3WorkflowsSqAddCommunicationChannel(v3WorkflowsSqAddCommunicationChannel V3WorkflowsSqAddCommunicationChannel) V3WorkflowsActionResponse {
	typ := V3WorkflowsActionResponseTypeV3WorkflowsSqAddCommunicationChannel

	return V3WorkflowsActionResponse{
		V3WorkflowsSqAddCommunicationChannel: &v3WorkflowsSqAddCommunicationChannel,
		Type:                                 typ,
	}
}

func CreateV3WorkflowsActionResponseV3WorkflowsSlackMessageChannel(v3WorkflowsSlackMessageChannel V3WorkflowsSlackMessageChannel) V3WorkflowsActionResponse {
	typ := V3WorkflowsActionResponseTypeV3WorkflowsSlackMessageChannel

	return V3WorkflowsActionResponse{
		V3WorkflowsSlackMessageChannel: &v3WorkflowsSlackMessageChannel,
		Type:                           typ,
	}
}

func CreateV3WorkflowsActionResponseV3WorkflowsSlackMessageUser(v3WorkflowsSlackMessageUser V3WorkflowsSlackMessageUser) V3WorkflowsActionResponse {
	typ := V3WorkflowsActionResponseTypeV3WorkflowsSlackMessageUser

	return V3WorkflowsActionResponse{
		V3WorkflowsSlackMessageUser: &v3WorkflowsSlackMessageUser,
		Type:                        typ,
	}
}

func CreateV3WorkflowsActionResponseV3WorkflowsSqMakeHTTPCall(v3WorkflowsSqMakeHTTPCall V3WorkflowsSqMakeHTTPCall) V3WorkflowsActionResponse {
	typ := V3WorkflowsActionResponseTypeV3WorkflowsSqMakeHTTPCall

	return V3WorkflowsActionResponse{
		V3WorkflowsSqMakeHTTPCall: &v3WorkflowsSqMakeHTTPCall,
		Type:                      typ,
	}
}

func CreateV3WorkflowsActionResponseV3WorkflowsSlackCreateIncidentChannel(v3WorkflowsSlackCreateIncidentChannel V3WorkflowsSlackCreateIncidentChannel) V3WorkflowsActionResponse {
	typ := V3WorkflowsActionResponseTypeV3WorkflowsSlackCreateIncidentChannel

	return V3WorkflowsActionResponse{
		V3WorkflowsSlackCreateIncidentChannel: &v3WorkflowsSlackCreateIncidentChannel,
		Type:                                  typ,
	}
}

func CreateV3WorkflowsActionResponseV3WorkflowsJiraCreateTicket(v3WorkflowsJiraCreateTicket V3WorkflowsJiraCreateTicket) V3WorkflowsActionResponse {
	typ := V3WorkflowsActionResponseTypeV3WorkflowsJiraCreateTicket

	return V3WorkflowsActionResponse{
		V3WorkflowsJiraCreateTicket: &v3WorkflowsJiraCreateTicket,
		Type:                        typ,
	}
}

func CreateV3WorkflowsActionResponseV3WorkflowsMsTeamsMessageChannel(v3WorkflowsMsTeamsMessageChannel V3WorkflowsMsTeamsMessageChannel) V3WorkflowsActionResponse {
	typ := V3WorkflowsActionResponseTypeV3WorkflowsMsTeamsMessageChannel

	return V3WorkflowsActionResponse{
		V3WorkflowsMsTeamsMessageChannel: &v3WorkflowsMsTeamsMessageChannel,
		Type:                             typ,
	}
}

func CreateV3WorkflowsActionResponseV3WorkflowsMsTeamsMessageUser(v3WorkflowsMsTeamsMessageUser V3WorkflowsMsTeamsMessageUser) V3WorkflowsActionResponse {
	typ := V3WorkflowsActionResponseTypeV3WorkflowsMsTeamsMessageUser

	return V3WorkflowsActionResponse{
		V3WorkflowsMsTeamsMessageUser: &v3WorkflowsMsTeamsMessageUser,
		Type:                          typ,
	}
}

func CreateV3WorkflowsActionResponseV3WorkflowsSqSendEmail(v3WorkflowsSqSendEmail V3WorkflowsSqSendEmail) V3WorkflowsActionResponse {
	typ := V3WorkflowsActionResponseTypeV3WorkflowsSqSendEmail

	return V3WorkflowsActionResponse{
		V3WorkflowsSqSendEmail: &v3WorkflowsSqSendEmail,
		Type:                   typ,
	}
}

func CreateV3WorkflowsActionResponseV3WorkflowsMsTeamsCreateMeetingLink(v3WorkflowsMsTeamsCreateMeetingLink V3WorkflowsMsTeamsCreateMeetingLink) V3WorkflowsActionResponse {
	typ := V3WorkflowsActionResponseTypeV3WorkflowsMsTeamsCreateMeetingLink

	return V3WorkflowsActionResponse{
		V3WorkflowsMsTeamsCreateMeetingLink: &v3WorkflowsMsTeamsCreateMeetingLink,
		Type:                                typ,
	}
}

func CreateV3WorkflowsActionResponseAny(anyT any) V3WorkflowsActionResponse {
	typ := V3WorkflowsActionResponseTypeAny

	return V3WorkflowsActionResponse{
		Any:  anyT,
		Type: typ,
	}
}

func (u *V3WorkflowsActionResponse) UnmarshalJSON(data []byte) error {

	var v3WorkflowsActionResponseSqAttachRunbooks V3WorkflowsActionResponseSqAttachRunbooks = V3WorkflowsActionResponseSqAttachRunbooks{}
	if err := utils.UnmarshalJSON(data, &v3WorkflowsActionResponseSqAttachRunbooks, "", true, nil); err == nil {
		u.V3WorkflowsActionResponseSqAttachRunbooks = &v3WorkflowsActionResponseSqAttachRunbooks
		u.Type = V3WorkflowsActionResponseTypeV3WorkflowsActionResponseSqAttachRunbooks
		return nil
	}

	var v3WorkflowsSqMarkIncidentSLOAffecting V3WorkflowsSqMarkIncidentSLOAffecting = V3WorkflowsSqMarkIncidentSLOAffecting{}
	if err := utils.UnmarshalJSON(data, &v3WorkflowsSqMarkIncidentSLOAffecting, "", true, nil); err == nil {
		u.V3WorkflowsSqMarkIncidentSLOAffecting = &v3WorkflowsSqMarkIncidentSLOAffecting
		u.Type = V3WorkflowsActionResponseTypeV3WorkflowsSqMarkIncidentSLOAffecting
		return nil
	}

	var v3WorkflowsSqTriggerManualWebhook V3WorkflowsSqTriggerManualWebhook = V3WorkflowsSqTriggerManualWebhook{}
	if err := utils.UnmarshalJSON(data, &v3WorkflowsSqTriggerManualWebhook, "", true, nil); err == nil {
		u.V3WorkflowsSqTriggerManualWebhook = &v3WorkflowsSqTriggerManualWebhook
		u.Type = V3WorkflowsActionResponseTypeV3WorkflowsSqTriggerManualWebhook
		return nil
	}

	var v3WorkflowsUpdateIncidentPriority V3WorkflowsUpdateIncidentPriority = V3WorkflowsUpdateIncidentPriority{}
	if err := utils.UnmarshalJSON(data, &v3WorkflowsUpdateIncidentPriority, "", true, nil); err == nil {
		u.V3WorkflowsUpdateIncidentPriority = &v3WorkflowsUpdateIncidentPriority
		u.Type = V3WorkflowsActionResponseTypeV3WorkflowsUpdateIncidentPriority
		return nil
	}

	var v3WorkflowsSqCreateStatusPageIssue V3WorkflowsSqCreateStatusPageIssue = V3WorkflowsSqCreateStatusPageIssue{}
	if err := utils.UnmarshalJSON(data, &v3WorkflowsSqCreateStatusPageIssue, "", true, nil); err == nil {
		u.V3WorkflowsSqCreateStatusPageIssue = &v3WorkflowsSqCreateStatusPageIssue
		u.Type = V3WorkflowsActionResponseTypeV3WorkflowsSqCreateStatusPageIssue
		return nil
	}

	var v3WorkflowsSqAddIncidentNote V3WorkflowsSqAddIncidentNote = V3WorkflowsSqAddIncidentNote{}
	if err := utils.UnmarshalJSON(data, &v3WorkflowsSqAddIncidentNote, "", true, nil); err == nil {
		u.V3WorkflowsSqAddIncidentNote = &v3WorkflowsSqAddIncidentNote
		u.Type = V3WorkflowsActionResponseTypeV3WorkflowsSqAddIncidentNote
		return nil
	}

	var v3WorkflowsSqAddCommunicationChannel V3WorkflowsSqAddCommunicationChannel = V3WorkflowsSqAddCommunicationChannel{}
	if err := utils.UnmarshalJSON(data, &v3WorkflowsSqAddCommunicationChannel, "", true, nil); err == nil {
		u.V3WorkflowsSqAddCommunicationChannel = &v3WorkflowsSqAddCommunicationChannel
		u.Type = V3WorkflowsActionResponseTypeV3WorkflowsSqAddCommunicationChannel
		return nil
	}

	var v3WorkflowsSlackMessageChannel V3WorkflowsSlackMessageChannel = V3WorkflowsSlackMessageChannel{}
	if err := utils.UnmarshalJSON(data, &v3WorkflowsSlackMessageChannel, "", true, nil); err == nil {
		u.V3WorkflowsSlackMessageChannel = &v3WorkflowsSlackMessageChannel
		u.Type = V3WorkflowsActionResponseTypeV3WorkflowsSlackMessageChannel
		return nil
	}

	var v3WorkflowsSlackMessageUser V3WorkflowsSlackMessageUser = V3WorkflowsSlackMessageUser{}
	if err := utils.UnmarshalJSON(data, &v3WorkflowsSlackMessageUser, "", true, nil); err == nil {
		u.V3WorkflowsSlackMessageUser = &v3WorkflowsSlackMessageUser
		u.Type = V3WorkflowsActionResponseTypeV3WorkflowsSlackMessageUser
		return nil
	}

	var v3WorkflowsSqMakeHTTPCall V3WorkflowsSqMakeHTTPCall = V3WorkflowsSqMakeHTTPCall{}
	if err := utils.UnmarshalJSON(data, &v3WorkflowsSqMakeHTTPCall, "", true, nil); err == nil {
		u.V3WorkflowsSqMakeHTTPCall = &v3WorkflowsSqMakeHTTPCall
		u.Type = V3WorkflowsActionResponseTypeV3WorkflowsSqMakeHTTPCall
		return nil
	}

	var v3WorkflowsSlackCreateIncidentChannel V3WorkflowsSlackCreateIncidentChannel = V3WorkflowsSlackCreateIncidentChannel{}
	if err := utils.UnmarshalJSON(data, &v3WorkflowsSlackCreateIncidentChannel, "", true, nil); err == nil {
		u.V3WorkflowsSlackCreateIncidentChannel = &v3WorkflowsSlackCreateIncidentChannel
		u.Type = V3WorkflowsActionResponseTypeV3WorkflowsSlackCreateIncidentChannel
		return nil
	}

	var v3WorkflowsJiraCreateTicket V3WorkflowsJiraCreateTicket = V3WorkflowsJiraCreateTicket{}
	if err := utils.UnmarshalJSON(data, &v3WorkflowsJiraCreateTicket, "", true, nil); err == nil {
		u.V3WorkflowsJiraCreateTicket = &v3WorkflowsJiraCreateTicket
		u.Type = V3WorkflowsActionResponseTypeV3WorkflowsJiraCreateTicket
		return nil
	}

	var v3WorkflowsMsTeamsMessageChannel V3WorkflowsMsTeamsMessageChannel = V3WorkflowsMsTeamsMessageChannel{}
	if err := utils.UnmarshalJSON(data, &v3WorkflowsMsTeamsMessageChannel, "", true, nil); err == nil {
		u.V3WorkflowsMsTeamsMessageChannel = &v3WorkflowsMsTeamsMessageChannel
		u.Type = V3WorkflowsActionResponseTypeV3WorkflowsMsTeamsMessageChannel
		return nil
	}

	var v3WorkflowsMsTeamsMessageUser V3WorkflowsMsTeamsMessageUser = V3WorkflowsMsTeamsMessageUser{}
	if err := utils.UnmarshalJSON(data, &v3WorkflowsMsTeamsMessageUser, "", true, nil); err == nil {
		u.V3WorkflowsMsTeamsMessageUser = &v3WorkflowsMsTeamsMessageUser
		u.Type = V3WorkflowsActionResponseTypeV3WorkflowsMsTeamsMessageUser
		return nil
	}

	var v3WorkflowsSqSendEmail V3WorkflowsSqSendEmail = V3WorkflowsSqSendEmail{}
	if err := utils.UnmarshalJSON(data, &v3WorkflowsSqSendEmail, "", true, nil); err == nil {
		u.V3WorkflowsSqSendEmail = &v3WorkflowsSqSendEmail
		u.Type = V3WorkflowsActionResponseTypeV3WorkflowsSqSendEmail
		return nil
	}

	var v3WorkflowsSlackArchiveChannel V3WorkflowsSlackArchiveChannel = V3WorkflowsSlackArchiveChannel{}
	if err := utils.UnmarshalJSON(data, &v3WorkflowsSlackArchiveChannel, "", true, nil); err == nil {
		u.V3WorkflowsSlackArchiveChannel = &v3WorkflowsSlackArchiveChannel
		u.Type = V3WorkflowsActionResponseTypeV3WorkflowsSlackArchiveChannel
		return nil
	}

	var v3WorkflowsMsTeamsCreateMeetingLink V3WorkflowsMsTeamsCreateMeetingLink = V3WorkflowsMsTeamsCreateMeetingLink{}
	if err := utils.UnmarshalJSON(data, &v3WorkflowsMsTeamsCreateMeetingLink, "", true, nil); err == nil {
		u.V3WorkflowsMsTeamsCreateMeetingLink = &v3WorkflowsMsTeamsCreateMeetingLink
		u.Type = V3WorkflowsActionResponseTypeV3WorkflowsMsTeamsCreateMeetingLink
		return nil
	}

	var anyVar any = nil
	if err := utils.UnmarshalJSON(data, &anyVar, "", true, nil); err == nil {
		u.Any = anyVar
		u.Type = V3WorkflowsActionResponseTypeAny
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for V3WorkflowsActionResponse", string(data))
}

func (u V3WorkflowsActionResponse) MarshalJSON() ([]byte, error) {
	if u.V3WorkflowsActionResponseSqAttachRunbooks != nil {
		return utils.MarshalJSON(u.V3WorkflowsActionResponseSqAttachRunbooks, "", true)
	}

	if u.V3WorkflowsSqMarkIncidentSLOAffecting != nil {
		return utils.MarshalJSON(u.V3WorkflowsSqMarkIncidentSLOAffecting, "", true)
	}

	if u.V3WorkflowsSqTriggerManualWebhook != nil {
		return utils.MarshalJSON(u.V3WorkflowsSqTriggerManualWebhook, "", true)
	}

	if u.V3WorkflowsUpdateIncidentPriority != nil {
		return utils.MarshalJSON(u.V3WorkflowsUpdateIncidentPriority, "", true)
	}

	if u.V3WorkflowsSqCreateStatusPageIssue != nil {
		return utils.MarshalJSON(u.V3WorkflowsSqCreateStatusPageIssue, "", true)
	}

	if u.V3WorkflowsSqAddIncidentNote != nil {
		return utils.MarshalJSON(u.V3WorkflowsSqAddIncidentNote, "", true)
	}

	if u.V3WorkflowsSlackArchiveChannel != nil {
		return utils.MarshalJSON(u.V3WorkflowsSlackArchiveChannel, "", true)
	}

	if u.V3WorkflowsSqAddCommunicationChannel != nil {
		return utils.MarshalJSON(u.V3WorkflowsSqAddCommunicationChannel, "", true)
	}

	if u.V3WorkflowsSlackMessageChannel != nil {
		return utils.MarshalJSON(u.V3WorkflowsSlackMessageChannel, "", true)
	}

	if u.V3WorkflowsSlackMessageUser != nil {
		return utils.MarshalJSON(u.V3WorkflowsSlackMessageUser, "", true)
	}

	if u.V3WorkflowsSqMakeHTTPCall != nil {
		return utils.MarshalJSON(u.V3WorkflowsSqMakeHTTPCall, "", true)
	}

	if u.V3WorkflowsSlackCreateIncidentChannel != nil {
		return utils.MarshalJSON(u.V3WorkflowsSlackCreateIncidentChannel, "", true)
	}

	if u.V3WorkflowsJiraCreateTicket != nil {
		return utils.MarshalJSON(u.V3WorkflowsJiraCreateTicket, "", true)
	}

	if u.V3WorkflowsMsTeamsMessageChannel != nil {
		return utils.MarshalJSON(u.V3WorkflowsMsTeamsMessageChannel, "", true)
	}

	if u.V3WorkflowsMsTeamsMessageUser != nil {
		return utils.MarshalJSON(u.V3WorkflowsMsTeamsMessageUser, "", true)
	}

	if u.V3WorkflowsSqSendEmail != nil {
		return utils.MarshalJSON(u.V3WorkflowsSqSendEmail, "", true)
	}

	if u.V3WorkflowsMsTeamsCreateMeetingLink != nil {
		return utils.MarshalJSON(u.V3WorkflowsMsTeamsCreateMeetingLink, "", true)
	}

	if u.Any != nil {
		return utils.MarshalJSON(u.Any, "", true)
	}

	return nil, errors.New("could not marshal union type V3WorkflowsActionResponse: all fields are null")
}
