// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/SquadcastHub/squadcast-sdk-go/squadcastv1/internal/utils"
)

type V3WorkflowsSqCreateStatusPageIssueUpdateName string

const (
	V3WorkflowsSqCreateStatusPageIssueUpdateNameSqAddStatusPageIssue V3WorkflowsSqCreateStatusPageIssueUpdateName = "sq_add_status_page_issue"
)

func (e V3WorkflowsSqCreateStatusPageIssueUpdateName) ToPointer() *V3WorkflowsSqCreateStatusPageIssueUpdateName {
	return &e
}
func (e *V3WorkflowsSqCreateStatusPageIssueUpdateName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "sq_add_status_page_issue":
		*e = V3WorkflowsSqCreateStatusPageIssueUpdateName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for V3WorkflowsSqCreateStatusPageIssueUpdateName: %v", v)
	}
}

type V3WorkflowsSqCreateStatusPageIssueUpdateData struct {
	ComponentAndImpact []V3WorkflowsComponentAndImpact    `json:"component_and_impact,omitempty"`
	IssueTitle         *string                            `json:"issue_title,omitempty"`
	PageStatusID       *int                               `json:"page_status_id,omitempty"`
	StatusAndMessage   []V3WorkflowsIssueStatusAndMessage `json:"status_and_message,omitempty"`
	StatusPageID       *int                               `json:"status_page_id,omitempty"`
}

func (v V3WorkflowsSqCreateStatusPageIssueUpdateData) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *V3WorkflowsSqCreateStatusPageIssueUpdateData) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *V3WorkflowsSqCreateStatusPageIssueUpdateData) GetComponentAndImpact() []V3WorkflowsComponentAndImpact {
	if o == nil {
		return nil
	}
	return o.ComponentAndImpact
}

func (o *V3WorkflowsSqCreateStatusPageIssueUpdateData) GetIssueTitle() *string {
	if o == nil {
		return nil
	}
	return o.IssueTitle
}

func (o *V3WorkflowsSqCreateStatusPageIssueUpdateData) GetPageStatusID() *int {
	if o == nil {
		return nil
	}
	return o.PageStatusID
}

func (o *V3WorkflowsSqCreateStatusPageIssueUpdateData) GetStatusAndMessage() []V3WorkflowsIssueStatusAndMessage {
	if o == nil {
		return nil
	}
	return o.StatusAndMessage
}

func (o *V3WorkflowsSqCreateStatusPageIssueUpdateData) GetStatusPageID() *int {
	if o == nil {
		return nil
	}
	return o.StatusPageID
}

type V3WorkflowsSqCreateStatusPageIssueUpdate struct {
	Name V3WorkflowsSqCreateStatusPageIssueUpdateName  `json:"name"`
	Data *V3WorkflowsSqCreateStatusPageIssueUpdateData `json:"data,omitempty"`
}

func (v V3WorkflowsSqCreateStatusPageIssueUpdate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *V3WorkflowsSqCreateStatusPageIssueUpdate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, []string{"name"}); err != nil {
		return err
	}
	return nil
}

func (o *V3WorkflowsSqCreateStatusPageIssueUpdate) GetName() V3WorkflowsSqCreateStatusPageIssueUpdateName {
	if o == nil {
		return V3WorkflowsSqCreateStatusPageIssueUpdateName("")
	}
	return o.Name
}

func (o *V3WorkflowsSqCreateStatusPageIssueUpdate) GetData() *V3WorkflowsSqCreateStatusPageIssueUpdateData {
	if o == nil {
		return nil
	}
	return o.Data
}
