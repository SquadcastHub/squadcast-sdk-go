// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/SquadcastHub/squadcast-sdk-go/squadcastv1/internal/utils"
)

type V3WorkflowsActionRequestUpdateName string

const (
	V3WorkflowsActionRequestUpdateNameSqAttachRunbooks V3WorkflowsActionRequestUpdateName = "sq_attach_runbooks"
)

func (e V3WorkflowsActionRequestUpdateName) ToPointer() *V3WorkflowsActionRequestUpdateName {
	return &e
}
func (e *V3WorkflowsActionRequestUpdateName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "sq_attach_runbooks":
		*e = V3WorkflowsActionRequestUpdateName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for V3WorkflowsActionRequestUpdateName: %v", v)
	}
}

type V3WorkflowsActionRequestUpdateData struct {
	Runbooks []string `json:"runbooks,omitempty"`
}

func (v V3WorkflowsActionRequestUpdateData) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *V3WorkflowsActionRequestUpdateData) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *V3WorkflowsActionRequestUpdateData) GetRunbooks() []string {
	if o == nil {
		return nil
	}
	return o.Runbooks
}

type V3WorkflowsActionRequestUpdateSqAttachRunbooks struct {
	Name V3WorkflowsActionRequestUpdateName  `json:"name"`
	Data *V3WorkflowsActionRequestUpdateData `json:"data,omitempty"`
}

func (v V3WorkflowsActionRequestUpdateSqAttachRunbooks) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *V3WorkflowsActionRequestUpdateSqAttachRunbooks) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, []string{"name"}); err != nil {
		return err
	}
	return nil
}

func (o *V3WorkflowsActionRequestUpdateSqAttachRunbooks) GetName() V3WorkflowsActionRequestUpdateName {
	if o == nil {
		return V3WorkflowsActionRequestUpdateName("")
	}
	return o.Name
}

func (o *V3WorkflowsActionRequestUpdateSqAttachRunbooks) GetData() *V3WorkflowsActionRequestUpdateData {
	if o == nil {
		return nil
	}
	return o.Data
}

type V3WorkflowsActionRequestUpdateType string

const (
	V3WorkflowsActionRequestUpdateTypeV3WorkflowsActionRequestUpdateSqAttachRunbooks V3WorkflowsActionRequestUpdateType = "V3.Workflows.ActionRequestUpdate_SqAttachRunbooks"
	V3WorkflowsActionRequestUpdateTypeV3WorkflowsSqMarkIncidentSLOAffectingUpdate    V3WorkflowsActionRequestUpdateType = "V3.Workflows.SqMarkIncidentSLOAffectingUpdate"
	V3WorkflowsActionRequestUpdateTypeV3WorkflowsSqTriggerManualWebhookUpdate        V3WorkflowsActionRequestUpdateType = "V3.Workflows.SqTriggerManualWebhookUpdate"
	V3WorkflowsActionRequestUpdateTypeV3WorkflowsUpdateIncidentPriorityUpdate        V3WorkflowsActionRequestUpdateType = "V3.Workflows.UpdateIncidentPriorityUpdate"
	V3WorkflowsActionRequestUpdateTypeV3WorkflowsSqCreateStatusPageIssueUpdate       V3WorkflowsActionRequestUpdateType = "V3.Workflows.SqCreateStatusPageIssueUpdate"
	V3WorkflowsActionRequestUpdateTypeV3WorkflowsSqAddIncidentNoteUpdate             V3WorkflowsActionRequestUpdateType = "V3.Workflows.SqAddIncidentNoteUpdate"
	V3WorkflowsActionRequestUpdateTypeV3WorkflowsSlackArchiveChannelUpdate           V3WorkflowsActionRequestUpdateType = "V3.Workflows.SlackArchiveChannelUpdate"
	V3WorkflowsActionRequestUpdateTypeV3WorkflowsSqAddCommunicationChannelUpdate     V3WorkflowsActionRequestUpdateType = "V3.Workflows.SqAddCommunicationChannelUpdate"
	V3WorkflowsActionRequestUpdateTypeV3WorkflowsSlackMessageChannelUpdate           V3WorkflowsActionRequestUpdateType = "V3.Workflows.SlackMessageChannelUpdate"
	V3WorkflowsActionRequestUpdateTypeV3WorkflowsSlackMessageUserUpdate              V3WorkflowsActionRequestUpdateType = "V3.Workflows.SlackMessageUserUpdate"
	V3WorkflowsActionRequestUpdateTypeV3WorkflowsSqMakeHTTPCallUpdate                V3WorkflowsActionRequestUpdateType = "V3.Workflows.SqMakeHTTPCallUpdate"
	V3WorkflowsActionRequestUpdateTypeV3WorkflowsSlackCreateIncidentChannelUpdate    V3WorkflowsActionRequestUpdateType = "V3.Workflows.SlackCreateIncidentChannelUpdate"
	V3WorkflowsActionRequestUpdateTypeV3WorkflowsJiraCreateTicketUpdate              V3WorkflowsActionRequestUpdateType = "V3.Workflows.JiraCreateTicketUpdate"
	V3WorkflowsActionRequestUpdateTypeV3WorkflowsMsTeamsMessageChannelUpdate         V3WorkflowsActionRequestUpdateType = "V3.Workflows.MsTeamsMessageChannelUpdate"
	V3WorkflowsActionRequestUpdateTypeV3WorkflowsMsTeamsMessageUserUpdate            V3WorkflowsActionRequestUpdateType = "V3.Workflows.MsTeamsMessageUserUpdate"
	V3WorkflowsActionRequestUpdateTypeV3WorkflowsSqSendEmailUpdate                   V3WorkflowsActionRequestUpdateType = "V3.Workflows.SqSendEmailUpdate"
	V3WorkflowsActionRequestUpdateTypeV3WorkflowsMsTeamsCreateMeetingLinkUpdate      V3WorkflowsActionRequestUpdateType = "V3.Workflows.MsTeamsCreateMeetingLinkUpdate"
	V3WorkflowsActionRequestUpdateTypeAny                                            V3WorkflowsActionRequestUpdateType = "any"
)

type V3WorkflowsActionRequestUpdate struct {
	V3WorkflowsActionRequestUpdateSqAttachRunbooks *V3WorkflowsActionRequestUpdateSqAttachRunbooks `queryParam:"inline" name:"V3_Workflows_ActionRequestUpdate"`
	V3WorkflowsSqMarkIncidentSLOAffectingUpdate    *V3WorkflowsSqMarkIncidentSLOAffectingUpdate    `queryParam:"inline" name:"V3_Workflows_ActionRequestUpdate"`
	V3WorkflowsSqTriggerManualWebhookUpdate        *V3WorkflowsSqTriggerManualWebhookUpdate        `queryParam:"inline" name:"V3_Workflows_ActionRequestUpdate"`
	V3WorkflowsUpdateIncidentPriorityUpdate        *V3WorkflowsUpdateIncidentPriorityUpdate        `queryParam:"inline" name:"V3_Workflows_ActionRequestUpdate"`
	V3WorkflowsSqCreateStatusPageIssueUpdate       *V3WorkflowsSqCreateStatusPageIssueUpdate       `queryParam:"inline" name:"V3_Workflows_ActionRequestUpdate"`
	V3WorkflowsSqAddIncidentNoteUpdate             *V3WorkflowsSqAddIncidentNoteUpdate             `queryParam:"inline" name:"V3_Workflows_ActionRequestUpdate"`
	V3WorkflowsSlackArchiveChannelUpdate           *V3WorkflowsSlackArchiveChannelUpdate           `queryParam:"inline" name:"V3_Workflows_ActionRequestUpdate"`
	V3WorkflowsSqAddCommunicationChannelUpdate     *V3WorkflowsSqAddCommunicationChannelUpdate     `queryParam:"inline" name:"V3_Workflows_ActionRequestUpdate"`
	V3WorkflowsSlackMessageChannelUpdate           *V3WorkflowsSlackMessageChannelUpdate           `queryParam:"inline" name:"V3_Workflows_ActionRequestUpdate"`
	V3WorkflowsSlackMessageUserUpdate              *V3WorkflowsSlackMessageUserUpdate              `queryParam:"inline" name:"V3_Workflows_ActionRequestUpdate"`
	V3WorkflowsSqMakeHTTPCallUpdate                *V3WorkflowsSqMakeHTTPCallUpdate                `queryParam:"inline" name:"V3_Workflows_ActionRequestUpdate"`
	V3WorkflowsSlackCreateIncidentChannelUpdate    *V3WorkflowsSlackCreateIncidentChannelUpdate    `queryParam:"inline" name:"V3_Workflows_ActionRequestUpdate"`
	V3WorkflowsJiraCreateTicketUpdate              *V3WorkflowsJiraCreateTicketUpdate              `queryParam:"inline" name:"V3_Workflows_ActionRequestUpdate"`
	V3WorkflowsMsTeamsMessageChannelUpdate         *V3WorkflowsMsTeamsMessageChannelUpdate         `queryParam:"inline" name:"V3_Workflows_ActionRequestUpdate"`
	V3WorkflowsMsTeamsMessageUserUpdate            *V3WorkflowsMsTeamsMessageUserUpdate            `queryParam:"inline" name:"V3_Workflows_ActionRequestUpdate"`
	V3WorkflowsSqSendEmailUpdate                   *V3WorkflowsSqSendEmailUpdate                   `queryParam:"inline" name:"V3_Workflows_ActionRequestUpdate"`
	V3WorkflowsMsTeamsCreateMeetingLinkUpdate      *V3WorkflowsMsTeamsCreateMeetingLinkUpdate      `queryParam:"inline" name:"V3_Workflows_ActionRequestUpdate"`
	Any                                            any                                             `queryParam:"inline" name:"V3_Workflows_ActionRequestUpdate"`

	Type V3WorkflowsActionRequestUpdateType
}

func CreateV3WorkflowsActionRequestUpdateV3WorkflowsActionRequestUpdateSqAttachRunbooks(v3WorkflowsActionRequestUpdateSqAttachRunbooks V3WorkflowsActionRequestUpdateSqAttachRunbooks) V3WorkflowsActionRequestUpdate {
	typ := V3WorkflowsActionRequestUpdateTypeV3WorkflowsActionRequestUpdateSqAttachRunbooks

	return V3WorkflowsActionRequestUpdate{
		V3WorkflowsActionRequestUpdateSqAttachRunbooks: &v3WorkflowsActionRequestUpdateSqAttachRunbooks,
		Type: typ,
	}
}

func CreateV3WorkflowsActionRequestUpdateV3WorkflowsSqMarkIncidentSLOAffectingUpdate(v3WorkflowsSqMarkIncidentSLOAffectingUpdate V3WorkflowsSqMarkIncidentSLOAffectingUpdate) V3WorkflowsActionRequestUpdate {
	typ := V3WorkflowsActionRequestUpdateTypeV3WorkflowsSqMarkIncidentSLOAffectingUpdate

	return V3WorkflowsActionRequestUpdate{
		V3WorkflowsSqMarkIncidentSLOAffectingUpdate: &v3WorkflowsSqMarkIncidentSLOAffectingUpdate,
		Type: typ,
	}
}

func CreateV3WorkflowsActionRequestUpdateV3WorkflowsSqTriggerManualWebhookUpdate(v3WorkflowsSqTriggerManualWebhookUpdate V3WorkflowsSqTriggerManualWebhookUpdate) V3WorkflowsActionRequestUpdate {
	typ := V3WorkflowsActionRequestUpdateTypeV3WorkflowsSqTriggerManualWebhookUpdate

	return V3WorkflowsActionRequestUpdate{
		V3WorkflowsSqTriggerManualWebhookUpdate: &v3WorkflowsSqTriggerManualWebhookUpdate,
		Type:                                    typ,
	}
}

func CreateV3WorkflowsActionRequestUpdateV3WorkflowsUpdateIncidentPriorityUpdate(v3WorkflowsUpdateIncidentPriorityUpdate V3WorkflowsUpdateIncidentPriorityUpdate) V3WorkflowsActionRequestUpdate {
	typ := V3WorkflowsActionRequestUpdateTypeV3WorkflowsUpdateIncidentPriorityUpdate

	return V3WorkflowsActionRequestUpdate{
		V3WorkflowsUpdateIncidentPriorityUpdate: &v3WorkflowsUpdateIncidentPriorityUpdate,
		Type:                                    typ,
	}
}

func CreateV3WorkflowsActionRequestUpdateV3WorkflowsSqCreateStatusPageIssueUpdate(v3WorkflowsSqCreateStatusPageIssueUpdate V3WorkflowsSqCreateStatusPageIssueUpdate) V3WorkflowsActionRequestUpdate {
	typ := V3WorkflowsActionRequestUpdateTypeV3WorkflowsSqCreateStatusPageIssueUpdate

	return V3WorkflowsActionRequestUpdate{
		V3WorkflowsSqCreateStatusPageIssueUpdate: &v3WorkflowsSqCreateStatusPageIssueUpdate,
		Type:                                     typ,
	}
}

func CreateV3WorkflowsActionRequestUpdateV3WorkflowsSqAddIncidentNoteUpdate(v3WorkflowsSqAddIncidentNoteUpdate V3WorkflowsSqAddIncidentNoteUpdate) V3WorkflowsActionRequestUpdate {
	typ := V3WorkflowsActionRequestUpdateTypeV3WorkflowsSqAddIncidentNoteUpdate

	return V3WorkflowsActionRequestUpdate{
		V3WorkflowsSqAddIncidentNoteUpdate: &v3WorkflowsSqAddIncidentNoteUpdate,
		Type:                               typ,
	}
}

func CreateV3WorkflowsActionRequestUpdateV3WorkflowsSlackArchiveChannelUpdate(v3WorkflowsSlackArchiveChannelUpdate V3WorkflowsSlackArchiveChannelUpdate) V3WorkflowsActionRequestUpdate {
	typ := V3WorkflowsActionRequestUpdateTypeV3WorkflowsSlackArchiveChannelUpdate

	return V3WorkflowsActionRequestUpdate{
		V3WorkflowsSlackArchiveChannelUpdate: &v3WorkflowsSlackArchiveChannelUpdate,
		Type:                                 typ,
	}
}

func CreateV3WorkflowsActionRequestUpdateV3WorkflowsSqAddCommunicationChannelUpdate(v3WorkflowsSqAddCommunicationChannelUpdate V3WorkflowsSqAddCommunicationChannelUpdate) V3WorkflowsActionRequestUpdate {
	typ := V3WorkflowsActionRequestUpdateTypeV3WorkflowsSqAddCommunicationChannelUpdate

	return V3WorkflowsActionRequestUpdate{
		V3WorkflowsSqAddCommunicationChannelUpdate: &v3WorkflowsSqAddCommunicationChannelUpdate,
		Type: typ,
	}
}

func CreateV3WorkflowsActionRequestUpdateV3WorkflowsSlackMessageChannelUpdate(v3WorkflowsSlackMessageChannelUpdate V3WorkflowsSlackMessageChannelUpdate) V3WorkflowsActionRequestUpdate {
	typ := V3WorkflowsActionRequestUpdateTypeV3WorkflowsSlackMessageChannelUpdate

	return V3WorkflowsActionRequestUpdate{
		V3WorkflowsSlackMessageChannelUpdate: &v3WorkflowsSlackMessageChannelUpdate,
		Type:                                 typ,
	}
}

func CreateV3WorkflowsActionRequestUpdateV3WorkflowsSlackMessageUserUpdate(v3WorkflowsSlackMessageUserUpdate V3WorkflowsSlackMessageUserUpdate) V3WorkflowsActionRequestUpdate {
	typ := V3WorkflowsActionRequestUpdateTypeV3WorkflowsSlackMessageUserUpdate

	return V3WorkflowsActionRequestUpdate{
		V3WorkflowsSlackMessageUserUpdate: &v3WorkflowsSlackMessageUserUpdate,
		Type:                              typ,
	}
}

func CreateV3WorkflowsActionRequestUpdateV3WorkflowsSqMakeHTTPCallUpdate(v3WorkflowsSqMakeHTTPCallUpdate V3WorkflowsSqMakeHTTPCallUpdate) V3WorkflowsActionRequestUpdate {
	typ := V3WorkflowsActionRequestUpdateTypeV3WorkflowsSqMakeHTTPCallUpdate

	return V3WorkflowsActionRequestUpdate{
		V3WorkflowsSqMakeHTTPCallUpdate: &v3WorkflowsSqMakeHTTPCallUpdate,
		Type:                            typ,
	}
}

func CreateV3WorkflowsActionRequestUpdateV3WorkflowsSlackCreateIncidentChannelUpdate(v3WorkflowsSlackCreateIncidentChannelUpdate V3WorkflowsSlackCreateIncidentChannelUpdate) V3WorkflowsActionRequestUpdate {
	typ := V3WorkflowsActionRequestUpdateTypeV3WorkflowsSlackCreateIncidentChannelUpdate

	return V3WorkflowsActionRequestUpdate{
		V3WorkflowsSlackCreateIncidentChannelUpdate: &v3WorkflowsSlackCreateIncidentChannelUpdate,
		Type: typ,
	}
}

func CreateV3WorkflowsActionRequestUpdateV3WorkflowsJiraCreateTicketUpdate(v3WorkflowsJiraCreateTicketUpdate V3WorkflowsJiraCreateTicketUpdate) V3WorkflowsActionRequestUpdate {
	typ := V3WorkflowsActionRequestUpdateTypeV3WorkflowsJiraCreateTicketUpdate

	return V3WorkflowsActionRequestUpdate{
		V3WorkflowsJiraCreateTicketUpdate: &v3WorkflowsJiraCreateTicketUpdate,
		Type:                              typ,
	}
}

func CreateV3WorkflowsActionRequestUpdateV3WorkflowsMsTeamsMessageChannelUpdate(v3WorkflowsMsTeamsMessageChannelUpdate V3WorkflowsMsTeamsMessageChannelUpdate) V3WorkflowsActionRequestUpdate {
	typ := V3WorkflowsActionRequestUpdateTypeV3WorkflowsMsTeamsMessageChannelUpdate

	return V3WorkflowsActionRequestUpdate{
		V3WorkflowsMsTeamsMessageChannelUpdate: &v3WorkflowsMsTeamsMessageChannelUpdate,
		Type:                                   typ,
	}
}

func CreateV3WorkflowsActionRequestUpdateV3WorkflowsMsTeamsMessageUserUpdate(v3WorkflowsMsTeamsMessageUserUpdate V3WorkflowsMsTeamsMessageUserUpdate) V3WorkflowsActionRequestUpdate {
	typ := V3WorkflowsActionRequestUpdateTypeV3WorkflowsMsTeamsMessageUserUpdate

	return V3WorkflowsActionRequestUpdate{
		V3WorkflowsMsTeamsMessageUserUpdate: &v3WorkflowsMsTeamsMessageUserUpdate,
		Type:                                typ,
	}
}

func CreateV3WorkflowsActionRequestUpdateV3WorkflowsSqSendEmailUpdate(v3WorkflowsSqSendEmailUpdate V3WorkflowsSqSendEmailUpdate) V3WorkflowsActionRequestUpdate {
	typ := V3WorkflowsActionRequestUpdateTypeV3WorkflowsSqSendEmailUpdate

	return V3WorkflowsActionRequestUpdate{
		V3WorkflowsSqSendEmailUpdate: &v3WorkflowsSqSendEmailUpdate,
		Type:                         typ,
	}
}

func CreateV3WorkflowsActionRequestUpdateV3WorkflowsMsTeamsCreateMeetingLinkUpdate(v3WorkflowsMsTeamsCreateMeetingLinkUpdate V3WorkflowsMsTeamsCreateMeetingLinkUpdate) V3WorkflowsActionRequestUpdate {
	typ := V3WorkflowsActionRequestUpdateTypeV3WorkflowsMsTeamsCreateMeetingLinkUpdate

	return V3WorkflowsActionRequestUpdate{
		V3WorkflowsMsTeamsCreateMeetingLinkUpdate: &v3WorkflowsMsTeamsCreateMeetingLinkUpdate,
		Type: typ,
	}
}

func CreateV3WorkflowsActionRequestUpdateAny(anyT any) V3WorkflowsActionRequestUpdate {
	typ := V3WorkflowsActionRequestUpdateTypeAny

	return V3WorkflowsActionRequestUpdate{
		Any:  anyT,
		Type: typ,
	}
}

func (u *V3WorkflowsActionRequestUpdate) UnmarshalJSON(data []byte) error {

	var v3WorkflowsActionRequestUpdateSqAttachRunbooks V3WorkflowsActionRequestUpdateSqAttachRunbooks = V3WorkflowsActionRequestUpdateSqAttachRunbooks{}
	if err := utils.UnmarshalJSON(data, &v3WorkflowsActionRequestUpdateSqAttachRunbooks, "", true, nil); err == nil {
		u.V3WorkflowsActionRequestUpdateSqAttachRunbooks = &v3WorkflowsActionRequestUpdateSqAttachRunbooks
		u.Type = V3WorkflowsActionRequestUpdateTypeV3WorkflowsActionRequestUpdateSqAttachRunbooks
		return nil
	}

	var v3WorkflowsSqMarkIncidentSLOAffectingUpdate V3WorkflowsSqMarkIncidentSLOAffectingUpdate = V3WorkflowsSqMarkIncidentSLOAffectingUpdate{}
	if err := utils.UnmarshalJSON(data, &v3WorkflowsSqMarkIncidentSLOAffectingUpdate, "", true, nil); err == nil {
		u.V3WorkflowsSqMarkIncidentSLOAffectingUpdate = &v3WorkflowsSqMarkIncidentSLOAffectingUpdate
		u.Type = V3WorkflowsActionRequestUpdateTypeV3WorkflowsSqMarkIncidentSLOAffectingUpdate
		return nil
	}

	var v3WorkflowsSqTriggerManualWebhookUpdate V3WorkflowsSqTriggerManualWebhookUpdate = V3WorkflowsSqTriggerManualWebhookUpdate{}
	if err := utils.UnmarshalJSON(data, &v3WorkflowsSqTriggerManualWebhookUpdate, "", true, nil); err == nil {
		u.V3WorkflowsSqTriggerManualWebhookUpdate = &v3WorkflowsSqTriggerManualWebhookUpdate
		u.Type = V3WorkflowsActionRequestUpdateTypeV3WorkflowsSqTriggerManualWebhookUpdate
		return nil
	}

	var v3WorkflowsUpdateIncidentPriorityUpdate V3WorkflowsUpdateIncidentPriorityUpdate = V3WorkflowsUpdateIncidentPriorityUpdate{}
	if err := utils.UnmarshalJSON(data, &v3WorkflowsUpdateIncidentPriorityUpdate, "", true, nil); err == nil {
		u.V3WorkflowsUpdateIncidentPriorityUpdate = &v3WorkflowsUpdateIncidentPriorityUpdate
		u.Type = V3WorkflowsActionRequestUpdateTypeV3WorkflowsUpdateIncidentPriorityUpdate
		return nil
	}

	var v3WorkflowsSqCreateStatusPageIssueUpdate V3WorkflowsSqCreateStatusPageIssueUpdate = V3WorkflowsSqCreateStatusPageIssueUpdate{}
	if err := utils.UnmarshalJSON(data, &v3WorkflowsSqCreateStatusPageIssueUpdate, "", true, nil); err == nil {
		u.V3WorkflowsSqCreateStatusPageIssueUpdate = &v3WorkflowsSqCreateStatusPageIssueUpdate
		u.Type = V3WorkflowsActionRequestUpdateTypeV3WorkflowsSqCreateStatusPageIssueUpdate
		return nil
	}

	var v3WorkflowsSqAddIncidentNoteUpdate V3WorkflowsSqAddIncidentNoteUpdate = V3WorkflowsSqAddIncidentNoteUpdate{}
	if err := utils.UnmarshalJSON(data, &v3WorkflowsSqAddIncidentNoteUpdate, "", true, nil); err == nil {
		u.V3WorkflowsSqAddIncidentNoteUpdate = &v3WorkflowsSqAddIncidentNoteUpdate
		u.Type = V3WorkflowsActionRequestUpdateTypeV3WorkflowsSqAddIncidentNoteUpdate
		return nil
	}

	var v3WorkflowsSlackArchiveChannelUpdate V3WorkflowsSlackArchiveChannelUpdate = V3WorkflowsSlackArchiveChannelUpdate{}
	if err := utils.UnmarshalJSON(data, &v3WorkflowsSlackArchiveChannelUpdate, "", true, nil); err == nil {
		u.V3WorkflowsSlackArchiveChannelUpdate = &v3WorkflowsSlackArchiveChannelUpdate
		u.Type = V3WorkflowsActionRequestUpdateTypeV3WorkflowsSlackArchiveChannelUpdate
		return nil
	}

	var v3WorkflowsSqAddCommunicationChannelUpdate V3WorkflowsSqAddCommunicationChannelUpdate = V3WorkflowsSqAddCommunicationChannelUpdate{}
	if err := utils.UnmarshalJSON(data, &v3WorkflowsSqAddCommunicationChannelUpdate, "", true, nil); err == nil {
		u.V3WorkflowsSqAddCommunicationChannelUpdate = &v3WorkflowsSqAddCommunicationChannelUpdate
		u.Type = V3WorkflowsActionRequestUpdateTypeV3WorkflowsSqAddCommunicationChannelUpdate
		return nil
	}

	var v3WorkflowsSlackMessageChannelUpdate V3WorkflowsSlackMessageChannelUpdate = V3WorkflowsSlackMessageChannelUpdate{}
	if err := utils.UnmarshalJSON(data, &v3WorkflowsSlackMessageChannelUpdate, "", true, nil); err == nil {
		u.V3WorkflowsSlackMessageChannelUpdate = &v3WorkflowsSlackMessageChannelUpdate
		u.Type = V3WorkflowsActionRequestUpdateTypeV3WorkflowsSlackMessageChannelUpdate
		return nil
	}

	var v3WorkflowsSlackMessageUserUpdate V3WorkflowsSlackMessageUserUpdate = V3WorkflowsSlackMessageUserUpdate{}
	if err := utils.UnmarshalJSON(data, &v3WorkflowsSlackMessageUserUpdate, "", true, nil); err == nil {
		u.V3WorkflowsSlackMessageUserUpdate = &v3WorkflowsSlackMessageUserUpdate
		u.Type = V3WorkflowsActionRequestUpdateTypeV3WorkflowsSlackMessageUserUpdate
		return nil
	}

	var v3WorkflowsSqMakeHTTPCallUpdate V3WorkflowsSqMakeHTTPCallUpdate = V3WorkflowsSqMakeHTTPCallUpdate{}
	if err := utils.UnmarshalJSON(data, &v3WorkflowsSqMakeHTTPCallUpdate, "", true, nil); err == nil {
		u.V3WorkflowsSqMakeHTTPCallUpdate = &v3WorkflowsSqMakeHTTPCallUpdate
		u.Type = V3WorkflowsActionRequestUpdateTypeV3WorkflowsSqMakeHTTPCallUpdate
		return nil
	}

	var v3WorkflowsSlackCreateIncidentChannelUpdate V3WorkflowsSlackCreateIncidentChannelUpdate = V3WorkflowsSlackCreateIncidentChannelUpdate{}
	if err := utils.UnmarshalJSON(data, &v3WorkflowsSlackCreateIncidentChannelUpdate, "", true, nil); err == nil {
		u.V3WorkflowsSlackCreateIncidentChannelUpdate = &v3WorkflowsSlackCreateIncidentChannelUpdate
		u.Type = V3WorkflowsActionRequestUpdateTypeV3WorkflowsSlackCreateIncidentChannelUpdate
		return nil
	}

	var v3WorkflowsJiraCreateTicketUpdate V3WorkflowsJiraCreateTicketUpdate = V3WorkflowsJiraCreateTicketUpdate{}
	if err := utils.UnmarshalJSON(data, &v3WorkflowsJiraCreateTicketUpdate, "", true, nil); err == nil {
		u.V3WorkflowsJiraCreateTicketUpdate = &v3WorkflowsJiraCreateTicketUpdate
		u.Type = V3WorkflowsActionRequestUpdateTypeV3WorkflowsJiraCreateTicketUpdate
		return nil
	}

	var v3WorkflowsMsTeamsMessageChannelUpdate V3WorkflowsMsTeamsMessageChannelUpdate = V3WorkflowsMsTeamsMessageChannelUpdate{}
	if err := utils.UnmarshalJSON(data, &v3WorkflowsMsTeamsMessageChannelUpdate, "", true, nil); err == nil {
		u.V3WorkflowsMsTeamsMessageChannelUpdate = &v3WorkflowsMsTeamsMessageChannelUpdate
		u.Type = V3WorkflowsActionRequestUpdateTypeV3WorkflowsMsTeamsMessageChannelUpdate
		return nil
	}

	var v3WorkflowsMsTeamsMessageUserUpdate V3WorkflowsMsTeamsMessageUserUpdate = V3WorkflowsMsTeamsMessageUserUpdate{}
	if err := utils.UnmarshalJSON(data, &v3WorkflowsMsTeamsMessageUserUpdate, "", true, nil); err == nil {
		u.V3WorkflowsMsTeamsMessageUserUpdate = &v3WorkflowsMsTeamsMessageUserUpdate
		u.Type = V3WorkflowsActionRequestUpdateTypeV3WorkflowsMsTeamsMessageUserUpdate
		return nil
	}

	var v3WorkflowsSqSendEmailUpdate V3WorkflowsSqSendEmailUpdate = V3WorkflowsSqSendEmailUpdate{}
	if err := utils.UnmarshalJSON(data, &v3WorkflowsSqSendEmailUpdate, "", true, nil); err == nil {
		u.V3WorkflowsSqSendEmailUpdate = &v3WorkflowsSqSendEmailUpdate
		u.Type = V3WorkflowsActionRequestUpdateTypeV3WorkflowsSqSendEmailUpdate
		return nil
	}

	var v3WorkflowsMsTeamsCreateMeetingLinkUpdate V3WorkflowsMsTeamsCreateMeetingLinkUpdate = V3WorkflowsMsTeamsCreateMeetingLinkUpdate{}
	if err := utils.UnmarshalJSON(data, &v3WorkflowsMsTeamsCreateMeetingLinkUpdate, "", true, nil); err == nil {
		u.V3WorkflowsMsTeamsCreateMeetingLinkUpdate = &v3WorkflowsMsTeamsCreateMeetingLinkUpdate
		u.Type = V3WorkflowsActionRequestUpdateTypeV3WorkflowsMsTeamsCreateMeetingLinkUpdate
		return nil
	}

	var anyVar any = nil
	if err := utils.UnmarshalJSON(data, &anyVar, "", true, nil); err == nil {
		u.Any = anyVar
		u.Type = V3WorkflowsActionRequestUpdateTypeAny
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for V3WorkflowsActionRequestUpdate", string(data))
}

func (u V3WorkflowsActionRequestUpdate) MarshalJSON() ([]byte, error) {
	if u.V3WorkflowsActionRequestUpdateSqAttachRunbooks != nil {
		return utils.MarshalJSON(u.V3WorkflowsActionRequestUpdateSqAttachRunbooks, "", true)
	}

	if u.V3WorkflowsSqMarkIncidentSLOAffectingUpdate != nil {
		return utils.MarshalJSON(u.V3WorkflowsSqMarkIncidentSLOAffectingUpdate, "", true)
	}

	if u.V3WorkflowsSqTriggerManualWebhookUpdate != nil {
		return utils.MarshalJSON(u.V3WorkflowsSqTriggerManualWebhookUpdate, "", true)
	}

	if u.V3WorkflowsUpdateIncidentPriorityUpdate != nil {
		return utils.MarshalJSON(u.V3WorkflowsUpdateIncidentPriorityUpdate, "", true)
	}

	if u.V3WorkflowsSqCreateStatusPageIssueUpdate != nil {
		return utils.MarshalJSON(u.V3WorkflowsSqCreateStatusPageIssueUpdate, "", true)
	}

	if u.V3WorkflowsSqAddIncidentNoteUpdate != nil {
		return utils.MarshalJSON(u.V3WorkflowsSqAddIncidentNoteUpdate, "", true)
	}

	if u.V3WorkflowsSlackArchiveChannelUpdate != nil {
		return utils.MarshalJSON(u.V3WorkflowsSlackArchiveChannelUpdate, "", true)
	}

	if u.V3WorkflowsSqAddCommunicationChannelUpdate != nil {
		return utils.MarshalJSON(u.V3WorkflowsSqAddCommunicationChannelUpdate, "", true)
	}

	if u.V3WorkflowsSlackMessageChannelUpdate != nil {
		return utils.MarshalJSON(u.V3WorkflowsSlackMessageChannelUpdate, "", true)
	}

	if u.V3WorkflowsSlackMessageUserUpdate != nil {
		return utils.MarshalJSON(u.V3WorkflowsSlackMessageUserUpdate, "", true)
	}

	if u.V3WorkflowsSqMakeHTTPCallUpdate != nil {
		return utils.MarshalJSON(u.V3WorkflowsSqMakeHTTPCallUpdate, "", true)
	}

	if u.V3WorkflowsSlackCreateIncidentChannelUpdate != nil {
		return utils.MarshalJSON(u.V3WorkflowsSlackCreateIncidentChannelUpdate, "", true)
	}

	if u.V3WorkflowsJiraCreateTicketUpdate != nil {
		return utils.MarshalJSON(u.V3WorkflowsJiraCreateTicketUpdate, "", true)
	}

	if u.V3WorkflowsMsTeamsMessageChannelUpdate != nil {
		return utils.MarshalJSON(u.V3WorkflowsMsTeamsMessageChannelUpdate, "", true)
	}

	if u.V3WorkflowsMsTeamsMessageUserUpdate != nil {
		return utils.MarshalJSON(u.V3WorkflowsMsTeamsMessageUserUpdate, "", true)
	}

	if u.V3WorkflowsSqSendEmailUpdate != nil {
		return utils.MarshalJSON(u.V3WorkflowsSqSendEmailUpdate, "", true)
	}

	if u.V3WorkflowsMsTeamsCreateMeetingLinkUpdate != nil {
		return utils.MarshalJSON(u.V3WorkflowsMsTeamsCreateMeetingLinkUpdate, "", true)
	}

	if u.Any != nil {
		return utils.MarshalJSON(u.Any, "", true)
	}

	return nil, errors.New("could not marshal union type V3WorkflowsActionRequestUpdate: all fields are null")
}
