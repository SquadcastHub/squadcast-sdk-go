// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

type BuildParameters struct {
	CircleJob string `json:"CIRCLE_JOB"`
}

func (o *BuildParameters) GetCircleJob() string {
	if o == nil {
		return ""
	}
	return o.CircleJob
}

type Previous struct {
	BuildNum        int64  `json:"build_num"`
	BuildTimeMillis int64  `json:"build_time_millis"`
	Status          string `json:"status"`
}

func (o *Previous) GetBuildNum() int64 {
	if o == nil {
		return 0
	}
	return o.BuildNum
}

func (o *Previous) GetBuildTimeMillis() int64 {
	if o == nil {
		return 0
	}
	return o.BuildTimeMillis
}

func (o *Previous) GetStatus() string {
	if o == nil {
		return ""
	}
	return o.Status
}

type PreviousSuccessfulBuild struct {
	BuildNum        int64  `json:"build_num"`
	BuildTimeMillis int64  `json:"build_time_millis"`
	Status          string `json:"status"`
}

func (o *PreviousSuccessfulBuild) GetBuildNum() int64 {
	if o == nil {
		return 0
	}
	return o.BuildNum
}

func (o *PreviousSuccessfulBuild) GetBuildTimeMillis() int64 {
	if o == nil {
		return 0
	}
	return o.BuildTimeMillis
}

func (o *PreviousSuccessfulBuild) GetStatus() string {
	if o == nil {
		return ""
	}
	return o.Status
}

type CircleciResponse struct {
	Username                string                  `json:"username"`
	Reponame                string                  `json:"reponame"`
	BuildNum                int64                   `json:"build_num"`
	BuildURL                string                  `json:"build_url"`
	BuildParameters         BuildParameters         `json:"build_parameters"`
	Previous                Previous                `json:"previous"`
	PreviousSuccessfulBuild PreviousSuccessfulBuild `json:"previous_successful_build"`
	RetryOf                 int64                   `json:"retry_of"`
	Body                    string                  `json:"body"`
	Subject                 string                  `json:"subject"`
	Status                  string                  `json:"status"`
	Lifecycle               string                  `json:"lifecycle"`
	Outcome                 string                  `json:"outcome"`
	CommitterDate           string                  `json:"committer_date"`
	CommitterEmail          string                  `json:"committer_email"`
	CommitterName           string                  `json:"committer_name"`
	AuthorDate              string                  `json:"author_date"`
	AuthorEmail             string                  `json:"author_email"`
	AuthorName              string                  `json:"author_name"`
	Branch                  string                  `json:"branch"`
	VcsType                 string                  `json:"vcs_type"`
	VcsURL                  string                  `json:"vcs_url"`
	StartTime               string                  `json:"start_time"`
	StopTime                string                  `json:"stop_time"`
}

func (o *CircleciResponse) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

func (o *CircleciResponse) GetReponame() string {
	if o == nil {
		return ""
	}
	return o.Reponame
}

func (o *CircleciResponse) GetBuildNum() int64 {
	if o == nil {
		return 0
	}
	return o.BuildNum
}

func (o *CircleciResponse) GetBuildURL() string {
	if o == nil {
		return ""
	}
	return o.BuildURL
}

func (o *CircleciResponse) GetBuildParameters() BuildParameters {
	if o == nil {
		return BuildParameters{}
	}
	return o.BuildParameters
}

func (o *CircleciResponse) GetPrevious() Previous {
	if o == nil {
		return Previous{}
	}
	return o.Previous
}

func (o *CircleciResponse) GetPreviousSuccessfulBuild() PreviousSuccessfulBuild {
	if o == nil {
		return PreviousSuccessfulBuild{}
	}
	return o.PreviousSuccessfulBuild
}

func (o *CircleciResponse) GetRetryOf() int64 {
	if o == nil {
		return 0
	}
	return o.RetryOf
}

func (o *CircleciResponse) GetBody() string {
	if o == nil {
		return ""
	}
	return o.Body
}

func (o *CircleciResponse) GetSubject() string {
	if o == nil {
		return ""
	}
	return o.Subject
}

func (o *CircleciResponse) GetStatus() string {
	if o == nil {
		return ""
	}
	return o.Status
}

func (o *CircleciResponse) GetLifecycle() string {
	if o == nil {
		return ""
	}
	return o.Lifecycle
}

func (o *CircleciResponse) GetOutcome() string {
	if o == nil {
		return ""
	}
	return o.Outcome
}

func (o *CircleciResponse) GetCommitterDate() string {
	if o == nil {
		return ""
	}
	return o.CommitterDate
}

func (o *CircleciResponse) GetCommitterEmail() string {
	if o == nil {
		return ""
	}
	return o.CommitterEmail
}

func (o *CircleciResponse) GetCommitterName() string {
	if o == nil {
		return ""
	}
	return o.CommitterName
}

func (o *CircleciResponse) GetAuthorDate() string {
	if o == nil {
		return ""
	}
	return o.AuthorDate
}

func (o *CircleciResponse) GetAuthorEmail() string {
	if o == nil {
		return ""
	}
	return o.AuthorEmail
}

func (o *CircleciResponse) GetAuthorName() string {
	if o == nil {
		return ""
	}
	return o.AuthorName
}

func (o *CircleciResponse) GetBranch() string {
	if o == nil {
		return ""
	}
	return o.Branch
}

func (o *CircleciResponse) GetVcsType() string {
	if o == nil {
		return ""
	}
	return o.VcsType
}

func (o *CircleciResponse) GetVcsURL() string {
	if o == nil {
		return ""
	}
	return o.VcsURL
}

func (o *CircleciResponse) GetStartTime() string {
	if o == nil {
		return ""
	}
	return o.StartTime
}

func (o *CircleciResponse) GetStopTime() string {
	if o == nil {
		return ""
	}
	return o.StopTime
}

// V3IncidentsIncidentActionsCircleCIRebuildResponse - Represents the response structure for rebuilding a project in CircleCI.
type V3IncidentsIncidentActionsCircleCIRebuildResponse struct {
	ActionID         string           `json:"action_id"`
	CircleciResponse CircleciResponse `json:"circleci_response"`
}

func (o *V3IncidentsIncidentActionsCircleCIRebuildResponse) GetActionID() string {
	if o == nil {
		return ""
	}
	return o.ActionID
}

func (o *V3IncidentsIncidentActionsCircleCIRebuildResponse) GetCircleciResponse() CircleciResponse {
	if o == nil {
		return CircleciResponse{}
	}
	return o.CircleciResponse
}
