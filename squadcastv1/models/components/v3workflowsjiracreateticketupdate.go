// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/SquadcastHub/squadcast-sdk-go/squadcastv1/internal/utils"
)

type V3WorkflowsJiraCreateTicketUpdateName string

const (
	V3WorkflowsJiraCreateTicketUpdateNameJiraCreateTicket V3WorkflowsJiraCreateTicketUpdateName = "jira_create_ticket"
)

func (e V3WorkflowsJiraCreateTicketUpdateName) ToPointer() *V3WorkflowsJiraCreateTicketUpdateName {
	return &e
}
func (e *V3WorkflowsJiraCreateTicketUpdateName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "jira_create_ticket":
		*e = V3WorkflowsJiraCreateTicketUpdateName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for V3WorkflowsJiraCreateTicketUpdateName: %v", v)
	}
}

type V3WorkflowsJiraCreateTicketUpdateData struct {
	Account     *string `json:"account,omitempty"`
	Project     *string `json:"project,omitempty"`
	IssueType   *string `json:"issue_type,omitempty"`
	Title       *string `json:"title,omitempty"`
	Description *string `json:"description,omitempty"`
}

func (v V3WorkflowsJiraCreateTicketUpdateData) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *V3WorkflowsJiraCreateTicketUpdateData) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (v *V3WorkflowsJiraCreateTicketUpdateData) GetAccount() *string {
	if v == nil {
		return nil
	}
	return v.Account
}

func (v *V3WorkflowsJiraCreateTicketUpdateData) GetProject() *string {
	if v == nil {
		return nil
	}
	return v.Project
}

func (v *V3WorkflowsJiraCreateTicketUpdateData) GetIssueType() *string {
	if v == nil {
		return nil
	}
	return v.IssueType
}

func (v *V3WorkflowsJiraCreateTicketUpdateData) GetTitle() *string {
	if v == nil {
		return nil
	}
	return v.Title
}

func (v *V3WorkflowsJiraCreateTicketUpdateData) GetDescription() *string {
	if v == nil {
		return nil
	}
	return v.Description
}

type V3WorkflowsJiraCreateTicketUpdate struct {
	Name V3WorkflowsJiraCreateTicketUpdateName  `json:"name"`
	Data *V3WorkflowsJiraCreateTicketUpdateData `json:"data,omitempty"`
}

func (v V3WorkflowsJiraCreateTicketUpdate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *V3WorkflowsJiraCreateTicketUpdate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, []string{"name"}); err != nil {
		return err
	}
	return nil
}

func (v *V3WorkflowsJiraCreateTicketUpdate) GetName() V3WorkflowsJiraCreateTicketUpdateName {
	if v == nil {
		return V3WorkflowsJiraCreateTicketUpdateName("")
	}
	return v.Name
}

func (v *V3WorkflowsJiraCreateTicketUpdate) GetData() *V3WorkflowsJiraCreateTicketUpdateData {
	if v == nil {
		return nil
	}
	return v.Data
}
