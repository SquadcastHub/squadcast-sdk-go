// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type Condition string

const (
	ConditionAnd Condition = "and"
	ConditionOr  Condition = "or"
)

func (e Condition) ToPointer() *Condition {
	return &e
}
func (e *Condition) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "and":
		fallthrough
	case "or":
		*e = Condition(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Condition: %v", v)
	}
}

type V3WorkflowsWorkflowFilters struct {
	Type      *string                      `json:"type,omitempty"`
	Key       *string                      `json:"key,omitempty"`
	Value     *string                      `json:"value,omitempty"`
	Condition *Condition                   `json:"condition,omitempty"`
	Filters   []V3WorkflowsWorkflowFilters `json:"filters,omitempty"`
}

func (o *V3WorkflowsWorkflowFilters) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *V3WorkflowsWorkflowFilters) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *V3WorkflowsWorkflowFilters) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *V3WorkflowsWorkflowFilters) GetCondition() *Condition {
	if o == nil {
		return nil
	}
	return o.Condition
}

func (o *V3WorkflowsWorkflowFilters) GetFilters() []V3WorkflowsWorkflowFilters {
	if o == nil {
		return nil
	}
	return o.Filters
}
