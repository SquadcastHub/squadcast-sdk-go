// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/SquadcastHub/squadcast-sdk-go/squadcastv1/internal/utils"
)

type V3WorkflowsJiraCreateTicketName string

const (
	V3WorkflowsJiraCreateTicketNameJiraCreateTicket V3WorkflowsJiraCreateTicketName = "jira_create_ticket"
)

func (e V3WorkflowsJiraCreateTicketName) ToPointer() *V3WorkflowsJiraCreateTicketName {
	return &e
}
func (e *V3WorkflowsJiraCreateTicketName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "jira_create_ticket":
		*e = V3WorkflowsJiraCreateTicketName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for V3WorkflowsJiraCreateTicketName: %v", v)
	}
}

type V3WorkflowsJiraCreateTicketData struct {
	Account     string `json:"account"`
	Project     string `json:"project"`
	IssueType   string `json:"issue_type"`
	Title       string `json:"title"`
	Description string `json:"description"`
}

func (v V3WorkflowsJiraCreateTicketData) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *V3WorkflowsJiraCreateTicketData) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, []string{"account", "project", "issue_type", "title", "description"}); err != nil {
		return err
	}
	return nil
}

func (v *V3WorkflowsJiraCreateTicketData) GetAccount() string {
	if v == nil {
		return ""
	}
	return v.Account
}

func (v *V3WorkflowsJiraCreateTicketData) GetProject() string {
	if v == nil {
		return ""
	}
	return v.Project
}

func (v *V3WorkflowsJiraCreateTicketData) GetIssueType() string {
	if v == nil {
		return ""
	}
	return v.IssueType
}

func (v *V3WorkflowsJiraCreateTicketData) GetTitle() string {
	if v == nil {
		return ""
	}
	return v.Title
}

func (v *V3WorkflowsJiraCreateTicketData) GetDescription() string {
	if v == nil {
		return ""
	}
	return v.Description
}

type V3WorkflowsJiraCreateTicket struct {
	Name V3WorkflowsJiraCreateTicketName `json:"name"`
	Data V3WorkflowsJiraCreateTicketData `json:"data"`
}

func (v V3WorkflowsJiraCreateTicket) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *V3WorkflowsJiraCreateTicket) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, []string{"name", "data"}); err != nil {
		return err
	}
	return nil
}

func (v *V3WorkflowsJiraCreateTicket) GetName() V3WorkflowsJiraCreateTicketName {
	if v == nil {
		return V3WorkflowsJiraCreateTicketName("")
	}
	return v.Name
}

func (v *V3WorkflowsJiraCreateTicket) GetData() V3WorkflowsJiraCreateTicketData {
	if v == nil {
		return V3WorkflowsJiraCreateTicketData{}
	}
	return v.Data
}
