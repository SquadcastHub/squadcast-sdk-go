// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type V3WorkflowsWorkflowTrigger string

const (
	V3WorkflowsWorkflowTriggerIncidentTriggered       V3WorkflowsWorkflowTrigger = "incident_triggered"
	V3WorkflowsWorkflowTriggerIncidentAcknowledged    V3WorkflowsWorkflowTrigger = "incident_acknowledged"
	V3WorkflowsWorkflowTriggerIncidentResolved        V3WorkflowsWorkflowTrigger = "incident_resolved"
	V3WorkflowsWorkflowTriggerIncidentReassigned      V3WorkflowsWorkflowTrigger = "incident_reassigned"
	V3WorkflowsWorkflowTriggerIncidentTagUpdated      V3WorkflowsWorkflowTrigger = "incident_tag_updated"
	V3WorkflowsWorkflowTriggerIncidentPriorityUpdated V3WorkflowsWorkflowTrigger = "incident_priority_updated"
	V3WorkflowsWorkflowTriggerIncidentNoteAdded       V3WorkflowsWorkflowTrigger = "incident_note_added"
)

func (e V3WorkflowsWorkflowTrigger) ToPointer() *V3WorkflowsWorkflowTrigger {
	return &e
}
func (e *V3WorkflowsWorkflowTrigger) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "incident_triggered":
		fallthrough
	case "incident_acknowledged":
		fallthrough
	case "incident_resolved":
		fallthrough
	case "incident_reassigned":
		fallthrough
	case "incident_tag_updated":
		fallthrough
	case "incident_priority_updated":
		fallthrough
	case "incident_note_added":
		*e = V3WorkflowsWorkflowTrigger(v)
		return nil
	default:
		return fmt.Errorf("invalid value for V3WorkflowsWorkflowTrigger: %v", v)
	}
}
