// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

// V3EscalationPoliciesEscalationPolicyResponse - Represents an Escalation Policy in the system.
type V3EscalationPoliciesEscalationPolicyResponse struct {
	// The unique identifier for the escalation policy.
	ID string `json:"id"`
	// The name of the escalation policy.
	Name string `json:"name"`
	// A description of the escalation policy.
	Description string `json:"description"`
	// The ID of the organization this policy belongs to.
	OrganizationID string `json:"organization_id"`
	// The number of times the entire policy should be repeated.
	Repetition int `json:"repetition"`
	// The time in minutes after which the policy should be repeated.
	RepeatAfter int `json:"repeat_after"`
	// The rules that define the escalation steps.
	Rules []V3EscalationPoliciesEscalationPolicyRule `json:"rules"`
	// The URL-friendly slug for the policy name.
	Slug string `json:"slug"`
	// Enable or disable incident reminders.
	EnableIncidentReminders bool `json:"enable_incident_reminders"`
	// The rules for incident reminders.
	IncidentReminderRules []V3EscalationPoliciesIncidentReminderRule `json:"incident_reminder_rules"`
	// Enable or disable automatic incident re-triggering.
	EnableIncidentRetrigger bool `json:"enable_incident_retrigger"`
	// The time in hours after which an incident should be re-triggered.
	RetriggerAfter int `json:"retrigger_after"`
	// The owner of the entity.
	EntityOwner CommonV3EntityOwner `json:"entity_owner"`
	// The RBAC owner of the policy (typically a team).
	Owner CommonV3RBACOwner `json:"owner"`
	// Access control list for this policy.
	AccessControl []CommonV3RBACEntityPermission `json:"access_control"`
}

func (o *V3EscalationPoliciesEscalationPolicyResponse) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *V3EscalationPoliciesEscalationPolicyResponse) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *V3EscalationPoliciesEscalationPolicyResponse) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *V3EscalationPoliciesEscalationPolicyResponse) GetOrganizationID() string {
	if o == nil {
		return ""
	}
	return o.OrganizationID
}

func (o *V3EscalationPoliciesEscalationPolicyResponse) GetRepetition() int {
	if o == nil {
		return 0
	}
	return o.Repetition
}

func (o *V3EscalationPoliciesEscalationPolicyResponse) GetRepeatAfter() int {
	if o == nil {
		return 0
	}
	return o.RepeatAfter
}

func (o *V3EscalationPoliciesEscalationPolicyResponse) GetRules() []V3EscalationPoliciesEscalationPolicyRule {
	if o == nil {
		return []V3EscalationPoliciesEscalationPolicyRule{}
	}
	return o.Rules
}

func (o *V3EscalationPoliciesEscalationPolicyResponse) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *V3EscalationPoliciesEscalationPolicyResponse) GetEnableIncidentReminders() bool {
	if o == nil {
		return false
	}
	return o.EnableIncidentReminders
}

func (o *V3EscalationPoliciesEscalationPolicyResponse) GetIncidentReminderRules() []V3EscalationPoliciesIncidentReminderRule {
	if o == nil {
		return []V3EscalationPoliciesIncidentReminderRule{}
	}
	return o.IncidentReminderRules
}

func (o *V3EscalationPoliciesEscalationPolicyResponse) GetEnableIncidentRetrigger() bool {
	if o == nil {
		return false
	}
	return o.EnableIncidentRetrigger
}

func (o *V3EscalationPoliciesEscalationPolicyResponse) GetRetriggerAfter() int {
	if o == nil {
		return 0
	}
	return o.RetriggerAfter
}

func (o *V3EscalationPoliciesEscalationPolicyResponse) GetEntityOwner() CommonV3EntityOwner {
	if o == nil {
		return CommonV3EntityOwner{}
	}
	return o.EntityOwner
}

func (o *V3EscalationPoliciesEscalationPolicyResponse) GetOwner() CommonV3RBACOwner {
	if o == nil {
		return CommonV3RBACOwner{}
	}
	return o.Owner
}

func (o *V3EscalationPoliciesEscalationPolicyResponse) GetAccessControl() []CommonV3RBACEntityPermission {
	if o == nil {
		return []CommonV3RBACEntityPermission{}
	}
	return o.AccessControl
}
