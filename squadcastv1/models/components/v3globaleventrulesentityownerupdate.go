// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type V3GlobalEventRulesEntityOwnerUpdateType string

const (
	V3GlobalEventRulesEntityOwnerUpdateTypeTeam  V3GlobalEventRulesEntityOwnerUpdateType = "team"
	V3GlobalEventRulesEntityOwnerUpdateTypeUser  V3GlobalEventRulesEntityOwnerUpdateType = "user"
	V3GlobalEventRulesEntityOwnerUpdateTypeSquad V3GlobalEventRulesEntityOwnerUpdateType = "squad"
)

func (e V3GlobalEventRulesEntityOwnerUpdateType) ToPointer() *V3GlobalEventRulesEntityOwnerUpdateType {
	return &e
}
func (e *V3GlobalEventRulesEntityOwnerUpdateType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "team":
		fallthrough
	case "user":
		fallthrough
	case "squad":
		*e = V3GlobalEventRulesEntityOwnerUpdateType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for V3GlobalEventRulesEntityOwnerUpdateType: %v", v)
	}
}

type V3GlobalEventRulesEntityOwnerUpdate struct {
	ID   *string                                  `json:"id,omitempty"`
	Type *V3GlobalEventRulesEntityOwnerUpdateType `json:"type,omitempty"`
}

func (o *V3GlobalEventRulesEntityOwnerUpdate) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *V3GlobalEventRulesEntityOwnerUpdate) GetType() *V3GlobalEventRulesEntityOwnerUpdateType {
	if o == nil {
		return nil
	}
	return o.Type
}
