// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/SquadcastHub/squadcast-sdk-go/squadcastv1/internal/utils"
)

type V3WorkflowsCommunicationChannelType string

const (
	V3WorkflowsCommunicationChannelTypeChatRoom        V3WorkflowsCommunicationChannelType = "chat_room"
	V3WorkflowsCommunicationChannelTypeVideoConference V3WorkflowsCommunicationChannelType = "video_conference"
	V3WorkflowsCommunicationChannelTypeOther           V3WorkflowsCommunicationChannelType = "other"
)

func (e V3WorkflowsCommunicationChannelType) ToPointer() *V3WorkflowsCommunicationChannelType {
	return &e
}
func (e *V3WorkflowsCommunicationChannelType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "chat_room":
		fallthrough
	case "video_conference":
		fallthrough
	case "other":
		*e = V3WorkflowsCommunicationChannelType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for V3WorkflowsCommunicationChannelType: %v", v)
	}
}

type V3WorkflowsCommunicationChannel struct {
	DisplayText string                              `json:"display_text"`
	Link        string                              `json:"link"`
	Type        V3WorkflowsCommunicationChannelType `json:"type"`
}

func (v V3WorkflowsCommunicationChannel) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *V3WorkflowsCommunicationChannel) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, []string{"display_text", "link", "type"}); err != nil {
		return err
	}
	return nil
}

func (o *V3WorkflowsCommunicationChannel) GetDisplayText() string {
	if o == nil {
		return ""
	}
	return o.DisplayText
}

func (o *V3WorkflowsCommunicationChannel) GetLink() string {
	if o == nil {
		return ""
	}
	return o.Link
}

func (o *V3WorkflowsCommunicationChannel) GetType() V3WorkflowsCommunicationChannelType {
	if o == nil {
		return V3WorkflowsCommunicationChannelType("")
	}
	return o.Type
}
