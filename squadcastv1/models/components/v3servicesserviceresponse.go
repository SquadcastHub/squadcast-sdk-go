// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/SquadcastHub/squadcast-sdk-go/internal/utils"
	"time"
)

type Config struct {
	DedupKeyEnabled bool `json:"dedup_key_enabled"`
}

func (o *Config) GetDedupKeyEnabled() bool {
	if o == nil {
		return false
	}
	return o.DedupKeyEnabled
}

type V3ServicesServiceResponse struct {
	ID                 string   `json:"id"`
	Name               string   `json:"name"`
	Slug               string   `json:"slug"`
	Email              string   `json:"email"`
	EscalationPolicyID string   `json:"escalation_policy_id"`
	OrganizationID     string   `json:"organization_id"`
	APIKey             string   `json:"api_key"`
	Description        string   `json:"description"`
	Depends            []string `json:"depends,omitempty"`
	// Represents the RBAC owner of an entity.
	Owner         CommonV3RBACOwner       `json:"owner"`
	OnMaintenance *bool                   `json:"on_maintenance,omitempty"`
	Slack         *V3ServicesServiceSlack `json:"slack,omitempty"`
	// Represents the basic details of an Escalation Policy for a service.
	EscalationPolicy                *V3ServicesEscalationPolicyBasic  `json:"escalation_policy,omitempty"`
	JiraCloud                       *V3ServicesJiraCloudExtension     `json:"jira_cloud,omitempty"`
	Maintainer                      V3ServicesServiceMaintainer       `json:"maintainer"`
	Tags                            []V3ServicesServiceTag            `json:"tags"`
	AutoPauseTransientAlertsConfig  V3ServicesAPTAConfig              `json:"auto_pause_transient_alerts_config"`
	IntelligentAlertsGroupingConfig V3ServicesIAGConfig               `json:"intelligent_alerts_grouping_config"`
	DelayNotificationConfig         V3ServicesNotificationDelayConfig `json:"delay_notification_config"`
	Config                          Config                            `json:"config"`
	CreatedAt                       time.Time                         `json:"created_at"`
	UpdatedAt                       time.Time                         `json:"updated_at"`
}

func (v V3ServicesServiceResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *V3ServicesServiceResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, []string{"id", "name", "slug", "email", "escalation_policy_id", "organization_id", "api_key", "description", "owner", "maintainer", "tags", "auto_pause_transient_alerts_config", "intelligent_alerts_grouping_config", "delay_notification_config", "config", "created_at", "updated_at"}); err != nil {
		return err
	}
	return nil
}

func (o *V3ServicesServiceResponse) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *V3ServicesServiceResponse) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *V3ServicesServiceResponse) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *V3ServicesServiceResponse) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *V3ServicesServiceResponse) GetEscalationPolicyID() string {
	if o == nil {
		return ""
	}
	return o.EscalationPolicyID
}

func (o *V3ServicesServiceResponse) GetOrganizationID() string {
	if o == nil {
		return ""
	}
	return o.OrganizationID
}

func (o *V3ServicesServiceResponse) GetAPIKey() string {
	if o == nil {
		return ""
	}
	return o.APIKey
}

func (o *V3ServicesServiceResponse) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *V3ServicesServiceResponse) GetDepends() []string {
	if o == nil {
		return nil
	}
	return o.Depends
}

func (o *V3ServicesServiceResponse) GetOwner() CommonV3RBACOwner {
	if o == nil {
		return CommonV3RBACOwner{}
	}
	return o.Owner
}

func (o *V3ServicesServiceResponse) GetOnMaintenance() *bool {
	if o == nil {
		return nil
	}
	return o.OnMaintenance
}

func (o *V3ServicesServiceResponse) GetSlack() *V3ServicesServiceSlack {
	if o == nil {
		return nil
	}
	return o.Slack
}

func (o *V3ServicesServiceResponse) GetEscalationPolicy() *V3ServicesEscalationPolicyBasic {
	if o == nil {
		return nil
	}
	return o.EscalationPolicy
}

func (o *V3ServicesServiceResponse) GetJiraCloud() *V3ServicesJiraCloudExtension {
	if o == nil {
		return nil
	}
	return o.JiraCloud
}

func (o *V3ServicesServiceResponse) GetMaintainer() V3ServicesServiceMaintainer {
	if o == nil {
		return V3ServicesServiceMaintainer{}
	}
	return o.Maintainer
}

func (o *V3ServicesServiceResponse) GetTags() []V3ServicesServiceTag {
	if o == nil {
		return []V3ServicesServiceTag{}
	}
	return o.Tags
}

func (o *V3ServicesServiceResponse) GetAutoPauseTransientAlertsConfig() V3ServicesAPTAConfig {
	if o == nil {
		return V3ServicesAPTAConfig{}
	}
	return o.AutoPauseTransientAlertsConfig
}

func (o *V3ServicesServiceResponse) GetIntelligentAlertsGroupingConfig() V3ServicesIAGConfig {
	if o == nil {
		return V3ServicesIAGConfig{}
	}
	return o.IntelligentAlertsGroupingConfig
}

func (o *V3ServicesServiceResponse) GetDelayNotificationConfig() V3ServicesNotificationDelayConfig {
	if o == nil {
		return V3ServicesNotificationDelayConfig{}
	}
	return o.DelayNotificationConfig
}

func (o *V3ServicesServiceResponse) GetConfig() Config {
	if o == nil {
		return Config{}
	}
	return o.Config
}

func (o *V3ServicesServiceResponse) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *V3ServicesServiceResponse) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}
