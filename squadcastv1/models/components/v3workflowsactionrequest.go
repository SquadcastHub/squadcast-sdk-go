// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/SquadcastHub/squadcast-sdk-go/squadcastv1/internal/utils"
)

type V3WorkflowsActionRequestName string

const (
	V3WorkflowsActionRequestNameSqAttachRunbooks V3WorkflowsActionRequestName = "sq_attach_runbooks"
)

func (e V3WorkflowsActionRequestName) ToPointer() *V3WorkflowsActionRequestName {
	return &e
}
func (e *V3WorkflowsActionRequestName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "sq_attach_runbooks":
		*e = V3WorkflowsActionRequestName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for V3WorkflowsActionRequestName: %v", v)
	}
}

type V3WorkflowsActionRequestData struct {
	Runbooks []string `json:"runbooks"`
}

func (v V3WorkflowsActionRequestData) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *V3WorkflowsActionRequestData) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, []string{"runbooks"}); err != nil {
		return err
	}
	return nil
}

func (o *V3WorkflowsActionRequestData) GetRunbooks() []string {
	if o == nil {
		return []string{}
	}
	return o.Runbooks
}

type V3WorkflowsActionRequestSqAttachRunbooks struct {
	Name V3WorkflowsActionRequestName `json:"name"`
	Data V3WorkflowsActionRequestData `json:"data"`
}

func (v V3WorkflowsActionRequestSqAttachRunbooks) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *V3WorkflowsActionRequestSqAttachRunbooks) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, []string{"name", "data"}); err != nil {
		return err
	}
	return nil
}

func (o *V3WorkflowsActionRequestSqAttachRunbooks) GetName() V3WorkflowsActionRequestName {
	if o == nil {
		return V3WorkflowsActionRequestName("")
	}
	return o.Name
}

func (o *V3WorkflowsActionRequestSqAttachRunbooks) GetData() V3WorkflowsActionRequestData {
	if o == nil {
		return V3WorkflowsActionRequestData{}
	}
	return o.Data
}

type V3WorkflowsActionRequestType string

const (
	V3WorkflowsActionRequestTypeV3WorkflowsActionRequestSqAttachRunbooks V3WorkflowsActionRequestType = "V3.Workflows.ActionRequest_SqAttachRunbooks"
	V3WorkflowsActionRequestTypeV3WorkflowsSqMarkIncidentSLOAffecting    V3WorkflowsActionRequestType = "V3.Workflows.SqMarkIncidentSLOAffecting"
	V3WorkflowsActionRequestTypeV3WorkflowsSqTriggerManualWebhook        V3WorkflowsActionRequestType = "V3.Workflows.SqTriggerManualWebhook"
	V3WorkflowsActionRequestTypeV3WorkflowsUpdateIncidentPriority        V3WorkflowsActionRequestType = "V3.Workflows.UpdateIncidentPriority"
	V3WorkflowsActionRequestTypeV3WorkflowsSqCreateStatusPageIssue       V3WorkflowsActionRequestType = "V3.Workflows.SqCreateStatusPageIssue"
	V3WorkflowsActionRequestTypeV3WorkflowsSqAddIncidentNote             V3WorkflowsActionRequestType = "V3.Workflows.SqAddIncidentNote"
	V3WorkflowsActionRequestTypeV3WorkflowsSlackArchiveChannel           V3WorkflowsActionRequestType = "V3.Workflows.SlackArchiveChannel"
	V3WorkflowsActionRequestTypeV3WorkflowsSqAddCommunicationChannel     V3WorkflowsActionRequestType = "V3.Workflows.SqAddCommunicationChannel"
	V3WorkflowsActionRequestTypeV3WorkflowsSlackMessageChannel           V3WorkflowsActionRequestType = "V3.Workflows.SlackMessageChannel"
	V3WorkflowsActionRequestTypeV3WorkflowsSlackMessageUser              V3WorkflowsActionRequestType = "V3.Workflows.SlackMessageUser"
	V3WorkflowsActionRequestTypeV3WorkflowsSqMakeHTTPCall                V3WorkflowsActionRequestType = "V3.Workflows.SqMakeHTTPCall"
	V3WorkflowsActionRequestTypeV3WorkflowsSlackCreateIncidentChannel    V3WorkflowsActionRequestType = "V3.Workflows.SlackCreateIncidentChannel"
	V3WorkflowsActionRequestTypeV3WorkflowsJiraCreateTicket              V3WorkflowsActionRequestType = "V3.Workflows.JiraCreateTicket"
	V3WorkflowsActionRequestTypeV3WorkflowsMsTeamsMessageChannel         V3WorkflowsActionRequestType = "V3.Workflows.MsTeamsMessageChannel"
	V3WorkflowsActionRequestTypeV3WorkflowsMsTeamsMessageUser            V3WorkflowsActionRequestType = "V3.Workflows.MsTeamsMessageUser"
	V3WorkflowsActionRequestTypeV3WorkflowsSqSendEmail                   V3WorkflowsActionRequestType = "V3.Workflows.SqSendEmail"
	V3WorkflowsActionRequestTypeV3WorkflowsMsTeamsCreateMeetingLink      V3WorkflowsActionRequestType = "V3.Workflows.MsTeamsCreateMeetingLink"
	V3WorkflowsActionRequestTypeAny                                      V3WorkflowsActionRequestType = "any"
)

type V3WorkflowsActionRequest struct {
	V3WorkflowsActionRequestSqAttachRunbooks *V3WorkflowsActionRequestSqAttachRunbooks `queryParam:"inline" name:"V3_Workflows_ActionRequest"`
	V3WorkflowsSqMarkIncidentSLOAffecting    *V3WorkflowsSqMarkIncidentSLOAffecting    `queryParam:"inline" name:"V3_Workflows_ActionRequest"`
	V3WorkflowsSqTriggerManualWebhook        *V3WorkflowsSqTriggerManualWebhook        `queryParam:"inline" name:"V3_Workflows_ActionRequest"`
	V3WorkflowsUpdateIncidentPriority        *V3WorkflowsUpdateIncidentPriority        `queryParam:"inline" name:"V3_Workflows_ActionRequest"`
	V3WorkflowsSqCreateStatusPageIssue       *V3WorkflowsSqCreateStatusPageIssue       `queryParam:"inline" name:"V3_Workflows_ActionRequest"`
	V3WorkflowsSqAddIncidentNote             *V3WorkflowsSqAddIncidentNote             `queryParam:"inline" name:"V3_Workflows_ActionRequest"`
	V3WorkflowsSlackArchiveChannel           *V3WorkflowsSlackArchiveChannel           `queryParam:"inline" name:"V3_Workflows_ActionRequest"`
	V3WorkflowsSqAddCommunicationChannel     *V3WorkflowsSqAddCommunicationChannel     `queryParam:"inline" name:"V3_Workflows_ActionRequest"`
	V3WorkflowsSlackMessageChannel           *V3WorkflowsSlackMessageChannel           `queryParam:"inline" name:"V3_Workflows_ActionRequest"`
	V3WorkflowsSlackMessageUser              *V3WorkflowsSlackMessageUser              `queryParam:"inline" name:"V3_Workflows_ActionRequest"`
	V3WorkflowsSqMakeHTTPCall                *V3WorkflowsSqMakeHTTPCall                `queryParam:"inline" name:"V3_Workflows_ActionRequest"`
	V3WorkflowsSlackCreateIncidentChannel    *V3WorkflowsSlackCreateIncidentChannel    `queryParam:"inline" name:"V3_Workflows_ActionRequest"`
	V3WorkflowsJiraCreateTicket              *V3WorkflowsJiraCreateTicket              `queryParam:"inline" name:"V3_Workflows_ActionRequest"`
	V3WorkflowsMsTeamsMessageChannel         *V3WorkflowsMsTeamsMessageChannel         `queryParam:"inline" name:"V3_Workflows_ActionRequest"`
	V3WorkflowsMsTeamsMessageUser            *V3WorkflowsMsTeamsMessageUser            `queryParam:"inline" name:"V3_Workflows_ActionRequest"`
	V3WorkflowsSqSendEmail                   *V3WorkflowsSqSendEmail                   `queryParam:"inline" name:"V3_Workflows_ActionRequest"`
	V3WorkflowsMsTeamsCreateMeetingLink      *V3WorkflowsMsTeamsCreateMeetingLink      `queryParam:"inline" name:"V3_Workflows_ActionRequest"`
	Any                                      any                                       `queryParam:"inline" name:"V3_Workflows_ActionRequest"`

	Type V3WorkflowsActionRequestType
}

func CreateV3WorkflowsActionRequestV3WorkflowsActionRequestSqAttachRunbooks(v3WorkflowsActionRequestSqAttachRunbooks V3WorkflowsActionRequestSqAttachRunbooks) V3WorkflowsActionRequest {
	typ := V3WorkflowsActionRequestTypeV3WorkflowsActionRequestSqAttachRunbooks

	return V3WorkflowsActionRequest{
		V3WorkflowsActionRequestSqAttachRunbooks: &v3WorkflowsActionRequestSqAttachRunbooks,
		Type:                                     typ,
	}
}

func CreateV3WorkflowsActionRequestV3WorkflowsSqMarkIncidentSLOAffecting(v3WorkflowsSqMarkIncidentSLOAffecting V3WorkflowsSqMarkIncidentSLOAffecting) V3WorkflowsActionRequest {
	typ := V3WorkflowsActionRequestTypeV3WorkflowsSqMarkIncidentSLOAffecting

	return V3WorkflowsActionRequest{
		V3WorkflowsSqMarkIncidentSLOAffecting: &v3WorkflowsSqMarkIncidentSLOAffecting,
		Type:                                  typ,
	}
}

func CreateV3WorkflowsActionRequestV3WorkflowsSqTriggerManualWebhook(v3WorkflowsSqTriggerManualWebhook V3WorkflowsSqTriggerManualWebhook) V3WorkflowsActionRequest {
	typ := V3WorkflowsActionRequestTypeV3WorkflowsSqTriggerManualWebhook

	return V3WorkflowsActionRequest{
		V3WorkflowsSqTriggerManualWebhook: &v3WorkflowsSqTriggerManualWebhook,
		Type:                              typ,
	}
}

func CreateV3WorkflowsActionRequestV3WorkflowsUpdateIncidentPriority(v3WorkflowsUpdateIncidentPriority V3WorkflowsUpdateIncidentPriority) V3WorkflowsActionRequest {
	typ := V3WorkflowsActionRequestTypeV3WorkflowsUpdateIncidentPriority

	return V3WorkflowsActionRequest{
		V3WorkflowsUpdateIncidentPriority: &v3WorkflowsUpdateIncidentPriority,
		Type:                              typ,
	}
}

func CreateV3WorkflowsActionRequestV3WorkflowsSqCreateStatusPageIssue(v3WorkflowsSqCreateStatusPageIssue V3WorkflowsSqCreateStatusPageIssue) V3WorkflowsActionRequest {
	typ := V3WorkflowsActionRequestTypeV3WorkflowsSqCreateStatusPageIssue

	return V3WorkflowsActionRequest{
		V3WorkflowsSqCreateStatusPageIssue: &v3WorkflowsSqCreateStatusPageIssue,
		Type:                               typ,
	}
}

func CreateV3WorkflowsActionRequestV3WorkflowsSqAddIncidentNote(v3WorkflowsSqAddIncidentNote V3WorkflowsSqAddIncidentNote) V3WorkflowsActionRequest {
	typ := V3WorkflowsActionRequestTypeV3WorkflowsSqAddIncidentNote

	return V3WorkflowsActionRequest{
		V3WorkflowsSqAddIncidentNote: &v3WorkflowsSqAddIncidentNote,
		Type:                         typ,
	}
}

func CreateV3WorkflowsActionRequestV3WorkflowsSlackArchiveChannel(v3WorkflowsSlackArchiveChannel V3WorkflowsSlackArchiveChannel) V3WorkflowsActionRequest {
	typ := V3WorkflowsActionRequestTypeV3WorkflowsSlackArchiveChannel

	return V3WorkflowsActionRequest{
		V3WorkflowsSlackArchiveChannel: &v3WorkflowsSlackArchiveChannel,
		Type:                           typ,
	}
}

func CreateV3WorkflowsActionRequestV3WorkflowsSqAddCommunicationChannel(v3WorkflowsSqAddCommunicationChannel V3WorkflowsSqAddCommunicationChannel) V3WorkflowsActionRequest {
	typ := V3WorkflowsActionRequestTypeV3WorkflowsSqAddCommunicationChannel

	return V3WorkflowsActionRequest{
		V3WorkflowsSqAddCommunicationChannel: &v3WorkflowsSqAddCommunicationChannel,
		Type:                                 typ,
	}
}

func CreateV3WorkflowsActionRequestV3WorkflowsSlackMessageChannel(v3WorkflowsSlackMessageChannel V3WorkflowsSlackMessageChannel) V3WorkflowsActionRequest {
	typ := V3WorkflowsActionRequestTypeV3WorkflowsSlackMessageChannel

	return V3WorkflowsActionRequest{
		V3WorkflowsSlackMessageChannel: &v3WorkflowsSlackMessageChannel,
		Type:                           typ,
	}
}

func CreateV3WorkflowsActionRequestV3WorkflowsSlackMessageUser(v3WorkflowsSlackMessageUser V3WorkflowsSlackMessageUser) V3WorkflowsActionRequest {
	typ := V3WorkflowsActionRequestTypeV3WorkflowsSlackMessageUser

	return V3WorkflowsActionRequest{
		V3WorkflowsSlackMessageUser: &v3WorkflowsSlackMessageUser,
		Type:                        typ,
	}
}

func CreateV3WorkflowsActionRequestV3WorkflowsSqMakeHTTPCall(v3WorkflowsSqMakeHTTPCall V3WorkflowsSqMakeHTTPCall) V3WorkflowsActionRequest {
	typ := V3WorkflowsActionRequestTypeV3WorkflowsSqMakeHTTPCall

	return V3WorkflowsActionRequest{
		V3WorkflowsSqMakeHTTPCall: &v3WorkflowsSqMakeHTTPCall,
		Type:                      typ,
	}
}

func CreateV3WorkflowsActionRequestV3WorkflowsSlackCreateIncidentChannel(v3WorkflowsSlackCreateIncidentChannel V3WorkflowsSlackCreateIncidentChannel) V3WorkflowsActionRequest {
	typ := V3WorkflowsActionRequestTypeV3WorkflowsSlackCreateIncidentChannel

	return V3WorkflowsActionRequest{
		V3WorkflowsSlackCreateIncidentChannel: &v3WorkflowsSlackCreateIncidentChannel,
		Type:                                  typ,
	}
}

func CreateV3WorkflowsActionRequestV3WorkflowsJiraCreateTicket(v3WorkflowsJiraCreateTicket V3WorkflowsJiraCreateTicket) V3WorkflowsActionRequest {
	typ := V3WorkflowsActionRequestTypeV3WorkflowsJiraCreateTicket

	return V3WorkflowsActionRequest{
		V3WorkflowsJiraCreateTicket: &v3WorkflowsJiraCreateTicket,
		Type:                        typ,
	}
}

func CreateV3WorkflowsActionRequestV3WorkflowsMsTeamsMessageChannel(v3WorkflowsMsTeamsMessageChannel V3WorkflowsMsTeamsMessageChannel) V3WorkflowsActionRequest {
	typ := V3WorkflowsActionRequestTypeV3WorkflowsMsTeamsMessageChannel

	return V3WorkflowsActionRequest{
		V3WorkflowsMsTeamsMessageChannel: &v3WorkflowsMsTeamsMessageChannel,
		Type:                             typ,
	}
}

func CreateV3WorkflowsActionRequestV3WorkflowsMsTeamsMessageUser(v3WorkflowsMsTeamsMessageUser V3WorkflowsMsTeamsMessageUser) V3WorkflowsActionRequest {
	typ := V3WorkflowsActionRequestTypeV3WorkflowsMsTeamsMessageUser

	return V3WorkflowsActionRequest{
		V3WorkflowsMsTeamsMessageUser: &v3WorkflowsMsTeamsMessageUser,
		Type:                          typ,
	}
}

func CreateV3WorkflowsActionRequestV3WorkflowsSqSendEmail(v3WorkflowsSqSendEmail V3WorkflowsSqSendEmail) V3WorkflowsActionRequest {
	typ := V3WorkflowsActionRequestTypeV3WorkflowsSqSendEmail

	return V3WorkflowsActionRequest{
		V3WorkflowsSqSendEmail: &v3WorkflowsSqSendEmail,
		Type:                   typ,
	}
}

func CreateV3WorkflowsActionRequestV3WorkflowsMsTeamsCreateMeetingLink(v3WorkflowsMsTeamsCreateMeetingLink V3WorkflowsMsTeamsCreateMeetingLink) V3WorkflowsActionRequest {
	typ := V3WorkflowsActionRequestTypeV3WorkflowsMsTeamsCreateMeetingLink

	return V3WorkflowsActionRequest{
		V3WorkflowsMsTeamsCreateMeetingLink: &v3WorkflowsMsTeamsCreateMeetingLink,
		Type:                                typ,
	}
}

func CreateV3WorkflowsActionRequestAny(anyT any) V3WorkflowsActionRequest {
	typ := V3WorkflowsActionRequestTypeAny

	return V3WorkflowsActionRequest{
		Any:  anyT,
		Type: typ,
	}
}

func (u *V3WorkflowsActionRequest) UnmarshalJSON(data []byte) error {

	var v3WorkflowsActionRequestSqAttachRunbooks V3WorkflowsActionRequestSqAttachRunbooks = V3WorkflowsActionRequestSqAttachRunbooks{}
	if err := utils.UnmarshalJSON(data, &v3WorkflowsActionRequestSqAttachRunbooks, "", true, nil); err == nil {
		u.V3WorkflowsActionRequestSqAttachRunbooks = &v3WorkflowsActionRequestSqAttachRunbooks
		u.Type = V3WorkflowsActionRequestTypeV3WorkflowsActionRequestSqAttachRunbooks
		return nil
	}

	var v3WorkflowsSqMarkIncidentSLOAffecting V3WorkflowsSqMarkIncidentSLOAffecting = V3WorkflowsSqMarkIncidentSLOAffecting{}
	if err := utils.UnmarshalJSON(data, &v3WorkflowsSqMarkIncidentSLOAffecting, "", true, nil); err == nil {
		u.V3WorkflowsSqMarkIncidentSLOAffecting = &v3WorkflowsSqMarkIncidentSLOAffecting
		u.Type = V3WorkflowsActionRequestTypeV3WorkflowsSqMarkIncidentSLOAffecting
		return nil
	}

	var v3WorkflowsSqTriggerManualWebhook V3WorkflowsSqTriggerManualWebhook = V3WorkflowsSqTriggerManualWebhook{}
	if err := utils.UnmarshalJSON(data, &v3WorkflowsSqTriggerManualWebhook, "", true, nil); err == nil {
		u.V3WorkflowsSqTriggerManualWebhook = &v3WorkflowsSqTriggerManualWebhook
		u.Type = V3WorkflowsActionRequestTypeV3WorkflowsSqTriggerManualWebhook
		return nil
	}

	var v3WorkflowsUpdateIncidentPriority V3WorkflowsUpdateIncidentPriority = V3WorkflowsUpdateIncidentPriority{}
	if err := utils.UnmarshalJSON(data, &v3WorkflowsUpdateIncidentPriority, "", true, nil); err == nil {
		u.V3WorkflowsUpdateIncidentPriority = &v3WorkflowsUpdateIncidentPriority
		u.Type = V3WorkflowsActionRequestTypeV3WorkflowsUpdateIncidentPriority
		return nil
	}

	var v3WorkflowsSqCreateStatusPageIssue V3WorkflowsSqCreateStatusPageIssue = V3WorkflowsSqCreateStatusPageIssue{}
	if err := utils.UnmarshalJSON(data, &v3WorkflowsSqCreateStatusPageIssue, "", true, nil); err == nil {
		u.V3WorkflowsSqCreateStatusPageIssue = &v3WorkflowsSqCreateStatusPageIssue
		u.Type = V3WorkflowsActionRequestTypeV3WorkflowsSqCreateStatusPageIssue
		return nil
	}

	var v3WorkflowsSqAddIncidentNote V3WorkflowsSqAddIncidentNote = V3WorkflowsSqAddIncidentNote{}
	if err := utils.UnmarshalJSON(data, &v3WorkflowsSqAddIncidentNote, "", true, nil); err == nil {
		u.V3WorkflowsSqAddIncidentNote = &v3WorkflowsSqAddIncidentNote
		u.Type = V3WorkflowsActionRequestTypeV3WorkflowsSqAddIncidentNote
		return nil
	}

	var v3WorkflowsSqAddCommunicationChannel V3WorkflowsSqAddCommunicationChannel = V3WorkflowsSqAddCommunicationChannel{}
	if err := utils.UnmarshalJSON(data, &v3WorkflowsSqAddCommunicationChannel, "", true, nil); err == nil {
		u.V3WorkflowsSqAddCommunicationChannel = &v3WorkflowsSqAddCommunicationChannel
		u.Type = V3WorkflowsActionRequestTypeV3WorkflowsSqAddCommunicationChannel
		return nil
	}

	var v3WorkflowsSlackMessageChannel V3WorkflowsSlackMessageChannel = V3WorkflowsSlackMessageChannel{}
	if err := utils.UnmarshalJSON(data, &v3WorkflowsSlackMessageChannel, "", true, nil); err == nil {
		u.V3WorkflowsSlackMessageChannel = &v3WorkflowsSlackMessageChannel
		u.Type = V3WorkflowsActionRequestTypeV3WorkflowsSlackMessageChannel
		return nil
	}

	var v3WorkflowsSlackMessageUser V3WorkflowsSlackMessageUser = V3WorkflowsSlackMessageUser{}
	if err := utils.UnmarshalJSON(data, &v3WorkflowsSlackMessageUser, "", true, nil); err == nil {
		u.V3WorkflowsSlackMessageUser = &v3WorkflowsSlackMessageUser
		u.Type = V3WorkflowsActionRequestTypeV3WorkflowsSlackMessageUser
		return nil
	}

	var v3WorkflowsSqMakeHTTPCall V3WorkflowsSqMakeHTTPCall = V3WorkflowsSqMakeHTTPCall{}
	if err := utils.UnmarshalJSON(data, &v3WorkflowsSqMakeHTTPCall, "", true, nil); err == nil {
		u.V3WorkflowsSqMakeHTTPCall = &v3WorkflowsSqMakeHTTPCall
		u.Type = V3WorkflowsActionRequestTypeV3WorkflowsSqMakeHTTPCall
		return nil
	}

	var v3WorkflowsSlackCreateIncidentChannel V3WorkflowsSlackCreateIncidentChannel = V3WorkflowsSlackCreateIncidentChannel{}
	if err := utils.UnmarshalJSON(data, &v3WorkflowsSlackCreateIncidentChannel, "", true, nil); err == nil {
		u.V3WorkflowsSlackCreateIncidentChannel = &v3WorkflowsSlackCreateIncidentChannel
		u.Type = V3WorkflowsActionRequestTypeV3WorkflowsSlackCreateIncidentChannel
		return nil
	}

	var v3WorkflowsJiraCreateTicket V3WorkflowsJiraCreateTicket = V3WorkflowsJiraCreateTicket{}
	if err := utils.UnmarshalJSON(data, &v3WorkflowsJiraCreateTicket, "", true, nil); err == nil {
		u.V3WorkflowsJiraCreateTicket = &v3WorkflowsJiraCreateTicket
		u.Type = V3WorkflowsActionRequestTypeV3WorkflowsJiraCreateTicket
		return nil
	}

	var v3WorkflowsMsTeamsMessageChannel V3WorkflowsMsTeamsMessageChannel = V3WorkflowsMsTeamsMessageChannel{}
	if err := utils.UnmarshalJSON(data, &v3WorkflowsMsTeamsMessageChannel, "", true, nil); err == nil {
		u.V3WorkflowsMsTeamsMessageChannel = &v3WorkflowsMsTeamsMessageChannel
		u.Type = V3WorkflowsActionRequestTypeV3WorkflowsMsTeamsMessageChannel
		return nil
	}

	var v3WorkflowsMsTeamsMessageUser V3WorkflowsMsTeamsMessageUser = V3WorkflowsMsTeamsMessageUser{}
	if err := utils.UnmarshalJSON(data, &v3WorkflowsMsTeamsMessageUser, "", true, nil); err == nil {
		u.V3WorkflowsMsTeamsMessageUser = &v3WorkflowsMsTeamsMessageUser
		u.Type = V3WorkflowsActionRequestTypeV3WorkflowsMsTeamsMessageUser
		return nil
	}

	var v3WorkflowsSqSendEmail V3WorkflowsSqSendEmail = V3WorkflowsSqSendEmail{}
	if err := utils.UnmarshalJSON(data, &v3WorkflowsSqSendEmail, "", true, nil); err == nil {
		u.V3WorkflowsSqSendEmail = &v3WorkflowsSqSendEmail
		u.Type = V3WorkflowsActionRequestTypeV3WorkflowsSqSendEmail
		return nil
	}

	var v3WorkflowsSlackArchiveChannel V3WorkflowsSlackArchiveChannel = V3WorkflowsSlackArchiveChannel{}
	if err := utils.UnmarshalJSON(data, &v3WorkflowsSlackArchiveChannel, "", true, nil); err == nil {
		u.V3WorkflowsSlackArchiveChannel = &v3WorkflowsSlackArchiveChannel
		u.Type = V3WorkflowsActionRequestTypeV3WorkflowsSlackArchiveChannel
		return nil
	}

	var v3WorkflowsMsTeamsCreateMeetingLink V3WorkflowsMsTeamsCreateMeetingLink = V3WorkflowsMsTeamsCreateMeetingLink{}
	if err := utils.UnmarshalJSON(data, &v3WorkflowsMsTeamsCreateMeetingLink, "", true, nil); err == nil {
		u.V3WorkflowsMsTeamsCreateMeetingLink = &v3WorkflowsMsTeamsCreateMeetingLink
		u.Type = V3WorkflowsActionRequestTypeV3WorkflowsMsTeamsCreateMeetingLink
		return nil
	}

	var anyVar any = nil
	if err := utils.UnmarshalJSON(data, &anyVar, "", true, nil); err == nil {
		u.Any = anyVar
		u.Type = V3WorkflowsActionRequestTypeAny
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for V3WorkflowsActionRequest", string(data))
}

func (u V3WorkflowsActionRequest) MarshalJSON() ([]byte, error) {
	if u.V3WorkflowsActionRequestSqAttachRunbooks != nil {
		return utils.MarshalJSON(u.V3WorkflowsActionRequestSqAttachRunbooks, "", true)
	}

	if u.V3WorkflowsSqMarkIncidentSLOAffecting != nil {
		return utils.MarshalJSON(u.V3WorkflowsSqMarkIncidentSLOAffecting, "", true)
	}

	if u.V3WorkflowsSqTriggerManualWebhook != nil {
		return utils.MarshalJSON(u.V3WorkflowsSqTriggerManualWebhook, "", true)
	}

	if u.V3WorkflowsUpdateIncidentPriority != nil {
		return utils.MarshalJSON(u.V3WorkflowsUpdateIncidentPriority, "", true)
	}

	if u.V3WorkflowsSqCreateStatusPageIssue != nil {
		return utils.MarshalJSON(u.V3WorkflowsSqCreateStatusPageIssue, "", true)
	}

	if u.V3WorkflowsSqAddIncidentNote != nil {
		return utils.MarshalJSON(u.V3WorkflowsSqAddIncidentNote, "", true)
	}

	if u.V3WorkflowsSlackArchiveChannel != nil {
		return utils.MarshalJSON(u.V3WorkflowsSlackArchiveChannel, "", true)
	}

	if u.V3WorkflowsSqAddCommunicationChannel != nil {
		return utils.MarshalJSON(u.V3WorkflowsSqAddCommunicationChannel, "", true)
	}

	if u.V3WorkflowsSlackMessageChannel != nil {
		return utils.MarshalJSON(u.V3WorkflowsSlackMessageChannel, "", true)
	}

	if u.V3WorkflowsSlackMessageUser != nil {
		return utils.MarshalJSON(u.V3WorkflowsSlackMessageUser, "", true)
	}

	if u.V3WorkflowsSqMakeHTTPCall != nil {
		return utils.MarshalJSON(u.V3WorkflowsSqMakeHTTPCall, "", true)
	}

	if u.V3WorkflowsSlackCreateIncidentChannel != nil {
		return utils.MarshalJSON(u.V3WorkflowsSlackCreateIncidentChannel, "", true)
	}

	if u.V3WorkflowsJiraCreateTicket != nil {
		return utils.MarshalJSON(u.V3WorkflowsJiraCreateTicket, "", true)
	}

	if u.V3WorkflowsMsTeamsMessageChannel != nil {
		return utils.MarshalJSON(u.V3WorkflowsMsTeamsMessageChannel, "", true)
	}

	if u.V3WorkflowsMsTeamsMessageUser != nil {
		return utils.MarshalJSON(u.V3WorkflowsMsTeamsMessageUser, "", true)
	}

	if u.V3WorkflowsSqSendEmail != nil {
		return utils.MarshalJSON(u.V3WorkflowsSqSendEmail, "", true)
	}

	if u.V3WorkflowsMsTeamsCreateMeetingLink != nil {
		return utils.MarshalJSON(u.V3WorkflowsMsTeamsCreateMeetingLink, "", true)
	}

	if u.Any != nil {
		return utils.MarshalJSON(u.Any, "", true)
	}

	return nil, errors.New("could not marshal union type V3WorkflowsActionRequest: all fields are null")
}
