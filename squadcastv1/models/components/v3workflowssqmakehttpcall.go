// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/SquadcastHub/squadcast-sdk-go/internal/utils"
)

type V3WorkflowsSqMakeHTTPCallName string

const (
	V3WorkflowsSqMakeHTTPCallNameSqMakeHTTPCall V3WorkflowsSqMakeHTTPCallName = "sq_make_http_call"
)

func (e V3WorkflowsSqMakeHTTPCallName) ToPointer() *V3WorkflowsSqMakeHTTPCallName {
	return &e
}
func (e *V3WorkflowsSqMakeHTTPCallName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "sq_make_http_call":
		*e = V3WorkflowsSqMakeHTTPCallName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for V3WorkflowsSqMakeHTTPCallName: %v", v)
	}
}

type V3WorkflowsSqMakeHTTPCallMethod string

const (
	V3WorkflowsSqMakeHTTPCallMethodGet    V3WorkflowsSqMakeHTTPCallMethod = "GET"
	V3WorkflowsSqMakeHTTPCallMethodPost   V3WorkflowsSqMakeHTTPCallMethod = "POST"
	V3WorkflowsSqMakeHTTPCallMethodPut    V3WorkflowsSqMakeHTTPCallMethod = "PUT"
	V3WorkflowsSqMakeHTTPCallMethodPatch  V3WorkflowsSqMakeHTTPCallMethod = "PATCH"
	V3WorkflowsSqMakeHTTPCallMethodDelete V3WorkflowsSqMakeHTTPCallMethod = "DELETE"
)

func (e V3WorkflowsSqMakeHTTPCallMethod) ToPointer() *V3WorkflowsSqMakeHTTPCallMethod {
	return &e
}
func (e *V3WorkflowsSqMakeHTTPCallMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "GET":
		fallthrough
	case "POST":
		fallthrough
	case "PUT":
		fallthrough
	case "PATCH":
		fallthrough
	case "DELETE":
		*e = V3WorkflowsSqMakeHTTPCallMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for V3WorkflowsSqMakeHTTPCallMethod: %v", v)
	}
}

type V3WorkflowsSqMakeHTTPCallHeader struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

func (v V3WorkflowsSqMakeHTTPCallHeader) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *V3WorkflowsSqMakeHTTPCallHeader) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, []string{"key", "value"}); err != nil {
		return err
	}
	return nil
}

func (o *V3WorkflowsSqMakeHTTPCallHeader) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *V3WorkflowsSqMakeHTTPCallHeader) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type V3WorkflowsSqMakeHTTPCallData struct {
	Method  V3WorkflowsSqMakeHTTPCallMethod   `json:"method"`
	URL     string                            `json:"url"`
	Headers []V3WorkflowsSqMakeHTTPCallHeader `json:"headers,omitempty"`
	Body    *string                           `json:"body,omitempty"`
}

func (v V3WorkflowsSqMakeHTTPCallData) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *V3WorkflowsSqMakeHTTPCallData) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, []string{"method", "url"}); err != nil {
		return err
	}
	return nil
}

func (o *V3WorkflowsSqMakeHTTPCallData) GetMethod() V3WorkflowsSqMakeHTTPCallMethod {
	if o == nil {
		return V3WorkflowsSqMakeHTTPCallMethod("")
	}
	return o.Method
}

func (o *V3WorkflowsSqMakeHTTPCallData) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *V3WorkflowsSqMakeHTTPCallData) GetHeaders() []V3WorkflowsSqMakeHTTPCallHeader {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *V3WorkflowsSqMakeHTTPCallData) GetBody() *string {
	if o == nil {
		return nil
	}
	return o.Body
}

type V3WorkflowsSqMakeHTTPCall struct {
	Name V3WorkflowsSqMakeHTTPCallName `json:"name"`
	Data V3WorkflowsSqMakeHTTPCallData `json:"data"`
}

func (v V3WorkflowsSqMakeHTTPCall) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *V3WorkflowsSqMakeHTTPCall) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, []string{"name", "data"}); err != nil {
		return err
	}
	return nil
}

func (o *V3WorkflowsSqMakeHTTPCall) GetName() V3WorkflowsSqMakeHTTPCallName {
	if o == nil {
		return V3WorkflowsSqMakeHTTPCallName("")
	}
	return o.Name
}

func (o *V3WorkflowsSqMakeHTTPCall) GetData() V3WorkflowsSqMakeHTTPCallData {
	if o == nil {
		return V3WorkflowsSqMakeHTTPCallData{}
	}
	return o.Data
}
