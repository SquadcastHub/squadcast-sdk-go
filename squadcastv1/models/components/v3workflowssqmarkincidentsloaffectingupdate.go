// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/SquadcastHub/squadcast-sdk-go/squadcastv1/internal/utils"
)

type V3WorkflowsSqMarkIncidentSLOAffectingUpdateName string

const (
	V3WorkflowsSqMarkIncidentSLOAffectingUpdateNameSqMarkIncidentSloAffecting V3WorkflowsSqMarkIncidentSLOAffectingUpdateName = "sq_mark_incident_slo_affecting"
)

func (e V3WorkflowsSqMarkIncidentSLOAffectingUpdateName) ToPointer() *V3WorkflowsSqMarkIncidentSLOAffectingUpdateName {
	return &e
}
func (e *V3WorkflowsSqMarkIncidentSLOAffectingUpdateName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "sq_mark_incident_slo_affecting":
		*e = V3WorkflowsSqMarkIncidentSLOAffectingUpdateName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for V3WorkflowsSqMarkIncidentSLOAffectingUpdateName: %v", v)
	}
}

type V3WorkflowsSqMarkIncidentSLOAffectingUpdateData struct {
	Slis []string `json:"slis,omitempty"`
	Slo  *int     `json:"slo,omitempty"`
}

func (v V3WorkflowsSqMarkIncidentSLOAffectingUpdateData) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *V3WorkflowsSqMarkIncidentSLOAffectingUpdateData) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *V3WorkflowsSqMarkIncidentSLOAffectingUpdateData) GetSlis() []string {
	if o == nil {
		return nil
	}
	return o.Slis
}

func (o *V3WorkflowsSqMarkIncidentSLOAffectingUpdateData) GetSlo() *int {
	if o == nil {
		return nil
	}
	return o.Slo
}

type V3WorkflowsSqMarkIncidentSLOAffectingUpdate struct {
	Name V3WorkflowsSqMarkIncidentSLOAffectingUpdateName  `json:"name"`
	Data *V3WorkflowsSqMarkIncidentSLOAffectingUpdateData `json:"data,omitempty"`
}

func (v V3WorkflowsSqMarkIncidentSLOAffectingUpdate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *V3WorkflowsSqMarkIncidentSLOAffectingUpdate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, []string{"name"}); err != nil {
		return err
	}
	return nil
}

func (o *V3WorkflowsSqMarkIncidentSLOAffectingUpdate) GetName() V3WorkflowsSqMarkIncidentSLOAffectingUpdateName {
	if o == nil {
		return V3WorkflowsSqMarkIncidentSLOAffectingUpdateName("")
	}
	return o.Name
}

func (o *V3WorkflowsSqMarkIncidentSLOAffectingUpdate) GetData() *V3WorkflowsSqMarkIncidentSLOAffectingUpdateData {
	if o == nil {
		return nil
	}
	return o.Data
}
