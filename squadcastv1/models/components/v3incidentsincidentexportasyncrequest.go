// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/SquadcastHub/squadcast-sdk-go/internal/utils"
	"time"
)

// V3IncidentsIncidentExportAsyncRequest - Request body for async incident export.
type V3IncidentsIncidentExportAsyncRequest struct {
	OwnerID string `json:"owner_id"`
	// Type of export, can be csv or json
	Type      V3IncidentsExportFormat `json:"type"`
	StartTime time.Time               `json:"start_time"`
	EndTime   time.Time               `json:"end_time"`
	// Filter criteria for incidents in an export.
	IncidentFilters V3IncidentsExportIncidentsFilter `json:"incident_filters"`
}

func (v V3IncidentsIncidentExportAsyncRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *V3IncidentsIncidentExportAsyncRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, []string{"owner_id", "type", "start_time", "end_time", "incident_filters"}); err != nil {
		return err
	}
	return nil
}

func (o *V3IncidentsIncidentExportAsyncRequest) GetOwnerID() string {
	if o == nil {
		return ""
	}
	return o.OwnerID
}

func (o *V3IncidentsIncidentExportAsyncRequest) GetType() V3IncidentsExportFormat {
	if o == nil {
		return V3IncidentsExportFormat("")
	}
	return o.Type
}

func (o *V3IncidentsIncidentExportAsyncRequest) GetStartTime() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartTime
}

func (o *V3IncidentsIncidentExportAsyncRequest) GetEndTime() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.EndTime
}

func (o *V3IncidentsIncidentExportAsyncRequest) GetIncidentFilters() V3IncidentsExportIncidentsFilter {
	if o == nil {
		return V3IncidentsExportIncidentsFilter{}
	}
	return o.IncidentFilters
}
