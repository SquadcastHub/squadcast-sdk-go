// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/SquadcastHub/squadcast-sdk-go/squadcastv1/internal/utils"
	"time"
)

// V3IncidentsTagsNotificationDelayPolicy - Policy for delaying notifications.
type V3IncidentsTagsNotificationDelayPolicy struct {
	IsNotificationDelayed bool      `json:"is_notification_delayed"`
	DelayedUntil          time.Time `json:"delayed_until"`
	// Represents the assignment target for delayed notifications.
	AssignTo V3IncidentsTagsAssignTo `json:"assign_to"`
}

func (v V3IncidentsTagsNotificationDelayPolicy) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *V3IncidentsTagsNotificationDelayPolicy) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, []string{"is_notification_delayed", "delayed_until", "assign_to"}); err != nil {
		return err
	}
	return nil
}

func (o *V3IncidentsTagsNotificationDelayPolicy) GetIsNotificationDelayed() bool {
	if o == nil {
		return false
	}
	return o.IsNotificationDelayed
}

func (o *V3IncidentsTagsNotificationDelayPolicy) GetDelayedUntil() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.DelayedUntil
}

func (o *V3IncidentsTagsNotificationDelayPolicy) GetAssignTo() V3IncidentsTagsAssignTo {
	if o == nil {
		return V3IncidentsTagsAssignTo{}
	}
	return o.AssignTo
}
