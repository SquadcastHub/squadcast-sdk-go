// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

// V3ExtensionsMSTeamsMSTeamsConfigResponse - The request body for creating or updating an MS Teams extension configuration.
type V3ExtensionsMSTeamsMSTeamsConfigResponse struct {
	// A user-friendly way to configure which incident action alerts are active. This is translated by the backend into the 'triggers.custom' array.
	CustomIncidentAlertState *V3ExtensionsMSTeamsIncidentActionAlertState `json:"custom_incident_alert_state,omitempty"`
	// The MongoDB ObjectID of the extension document. Should be included for updates.
	ID *string `json:"id,omitempty"`
	// The MongoDB ObjectID of the organization this extension belongs to.
	OrganizationID *string `json:"organization_id,omitempty"`
	// The display name for the default conversation/channel.
	DefaultConversationName string `json:"default_conversation_name"`
	// The unique identifier for the default MS Teams conversation/channel.
	DefaultConversationID string `json:"default_conversation_id"`
	// A master switch to enable or disable the entire integration.
	IsActive bool `json:"is_active"`
	// Determines if notifications should be sent to the default channel.
	IsDefaultActive bool `json:"is_default_active"`
	// Determines if notifications should be sent to custom-configured channels.
	IsCustomChannelsActive bool `json:"is_custom_channels_active"`
	// Configuration for which alerts are sent to the MS Teams channel.
	Triggers V3ExtensionsMSTeamsTriggers `json:"triggers"`
	// The Azure AD Tenant ID of the organization that owns this extension.
	TenantID string `json:"tenant_id"`
	// The Azure AD Object ID of the user who created this extension.
	FromID string `json:"from_id"`
	// A list of all MS Teams (teams) connected to this organization.
	ConnectedTeams []V3ExtensionsMSTeamsConnectedTeams `json:"connected_teams"`
}

func (v *V3ExtensionsMSTeamsMSTeamsConfigResponse) GetCustomIncidentAlertState() *V3ExtensionsMSTeamsIncidentActionAlertState {
	if v == nil {
		return nil
	}
	return v.CustomIncidentAlertState
}

func (v *V3ExtensionsMSTeamsMSTeamsConfigResponse) GetID() *string {
	if v == nil {
		return nil
	}
	return v.ID
}

func (v *V3ExtensionsMSTeamsMSTeamsConfigResponse) GetOrganizationID() *string {
	if v == nil {
		return nil
	}
	return v.OrganizationID
}

func (v *V3ExtensionsMSTeamsMSTeamsConfigResponse) GetDefaultConversationName() string {
	if v == nil {
		return ""
	}
	return v.DefaultConversationName
}

func (v *V3ExtensionsMSTeamsMSTeamsConfigResponse) GetDefaultConversationID() string {
	if v == nil {
		return ""
	}
	return v.DefaultConversationID
}

func (v *V3ExtensionsMSTeamsMSTeamsConfigResponse) GetIsActive() bool {
	if v == nil {
		return false
	}
	return v.IsActive
}

func (v *V3ExtensionsMSTeamsMSTeamsConfigResponse) GetIsDefaultActive() bool {
	if v == nil {
		return false
	}
	return v.IsDefaultActive
}

func (v *V3ExtensionsMSTeamsMSTeamsConfigResponse) GetIsCustomChannelsActive() bool {
	if v == nil {
		return false
	}
	return v.IsCustomChannelsActive
}

func (v *V3ExtensionsMSTeamsMSTeamsConfigResponse) GetTriggers() V3ExtensionsMSTeamsTriggers {
	if v == nil {
		return V3ExtensionsMSTeamsTriggers{}
	}
	return v.Triggers
}

func (v *V3ExtensionsMSTeamsMSTeamsConfigResponse) GetTenantID() string {
	if v == nil {
		return ""
	}
	return v.TenantID
}

func (v *V3ExtensionsMSTeamsMSTeamsConfigResponse) GetFromID() string {
	if v == nil {
		return ""
	}
	return v.FromID
}

func (v *V3ExtensionsMSTeamsMSTeamsConfigResponse) GetConnectedTeams() []V3ExtensionsMSTeamsConnectedTeams {
	if v == nil {
		return []V3ExtensionsMSTeamsConnectedTeams{}
	}
	return v.ConnectedTeams
}
