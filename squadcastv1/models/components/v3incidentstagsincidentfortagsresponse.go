// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/SquadcastHub/squadcast-sdk-go/squadcastv1/internal/utils"
	"time"
)

type V3IncidentsTagsIncidentForTagsResponseTags struct {
}

type V3IncidentsTagsIncidentForTagsResponseRetriggerPolicy struct {
	EscalationPolicyID string     `json:"escalationPolicyId"`
	RetriggerAt        *time.Time `json:"retriggerAt,omitempty"`
	RetriggeredAt      *time.Time `json:"retriggeredAt,omitempty"`
}

func (v V3IncidentsTagsIncidentForTagsResponseRetriggerPolicy) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *V3IncidentsTagsIncidentForTagsResponseRetriggerPolicy) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, []string{"escalationPolicyId"}); err != nil {
		return err
	}
	return nil
}

func (o *V3IncidentsTagsIncidentForTagsResponseRetriggerPolicy) GetEscalationPolicyID() string {
	if o == nil {
		return ""
	}
	return o.EscalationPolicyID
}

func (o *V3IncidentsTagsIncidentForTagsResponseRetriggerPolicy) GetRetriggerAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.RetriggerAt
}

func (o *V3IncidentsTagsIncidentForTagsResponseRetriggerPolicy) GetRetriggeredAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.RetriggeredAt
}

type V3IncidentsTagsIncidentForTagsResponse struct {
	ID                   string                                      `json:"id"`
	ServiceID            string                                      `json:"service_id"`
	AlertSourceID        string                                      `json:"alert_source_id"`
	OrganizationID       string                                      `json:"organization_id"`
	SloID                *int64                                      `json:"slo_id,omitempty"`
	IncidentNumber       int64                                       `json:"incidentNumber"`
	Message              string                                      `json:"message"`
	AssignedTo           []V3IncidentsTagsAssignedTo                 `json:"assignedTo"`
	AdditionalResponders []V3IncidentsTagsAdditionalResponderDetails `json:"additional_responders"`
	Description          string                                      `json:"description"`
	Status               string                                      `json:"status"`
	TimeOfCreation       time.Time                                   `json:"timeOfCreation"`
	UpdatedAt            time.Time                                   `json:"updated_at"`
	LastAcknowledgedAt   *time.Time                                  `json:"last_acknowledged_at,omitempty"`
	Tags                 V3IncidentsTagsIncidentForTagsResponseTags  `json:"tags"`
	Logs                 []V3IncidentsTagsLogs                       `json:"logs"`
	// Incident analytics data.
	Analytics      V3IncidentsTagsAnalytics       `json:"analytics"`
	PinnedMessages []V3IncidentsTagsPinnedMessage `json:"pinned_messages"`
	CreatedBy      *string                        `json:"created_by,omitempty"`
	SenderEmail    *string                        `json:"sender_email,omitempty"`
	Deleted        bool                           `json:"deleted"`
	EventCount     int64                          `json:"event_count"`
	DedupData      V3IncidentsTagsDedupData       `json:"dedup_data"`
	// Represents the RBAC owner of an entity.
	Owner                                    CommonV3RBACOwner                                      `json:"owner"`
	AccessControl                            []CommonV3RBACEntityPermission                         `json:"access_control"`
	RelevantUsers                            []string                                               `json:"relevantUsers"`
	RelevantEscalationPolicies               []string                                               `json:"relevantEscalationPolicies"`
	RelevantSquads                           []string                                               `json:"relevantSquads"`
	RelevantSchedules                        []string                                               `json:"relevantSchedules"`
	RelevantPeopleLogs                       []V3IncidentsTagsRelevantPeopleLog                     `json:"relevantPeopleLogs"`
	ResponseNotes                            []V3IncidentsTagsResponseNote                          `json:"responseNotes"`
	Attachments                              []string                                               `json:"attachments"`
	RetriggerPolicy                          *V3IncidentsTagsIncidentForTagsResponseRetriggerPolicy `json:"retriggerPolicy,omitempty"`
	WebformID                                *int64                                                 `json:"webform_id,omitempty"`
	WebformSubmissionID                      *int64                                                 `json:"webform_submission_id,omitempty"`
	IsChild                                  bool                                                   `json:"is_child"`
	Parent                                   *V3IncidentsTagsMergeIncidentEntityReference           `json:"parent,omitempty"`
	Children                                 []V3IncidentsTagsMergeIncidentEntityReference          `json:"children"`
	DidAutoPause                             bool                                                   `json:"did_auto_pause"`
	DidAutoPauseTimeout                      bool                                                   `json:"did_auto_pause_timeout"`
	AutoPauseEndsAt                          time.Time                                              `json:"auto_pause_ends_at"`
	ManuallyMarkedTransientAlertFeedbackType string                                                 `json:"manually_marked_transient_alert_feedback_type"`
	ClassificationID                         int64                                                  `json:"classification_id"`
	GroupedAlertCount                        int64                                                  `json:"grouped_alert_count"`
	// Represents the priority of an incident.
	Priority             *V3IncidentsTagsIncidentPriority `json:"priority,omitempty"`
	HasPriority          bool                             `json:"has_priority"`
	SnoozeDetails        V3IncidentsTagsSnoozeDetails     `json:"snooze_details"`
	DidNotificationDelay bool                             `json:"did_notification_delay"`
	// Policy for delaying notifications.
	NotificationDelayPolicy V3IncidentsTagsNotificationDelayPolicy `json:"notification_delay_policy"`
	DigestID                string                                 `json:"digest_id"`
}

func (v V3IncidentsTagsIncidentForTagsResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *V3IncidentsTagsIncidentForTagsResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, []string{"id", "service_id", "alert_source_id", "organization_id", "incidentNumber", "message", "assignedTo", "additional_responders", "description", "status", "timeOfCreation", "updated_at", "tags", "logs", "analytics", "pinned_messages", "deleted", "event_count", "dedup_data", "owner", "access_control", "relevantUsers", "relevantEscalationPolicies", "relevantSquads", "relevantSchedules", "relevantPeopleLogs", "responseNotes", "attachments", "is_child", "children", "did_auto_pause", "did_auto_pause_timeout", "auto_pause_ends_at", "manually_marked_transient_alert_feedback_type", "classification_id", "grouped_alert_count", "has_priority", "snooze_details", "did_notification_delay", "notification_delay_policy", "digest_id"}); err != nil {
		return err
	}
	return nil
}

func (o *V3IncidentsTagsIncidentForTagsResponse) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *V3IncidentsTagsIncidentForTagsResponse) GetServiceID() string {
	if o == nil {
		return ""
	}
	return o.ServiceID
}

func (o *V3IncidentsTagsIncidentForTagsResponse) GetAlertSourceID() string {
	if o == nil {
		return ""
	}
	return o.AlertSourceID
}

func (o *V3IncidentsTagsIncidentForTagsResponse) GetOrganizationID() string {
	if o == nil {
		return ""
	}
	return o.OrganizationID
}

func (o *V3IncidentsTagsIncidentForTagsResponse) GetSloID() *int64 {
	if o == nil {
		return nil
	}
	return o.SloID
}

func (o *V3IncidentsTagsIncidentForTagsResponse) GetIncidentNumber() int64 {
	if o == nil {
		return 0
	}
	return o.IncidentNumber
}

func (o *V3IncidentsTagsIncidentForTagsResponse) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

func (o *V3IncidentsTagsIncidentForTagsResponse) GetAssignedTo() []V3IncidentsTagsAssignedTo {
	if o == nil {
		return []V3IncidentsTagsAssignedTo{}
	}
	return o.AssignedTo
}

func (o *V3IncidentsTagsIncidentForTagsResponse) GetAdditionalResponders() []V3IncidentsTagsAdditionalResponderDetails {
	if o == nil {
		return []V3IncidentsTagsAdditionalResponderDetails{}
	}
	return o.AdditionalResponders
}

func (o *V3IncidentsTagsIncidentForTagsResponse) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *V3IncidentsTagsIncidentForTagsResponse) GetStatus() string {
	if o == nil {
		return ""
	}
	return o.Status
}

func (o *V3IncidentsTagsIncidentForTagsResponse) GetTimeOfCreation() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.TimeOfCreation
}

func (o *V3IncidentsTagsIncidentForTagsResponse) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

func (o *V3IncidentsTagsIncidentForTagsResponse) GetLastAcknowledgedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.LastAcknowledgedAt
}

func (o *V3IncidentsTagsIncidentForTagsResponse) GetTags() V3IncidentsTagsIncidentForTagsResponseTags {
	if o == nil {
		return V3IncidentsTagsIncidentForTagsResponseTags{}
	}
	return o.Tags
}

func (o *V3IncidentsTagsIncidentForTagsResponse) GetLogs() []V3IncidentsTagsLogs {
	if o == nil {
		return []V3IncidentsTagsLogs{}
	}
	return o.Logs
}

func (o *V3IncidentsTagsIncidentForTagsResponse) GetAnalytics() V3IncidentsTagsAnalytics {
	if o == nil {
		return V3IncidentsTagsAnalytics{}
	}
	return o.Analytics
}

func (o *V3IncidentsTagsIncidentForTagsResponse) GetPinnedMessages() []V3IncidentsTagsPinnedMessage {
	if o == nil {
		return nil
	}
	return o.PinnedMessages
}

func (o *V3IncidentsTagsIncidentForTagsResponse) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *V3IncidentsTagsIncidentForTagsResponse) GetSenderEmail() *string {
	if o == nil {
		return nil
	}
	return o.SenderEmail
}

func (o *V3IncidentsTagsIncidentForTagsResponse) GetDeleted() bool {
	if o == nil {
		return false
	}
	return o.Deleted
}

func (o *V3IncidentsTagsIncidentForTagsResponse) GetEventCount() int64 {
	if o == nil {
		return 0
	}
	return o.EventCount
}

func (o *V3IncidentsTagsIncidentForTagsResponse) GetDedupData() V3IncidentsTagsDedupData {
	if o == nil {
		return V3IncidentsTagsDedupData{}
	}
	return o.DedupData
}

func (o *V3IncidentsTagsIncidentForTagsResponse) GetOwner() CommonV3RBACOwner {
	if o == nil {
		return CommonV3RBACOwner{}
	}
	return o.Owner
}

func (o *V3IncidentsTagsIncidentForTagsResponse) GetAccessControl() []CommonV3RBACEntityPermission {
	if o == nil {
		return nil
	}
	return o.AccessControl
}

func (o *V3IncidentsTagsIncidentForTagsResponse) GetRelevantUsers() []string {
	if o == nil {
		return nil
	}
	return o.RelevantUsers
}

func (o *V3IncidentsTagsIncidentForTagsResponse) GetRelevantEscalationPolicies() []string {
	if o == nil {
		return nil
	}
	return o.RelevantEscalationPolicies
}

func (o *V3IncidentsTagsIncidentForTagsResponse) GetRelevantSquads() []string {
	if o == nil {
		return nil
	}
	return o.RelevantSquads
}

func (o *V3IncidentsTagsIncidentForTagsResponse) GetRelevantSchedules() []string {
	if o == nil {
		return nil
	}
	return o.RelevantSchedules
}

func (o *V3IncidentsTagsIncidentForTagsResponse) GetRelevantPeopleLogs() []V3IncidentsTagsRelevantPeopleLog {
	if o == nil {
		return nil
	}
	return o.RelevantPeopleLogs
}

func (o *V3IncidentsTagsIncidentForTagsResponse) GetResponseNotes() []V3IncidentsTagsResponseNote {
	if o == nil {
		return nil
	}
	return o.ResponseNotes
}

func (o *V3IncidentsTagsIncidentForTagsResponse) GetAttachments() []string {
	if o == nil {
		return nil
	}
	return o.Attachments
}

func (o *V3IncidentsTagsIncidentForTagsResponse) GetRetriggerPolicy() *V3IncidentsTagsIncidentForTagsResponseRetriggerPolicy {
	if o == nil {
		return nil
	}
	return o.RetriggerPolicy
}

func (o *V3IncidentsTagsIncidentForTagsResponse) GetWebformID() *int64 {
	if o == nil {
		return nil
	}
	return o.WebformID
}

func (o *V3IncidentsTagsIncidentForTagsResponse) GetWebformSubmissionID() *int64 {
	if o == nil {
		return nil
	}
	return o.WebformSubmissionID
}

func (o *V3IncidentsTagsIncidentForTagsResponse) GetIsChild() bool {
	if o == nil {
		return false
	}
	return o.IsChild
}

func (o *V3IncidentsTagsIncidentForTagsResponse) GetParent() *V3IncidentsTagsMergeIncidentEntityReference {
	if o == nil {
		return nil
	}
	return o.Parent
}

func (o *V3IncidentsTagsIncidentForTagsResponse) GetChildren() []V3IncidentsTagsMergeIncidentEntityReference {
	if o == nil {
		return []V3IncidentsTagsMergeIncidentEntityReference{}
	}
	return o.Children
}

func (o *V3IncidentsTagsIncidentForTagsResponse) GetDidAutoPause() bool {
	if o == nil {
		return false
	}
	return o.DidAutoPause
}

func (o *V3IncidentsTagsIncidentForTagsResponse) GetDidAutoPauseTimeout() bool {
	if o == nil {
		return false
	}
	return o.DidAutoPauseTimeout
}

func (o *V3IncidentsTagsIncidentForTagsResponse) GetAutoPauseEndsAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.AutoPauseEndsAt
}

func (o *V3IncidentsTagsIncidentForTagsResponse) GetManuallyMarkedTransientAlertFeedbackType() string {
	if o == nil {
		return ""
	}
	return o.ManuallyMarkedTransientAlertFeedbackType
}

func (o *V3IncidentsTagsIncidentForTagsResponse) GetClassificationID() int64 {
	if o == nil {
		return 0
	}
	return o.ClassificationID
}

func (o *V3IncidentsTagsIncidentForTagsResponse) GetGroupedAlertCount() int64 {
	if o == nil {
		return 0
	}
	return o.GroupedAlertCount
}

func (o *V3IncidentsTagsIncidentForTagsResponse) GetPriority() *V3IncidentsTagsIncidentPriority {
	if o == nil {
		return nil
	}
	return o.Priority
}

func (o *V3IncidentsTagsIncidentForTagsResponse) GetHasPriority() bool {
	if o == nil {
		return false
	}
	return o.HasPriority
}

func (o *V3IncidentsTagsIncidentForTagsResponse) GetSnoozeDetails() V3IncidentsTagsSnoozeDetails {
	if o == nil {
		return V3IncidentsTagsSnoozeDetails{}
	}
	return o.SnoozeDetails
}

func (o *V3IncidentsTagsIncidentForTagsResponse) GetDidNotificationDelay() bool {
	if o == nil {
		return false
	}
	return o.DidNotificationDelay
}

func (o *V3IncidentsTagsIncidentForTagsResponse) GetNotificationDelayPolicy() V3IncidentsTagsNotificationDelayPolicy {
	if o == nil {
		return V3IncidentsTagsNotificationDelayPolicy{}
	}
	return o.NotificationDelayPolicy
}

func (o *V3IncidentsTagsIncidentForTagsResponse) GetDigestID() string {
	if o == nil {
		return ""
	}
	return o.DigestID
}
