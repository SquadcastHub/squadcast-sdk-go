// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type V3ServicesRoutingRulesRoutingRuleEntityType string

const (
	V3ServicesRoutingRulesRoutingRuleEntityTypeUser             V3ServicesRoutingRulesRoutingRuleEntityType = "user"
	V3ServicesRoutingRulesRoutingRuleEntityTypeSquad            V3ServicesRoutingRulesRoutingRuleEntityType = "squad"
	V3ServicesRoutingRulesRoutingRuleEntityTypeEscalationPolicy V3ServicesRoutingRulesRoutingRuleEntityType = "escalation_policy"
)

func (e V3ServicesRoutingRulesRoutingRuleEntityType) ToPointer() *V3ServicesRoutingRulesRoutingRuleEntityType {
	return &e
}
func (e *V3ServicesRoutingRulesRoutingRuleEntityType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "user":
		fallthrough
	case "squad":
		fallthrough
	case "escalation_policy":
		*e = V3ServicesRoutingRulesRoutingRuleEntityType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for V3ServicesRoutingRulesRoutingRuleEntityType: %v", v)
	}
}

type V3ServicesRoutingRulesRoutingRuleRouteTo struct {
	EntityType V3ServicesRoutingRulesRoutingRuleEntityType `json:"entity_type"`
	EntityID   string                                      `json:"entity_id"`
}

func (o *V3ServicesRoutingRulesRoutingRuleRouteTo) GetEntityType() V3ServicesRoutingRulesRoutingRuleEntityType {
	if o == nil {
		return V3ServicesRoutingRulesRoutingRuleEntityType("")
	}
	return o.EntityType
}

func (o *V3ServicesRoutingRulesRoutingRuleRouteTo) GetEntityID() string {
	if o == nil {
		return ""
	}
	return o.EntityID
}

type V3ServicesRoutingRulesRoutingRule struct {
	Expression      string                                   `json:"expression"`
	RouteTo         V3ServicesRoutingRulesRoutingRuleRouteTo `json:"route_to"`
	IsBasic         bool                                     `json:"is_basic"`
	BasicExpression []V3ServicesRoutingRulesExpressionBranch `json:"basic_expression,omitempty"`
}

func (o *V3ServicesRoutingRulesRoutingRule) GetExpression() string {
	if o == nil {
		return ""
	}
	return o.Expression
}

func (o *V3ServicesRoutingRulesRoutingRule) GetRouteTo() V3ServicesRoutingRulesRoutingRuleRouteTo {
	if o == nil {
		return V3ServicesRoutingRulesRoutingRuleRouteTo{}
	}
	return o.RouteTo
}

func (o *V3ServicesRoutingRulesRoutingRule) GetIsBasic() bool {
	if o == nil {
		return false
	}
	return o.IsBasic
}

func (o *V3ServicesRoutingRulesRoutingRule) GetBasicExpression() []V3ServicesRoutingRulesExpressionBranch {
	if o == nil {
		return nil
	}
	return o.BasicExpression
}
