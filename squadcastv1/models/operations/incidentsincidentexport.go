// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/SquadcastHub/squadcast-sdk-go/internal/utils"
	"github.com/SquadcastHub/squadcast-sdk-go/models/components"
	"time"
)

type IncidentsIncidentExportRequest struct {
	StartTime time.Time `queryParam:"style=form,explode=false,name=start_time"`
	EndTime   time.Time `queryParam:"style=form,explode=false,name=end_time"`
	// Defines the format of the export.
	Type                            components.V3IncidentsExportFormat                         `queryParam:"style=form,explode=false,name=type"`
	OwnerID                         string                                                     `queryParam:"style=form,explode=false,name=owner_id"`
	Status                          []string                                                   `queryParam:"style=form,explode=false,name=status"`
	Services                        []string                                                   `queryParam:"style=form,explode=false,name=services"`
	Sources                         []string                                                   `queryParam:"style=form,explode=false,name=sources"`
	AssignedTo                      []string                                                   `queryParam:"style=form,explode=false,name=assigned_to"`
	AssignedToUserIDsAndTheirSquads []string                                                   `queryParam:"style=form,explode=false,name=assignedToUserIDsAndTheirSquads"`
	ServiceOwner                    *string                                                    `queryParam:"style=form,explode=false,name=service_owner"`
	Priority                        []components.V3IncidentsIncidentPriority                   `queryParam:"style=form,explode=false,name=priority"`
	Tags                            []string                                                   `queryParam:"style=form,explode=false,name=tags"`
	SloAffecting                    *components.V3IncidentsIncidentExportRequestSloAffecting   `queryParam:"style=form,explode=false,name=slo_affecting"`
	Slos                            []int                                                      `queryParam:"style=form,explode=false,name=slos"`
	IsStarred                       *components.V3IncidentsIncidentExportRequestIsStarred      `queryParam:"style=form,explode=false,name=is_starred"`
	TextFilter                      *string                                                    `queryParam:"style=form,explode=false,name=textFilter"`
	Notes                           *components.V3IncidentsIncidentExportRequestNotes          `queryParam:"style=form,explode=false,name=notes"`
	Retrospectives                  *components.V3IncidentsIncidentExportRequestRetrospectives `queryParam:"style=form,explode=false,name=retrospectives"`
	SortBy                          *components.V3IncidentsIncidentExportRequestSortBy         `queryParam:"style=form,explode=false,name=sort_by"`
}

func (i IncidentsIncidentExportRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *IncidentsIncidentExportRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, []string{"start_time", "end_time", "type", "owner_id"}); err != nil {
		return err
	}
	return nil
}

func (o *IncidentsIncidentExportRequest) GetStartTime() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartTime
}

func (o *IncidentsIncidentExportRequest) GetEndTime() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.EndTime
}

func (o *IncidentsIncidentExportRequest) GetType() components.V3IncidentsExportFormat {
	if o == nil {
		return components.V3IncidentsExportFormat("")
	}
	return o.Type
}

func (o *IncidentsIncidentExportRequest) GetOwnerID() string {
	if o == nil {
		return ""
	}
	return o.OwnerID
}

func (o *IncidentsIncidentExportRequest) GetStatus() []string {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *IncidentsIncidentExportRequest) GetServices() []string {
	if o == nil {
		return nil
	}
	return o.Services
}

func (o *IncidentsIncidentExportRequest) GetSources() []string {
	if o == nil {
		return nil
	}
	return o.Sources
}

func (o *IncidentsIncidentExportRequest) GetAssignedTo() []string {
	if o == nil {
		return nil
	}
	return o.AssignedTo
}

func (o *IncidentsIncidentExportRequest) GetAssignedToUserIDsAndTheirSquads() []string {
	if o == nil {
		return nil
	}
	return o.AssignedToUserIDsAndTheirSquads
}

func (o *IncidentsIncidentExportRequest) GetServiceOwner() *string {
	if o == nil {
		return nil
	}
	return o.ServiceOwner
}

func (o *IncidentsIncidentExportRequest) GetPriority() []components.V3IncidentsIncidentPriority {
	if o == nil {
		return nil
	}
	return o.Priority
}

func (o *IncidentsIncidentExportRequest) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *IncidentsIncidentExportRequest) GetSloAffecting() *components.V3IncidentsIncidentExportRequestSloAffecting {
	if o == nil {
		return nil
	}
	return o.SloAffecting
}

func (o *IncidentsIncidentExportRequest) GetSlos() []int {
	if o == nil {
		return nil
	}
	return o.Slos
}

func (o *IncidentsIncidentExportRequest) GetIsStarred() *components.V3IncidentsIncidentExportRequestIsStarred {
	if o == nil {
		return nil
	}
	return o.IsStarred
}

func (o *IncidentsIncidentExportRequest) GetTextFilter() *string {
	if o == nil {
		return nil
	}
	return o.TextFilter
}

func (o *IncidentsIncidentExportRequest) GetNotes() *components.V3IncidentsIncidentExportRequestNotes {
	if o == nil {
		return nil
	}
	return o.Notes
}

func (o *IncidentsIncidentExportRequest) GetRetrospectives() *components.V3IncidentsIncidentExportRequestRetrospectives {
	if o == nil {
		return nil
	}
	return o.Retrospectives
}

func (o *IncidentsIncidentExportRequest) GetSortBy() *components.V3IncidentsIncidentExportRequestSortBy {
	if o == nil {
		return nil
	}
	return o.SortBy
}

type IncidentsIncidentExportResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
}

func (o *IncidentsIncidentExportResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}
