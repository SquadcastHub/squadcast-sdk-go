// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"errors"
	"fmt"
	"github.com/SquadcastHub/squadcast-sdk-go/squadcastv1/internal/utils"
	"github.com/SquadcastHub/squadcast-sdk-go/squadcastv1/models/components"
)

type OverlayUpdateDedupKeyOverlayRequest struct {
	ServiceID                                     string                                                   `pathParam:"style=simple,explode=false,name=serviceID"`
	AlertSource                                   string                                                   `pathParam:"style=simple,explode=false,name=alertSource"`
	V3ServicesOverlayUpdateDedupKeyOverlayRequest components.V3ServicesOverlayUpdateDedupKeyOverlayRequest `request:"mediaType=application/json"`
}

func (o *OverlayUpdateDedupKeyOverlayRequest) GetServiceID() string {
	if o == nil {
		return ""
	}
	return o.ServiceID
}

func (o *OverlayUpdateDedupKeyOverlayRequest) GetAlertSource() string {
	if o == nil {
		return ""
	}
	return o.AlertSource
}

func (o *OverlayUpdateDedupKeyOverlayRequest) GetV3ServicesOverlayUpdateDedupKeyOverlayRequest() components.V3ServicesOverlayUpdateDedupKeyOverlayRequest {
	if o == nil {
		return components.V3ServicesOverlayUpdateDedupKeyOverlayRequest{}
	}
	return o.V3ServicesOverlayUpdateDedupKeyOverlayRequest
}

type ResponseBody2 struct {
	Data components.V3ServicesOverlayOverlayResponse `json:"data"`
}

func (r ResponseBody2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *ResponseBody2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, []string{"data"}); err != nil {
		return err
	}
	return nil
}

func (o *ResponseBody2) GetData() components.V3ServicesOverlayOverlayResponse {
	if o == nil {
		return components.V3ServicesOverlayOverlayResponse{}
	}
	return o.Data
}

type ResponseBody1 struct {
	Data components.V3ServicesOverlayOverlayResponse `json:"data"`
}

func (r ResponseBody1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *ResponseBody1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, []string{"data"}); err != nil {
		return err
	}
	return nil
}

func (o *ResponseBody1) GetData() components.V3ServicesOverlayOverlayResponse {
	if o == nil {
		return components.V3ServicesOverlayOverlayResponse{}
	}
	return o.Data
}

type OverlayUpdateDedupKeyOverlayResponseBodyType string

const (
	OverlayUpdateDedupKeyOverlayResponseBodyTypeResponseBody1 OverlayUpdateDedupKeyOverlayResponseBodyType = "ResponseBody_1"
	OverlayUpdateDedupKeyOverlayResponseBodyTypeResponseBody2 OverlayUpdateDedupKeyOverlayResponseBodyType = "ResponseBody_2"
)

// OverlayUpdateDedupKeyOverlayResponseBody - The request has succeeded.
type OverlayUpdateDedupKeyOverlayResponseBody struct {
	ResponseBody1 *ResponseBody1 `queryParam:"inline" name:"ResponseBody"`
	ResponseBody2 *ResponseBody2 `queryParam:"inline" name:"ResponseBody"`

	Type OverlayUpdateDedupKeyOverlayResponseBodyType
}

func CreateOverlayUpdateDedupKeyOverlayResponseBodyResponseBody1(responseBody1 ResponseBody1) OverlayUpdateDedupKeyOverlayResponseBody {
	typ := OverlayUpdateDedupKeyOverlayResponseBodyTypeResponseBody1

	return OverlayUpdateDedupKeyOverlayResponseBody{
		ResponseBody1: &responseBody1,
		Type:          typ,
	}
}

func CreateOverlayUpdateDedupKeyOverlayResponseBodyResponseBody2(responseBody2 ResponseBody2) OverlayUpdateDedupKeyOverlayResponseBody {
	typ := OverlayUpdateDedupKeyOverlayResponseBodyTypeResponseBody2

	return OverlayUpdateDedupKeyOverlayResponseBody{
		ResponseBody2: &responseBody2,
		Type:          typ,
	}
}

func (u *OverlayUpdateDedupKeyOverlayResponseBody) UnmarshalJSON(data []byte) error {

	var responseBody1 ResponseBody1 = ResponseBody1{}
	if err := utils.UnmarshalJSON(data, &responseBody1, "", true, nil); err == nil {
		u.ResponseBody1 = &responseBody1
		u.Type = OverlayUpdateDedupKeyOverlayResponseBodyTypeResponseBody1
		return nil
	}

	var responseBody2 ResponseBody2 = ResponseBody2{}
	if err := utils.UnmarshalJSON(data, &responseBody2, "", true, nil); err == nil {
		u.ResponseBody2 = &responseBody2
		u.Type = OverlayUpdateDedupKeyOverlayResponseBodyTypeResponseBody2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for OverlayUpdateDedupKeyOverlayResponseBody", string(data))
}

func (u OverlayUpdateDedupKeyOverlayResponseBody) MarshalJSON() ([]byte, error) {
	if u.ResponseBody1 != nil {
		return utils.MarshalJSON(u.ResponseBody1, "", true)
	}

	if u.ResponseBody2 != nil {
		return utils.MarshalJSON(u.ResponseBody2, "", true)
	}

	return nil, errors.New("could not marshal union type OverlayUpdateDedupKeyOverlayResponseBody: all fields are null")
}

type OverlayUpdateDedupKeyOverlayResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The request has succeeded.
	OneOf *OverlayUpdateDedupKeyOverlayResponseBody
}

func (o *OverlayUpdateDedupKeyOverlayResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *OverlayUpdateDedupKeyOverlayResponse) GetOneOf() *OverlayUpdateDedupKeyOverlayResponseBody {
	if o == nil {
		return nil
	}
	return o.OneOf
}
