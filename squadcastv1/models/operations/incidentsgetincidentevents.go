// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/SquadcastHub/squadcast-sdk-go/models/components"
)

type IncidentsGetIncidentEventsRequest struct {
	IncidentID string `pathParam:"style=simple,explode=false,name=incidentID"`
	// non zero value
	Offset string `queryParam:"style=form,explode=true,name=offset"`
	// non zero value, maximum is 10
	Limit string `queryParam:"style=form,explode=true,name=limit"`
	// sort it by either asc or desc
	Sort string `queryParam:"style=form,explode=true,name=sort"`
	// if set to true, it will return only the deduped events.
	//
	// if set to false, it will return only the non-deduped event.
	//
	// otherwise it will return all the events
	Deduped string `queryParam:"style=form,explode=true,name=deduped"`
}

func (o *IncidentsGetIncidentEventsRequest) GetIncidentID() string {
	if o == nil {
		return ""
	}
	return o.IncidentID
}

func (o *IncidentsGetIncidentEventsRequest) GetOffset() string {
	if o == nil {
		return ""
	}
	return o.Offset
}

func (o *IncidentsGetIncidentEventsRequest) GetLimit() string {
	if o == nil {
		return ""
	}
	return o.Limit
}

func (o *IncidentsGetIncidentEventsRequest) GetSort() string {
	if o == nil {
		return ""
	}
	return o.Sort
}

func (o *IncidentsGetIncidentEventsRequest) GetDeduped() string {
	if o == nil {
		return ""
	}
	return o.Deduped
}

type IncidentsGetIncidentEventsData struct {
	Events []components.V3IncidentsIncidentEventResponse `json:"events"`
}

func (o *IncidentsGetIncidentEventsData) GetEvents() []components.V3IncidentsIncidentEventResponse {
	if o == nil {
		return []components.V3IncidentsIncidentEventResponse{}
	}
	return o.Events
}

type IncidentsGetIncidentEventsMeta struct {
	Total   int64   `json:"total"`
	Count   int64   `json:"count"`
	Current string  `json:"current"`
	Next    *string `json:"next,omitempty"`
}

func (o *IncidentsGetIncidentEventsMeta) GetTotal() int64 {
	if o == nil {
		return 0
	}
	return o.Total
}

func (o *IncidentsGetIncidentEventsMeta) GetCount() int64 {
	if o == nil {
		return 0
	}
	return o.Count
}

func (o *IncidentsGetIncidentEventsMeta) GetCurrent() string {
	if o == nil {
		return ""
	}
	return o.Current
}

func (o *IncidentsGetIncidentEventsMeta) GetNext() *string {
	if o == nil {
		return nil
	}
	return o.Next
}

// IncidentsGetIncidentEventsResponseBody - The request has succeeded.
type IncidentsGetIncidentEventsResponseBody struct {
	Data IncidentsGetIncidentEventsData `json:"data"`
	Meta IncidentsGetIncidentEventsMeta `json:"meta"`
}

func (o *IncidentsGetIncidentEventsResponseBody) GetData() IncidentsGetIncidentEventsData {
	if o == nil {
		return IncidentsGetIncidentEventsData{}
	}
	return o.Data
}

func (o *IncidentsGetIncidentEventsResponseBody) GetMeta() IncidentsGetIncidentEventsMeta {
	if o == nil {
		return IncidentsGetIncidentEventsMeta{}
	}
	return o.Meta
}

type IncidentsGetIncidentEventsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The request has succeeded.
	Object *IncidentsGetIncidentEventsResponseBody
}

func (o *IncidentsGetIncidentEventsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *IncidentsGetIncidentEventsResponse) GetObject() *IncidentsGetIncidentEventsResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
