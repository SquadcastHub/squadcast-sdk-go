// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package squadcastsdk

// Generated from OpenAPI doc version 1.0.0 and generator version 2.729.2

import (
	"context"
	"fmt"
	"github.com/SquadcastHub/squadcast-sdk-go/v1/internal/config"
	"github.com/SquadcastHub/squadcast-sdk-go/v1/internal/hooks"
	"github.com/SquadcastHub/squadcast-sdk-go/v1/internal/utils"
	"github.com/SquadcastHub/squadcast-sdk-go/v1/models/components"
	"github.com/SquadcastHub/squadcast-sdk-go/v1/retry"
	"net/http"
	"time"
)

// ServerList contains the list of servers available to the SDK
var ServerList = []string{
	// production env
	"https://api.squadcast.com",
}

// HTTPClient provides an interface for supplying the SDK with a custom HTTP client
type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

// String provides a helper function to return a pointer to a string
func String(s string) *string { return &s }

// Bool provides a helper function to return a pointer to a bool
func Bool(b bool) *bool { return &b }

// Int provides a helper function to return a pointer to an int
func Int(i int) *int { return &i }

// Int64 provides a helper function to return a pointer to an int64
func Int64(i int64) *int64 { return &i }

// Float32 provides a helper function to return a pointer to a float32
func Float32(f float32) *float32 { return &f }

// Float64 provides a helper function to return a pointer to a float64
func Float64(f float64) *float64 { return &f }

// Pointer provides a helper function to return a pointer to a type
func Pointer[T any](v T) *T { return &v }

type SquadcastSDK struct {
	SDKVersion                    string
	Analytics                     *Analytics
	EscalationPolicies            *EscalationPolicies
	Exports                       *Exports
	Webhooks                      *Webhooks
	Extensions                    *Extensions
	Msteams                       *Msteams
	CommunicationCards            *CommunicationCards
	GlobalEventRules              *GlobalEventRules
	GlobalEventRulesRulesets      *GlobalEventRulesRulesets
	GlobalEventRulesRulesetsRules *GlobalEventRulesRulesetsRules
	GlobalOncallReminderRules     *GlobalOncallReminderRules
	Incidents                     *Incidents
	Notes                         *Notes
	IncidentActions               *IncidentActions
	APITokens                     *APITokens
	Tokens                        *Tokens
	Users                         *Users
	Runbooks                      *Runbooks
	Services                      *Services
	Overlays                      *Overlays
	Slos                          *Slos
	Teams                         *Teams
	Webforms                      *Webforms
	Workflows                     *Workflows
	Schedules                     *Schedules
	Overrides                     *Overrides
	Rotations                     *Rotations
	Squads                        *Squads
	V4                            *V4
	StatusPages                   *StatusPages

	sdkConfiguration config.SDKConfiguration
	hooks            *hooks.Hooks
}

type SDKOption func(*SquadcastSDK)

// WithServerURL allows the overriding of the default server URL
func WithServerURL(serverURL string) SDKOption {
	return func(sdk *SquadcastSDK) {
		sdk.sdkConfiguration.ServerURL = serverURL
	}
}

// WithTemplatedServerURL allows the overriding of the default server URL with a templated URL populated with the provided parameters
func WithTemplatedServerURL(serverURL string, params map[string]string) SDKOption {
	return func(sdk *SquadcastSDK) {
		if params != nil {
			serverURL = utils.ReplaceParameters(serverURL, params)
		}

		sdk.sdkConfiguration.ServerURL = serverURL
	}
}

// WithServerIndex allows the overriding of the default server by index
func WithServerIndex(serverIndex int) SDKOption {
	return func(sdk *SquadcastSDK) {
		if serverIndex < 0 || serverIndex >= len(ServerList) {
			panic(fmt.Errorf("server index %d out of range", serverIndex))
		}

		sdk.sdkConfiguration.ServerIndex = serverIndex
	}
}

// WithClient allows the overriding of the default HTTP client used by the SDK
func WithClient(client HTTPClient) SDKOption {
	return func(sdk *SquadcastSDK) {
		sdk.sdkConfiguration.Client = client
	}
}

// WithSecurity configures the SDK to use the provided security details
func WithSecurity(bearerAuth string) SDKOption {
	return func(sdk *SquadcastSDK) {
		security := components.Security{BearerAuth: &bearerAuth}
		sdk.sdkConfiguration.Security = utils.AsSecuritySource(&security)
	}
}

// WithSecuritySource configures the SDK to invoke the Security Source function on each method call to determine authentication
func WithSecuritySource(security func(context.Context) (components.Security, error)) SDKOption {
	return func(sdk *SquadcastSDK) {
		sdk.sdkConfiguration.Security = func(ctx context.Context) (interface{}, error) {
			return security(ctx)
		}
	}
}

func WithRetryConfig(retryConfig retry.Config) SDKOption {
	return func(sdk *SquadcastSDK) {
		sdk.sdkConfiguration.RetryConfig = &retryConfig
	}
}

// WithTimeout Optional request timeout applied to each operation
func WithTimeout(timeout time.Duration) SDKOption {
	return func(sdk *SquadcastSDK) {
		sdk.sdkConfiguration.Timeout = &timeout
	}
}

// New creates a new instance of the SDK with the provided options
func New(opts ...SDKOption) *SquadcastSDK {
	sdk := &SquadcastSDK{
		SDKVersion: "1.3.0",
		sdkConfiguration: config.SDKConfiguration{
			UserAgent:  "speakeasy-sdk/go 1.3.0 2.729.2 1.0.0 github.com/SquadcastHub/squadcast-sdk-go/v1",
			ServerList: ServerList,
		},
		hooks: hooks.New(),
	}
	for _, opt := range opts {
		opt(sdk)
	}

	if sdk.sdkConfiguration.Security == nil {
		var envVarSecurity components.Security
		if utils.PopulateSecurityFromEnv(&envVarSecurity) {
			sdk.sdkConfiguration.Security = utils.AsSecuritySource(envVarSecurity)
		}
	}

	// Use WithClient to override the default client if you would like to customize the timeout
	if sdk.sdkConfiguration.Client == nil {
		sdk.sdkConfiguration.Client = &http.Client{Timeout: 60 * time.Second}
	}

	sdk.sdkConfiguration = sdk.hooks.SDKInit(sdk.sdkConfiguration)

	sdk.Analytics = newAnalytics(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.EscalationPolicies = newEscalationPolicies(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Exports = newExports(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Webhooks = newWebhooks(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Extensions = newExtensions(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Msteams = newMsteams(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.CommunicationCards = newCommunicationCards(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.GlobalEventRules = newGlobalEventRules(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.GlobalEventRulesRulesets = newGlobalEventRulesRulesets(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.GlobalEventRulesRulesetsRules = newGlobalEventRulesRulesetsRules(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.GlobalOncallReminderRules = newGlobalOncallReminderRules(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Incidents = newIncidents(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Notes = newNotes(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.IncidentActions = newIncidentActions(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.APITokens = newAPITokens(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Tokens = newTokens(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Users = newUsers(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Runbooks = newRunbooks(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Services = newServices(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Overlays = newOverlays(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Slos = newSlos(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Teams = newTeams(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Webforms = newWebforms(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Workflows = newWorkflows(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Schedules = newSchedules(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Overrides = newOverrides(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Rotations = newRotations(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Squads = newSquads(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.V4 = newV4(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.StatusPages = newStatusPages(sdk, sdk.sdkConfiguration, sdk.hooks)

	return sdk
}
