// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/SquadcastHub/squadcast-sdk-go/v1/internal/utils"
)

type V3WorkflowsUpdateIncidentPriorityName string

const (
	V3WorkflowsUpdateIncidentPriorityNameSqUpdateIncidentPriority V3WorkflowsUpdateIncidentPriorityName = "sq_update_incident_priority"
)

func (e V3WorkflowsUpdateIncidentPriorityName) ToPointer() *V3WorkflowsUpdateIncidentPriorityName {
	return &e
}
func (e *V3WorkflowsUpdateIncidentPriorityName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "sq_update_incident_priority":
		*e = V3WorkflowsUpdateIncidentPriorityName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for V3WorkflowsUpdateIncidentPriorityName: %v", v)
	}
}

type V3WorkflowsUpdateIncidentPriorityPriority string

const (
	V3WorkflowsUpdateIncidentPriorityPriorityP1    V3WorkflowsUpdateIncidentPriorityPriority = "P1"
	V3WorkflowsUpdateIncidentPriorityPriorityP2    V3WorkflowsUpdateIncidentPriorityPriority = "P2"
	V3WorkflowsUpdateIncidentPriorityPriorityP3    V3WorkflowsUpdateIncidentPriorityPriority = "P3"
	V3WorkflowsUpdateIncidentPriorityPriorityP4    V3WorkflowsUpdateIncidentPriorityPriority = "P4"
	V3WorkflowsUpdateIncidentPriorityPriorityP5    V3WorkflowsUpdateIncidentPriorityPriority = "P5"
	V3WorkflowsUpdateIncidentPriorityPriorityUnset V3WorkflowsUpdateIncidentPriorityPriority = "UNSET"
)

func (e V3WorkflowsUpdateIncidentPriorityPriority) ToPointer() *V3WorkflowsUpdateIncidentPriorityPriority {
	return &e
}
func (e *V3WorkflowsUpdateIncidentPriorityPriority) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "P1":
		fallthrough
	case "P2":
		fallthrough
	case "P3":
		fallthrough
	case "P4":
		fallthrough
	case "P5":
		fallthrough
	case "UNSET":
		*e = V3WorkflowsUpdateIncidentPriorityPriority(v)
		return nil
	default:
		return fmt.Errorf("invalid value for V3WorkflowsUpdateIncidentPriorityPriority: %v", v)
	}
}

type V3WorkflowsUpdateIncidentPriorityData struct {
	Priority V3WorkflowsUpdateIncidentPriorityPriority `json:"priority"`
}

func (v V3WorkflowsUpdateIncidentPriorityData) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *V3WorkflowsUpdateIncidentPriorityData) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, []string{"priority"}); err != nil {
		return err
	}
	return nil
}

func (v *V3WorkflowsUpdateIncidentPriorityData) GetPriority() V3WorkflowsUpdateIncidentPriorityPriority {
	if v == nil {
		return V3WorkflowsUpdateIncidentPriorityPriority("")
	}
	return v.Priority
}

type V3WorkflowsUpdateIncidentPriority struct {
	Name V3WorkflowsUpdateIncidentPriorityName `json:"name"`
	Data V3WorkflowsUpdateIncidentPriorityData `json:"data"`
}

func (v V3WorkflowsUpdateIncidentPriority) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *V3WorkflowsUpdateIncidentPriority) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, []string{"name", "data"}); err != nil {
		return err
	}
	return nil
}

func (v *V3WorkflowsUpdateIncidentPriority) GetName() V3WorkflowsUpdateIncidentPriorityName {
	if v == nil {
		return V3WorkflowsUpdateIncidentPriorityName("")
	}
	return v.Name
}

func (v *V3WorkflowsUpdateIncidentPriority) GetData() V3WorkflowsUpdateIncidentPriorityData {
	if v == nil {
		return V3WorkflowsUpdateIncidentPriorityData{}
	}
	return v.Data
}
