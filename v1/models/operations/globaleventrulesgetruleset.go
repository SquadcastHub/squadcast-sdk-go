// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/SquadcastHub/squadcast-sdk-go/v1/models/components"
)

type GlobalEventRulesGetRulesetRequest struct {
	GerID                int64  `pathParam:"style=simple,explode=false,name=ger_id"`
	AlertSourceVersion   string `pathParam:"style=simple,explode=false,name=alert_source_version"`
	AlertSourceShortname string `pathParam:"style=simple,explode=false,name=alert_source_shortname"`
}

func (g *GlobalEventRulesGetRulesetRequest) GetGerID() int64 {
	if g == nil {
		return 0
	}
	return g.GerID
}

func (g *GlobalEventRulesGetRulesetRequest) GetAlertSourceVersion() string {
	if g == nil {
		return ""
	}
	return g.AlertSourceVersion
}

func (g *GlobalEventRulesGetRulesetRequest) GetAlertSourceShortname() string {
	if g == nil {
		return ""
	}
	return g.AlertSourceShortname
}

// GlobalEventRulesGetRulesetResponseBody - The request has succeeded.
type GlobalEventRulesGetRulesetResponseBody struct {
	Data components.V3GlobalEventRulesRulesetResponse `json:"data"`
}

func (g *GlobalEventRulesGetRulesetResponseBody) GetData() components.V3GlobalEventRulesRulesetResponse {
	if g == nil {
		return components.V3GlobalEventRulesRulesetResponse{}
	}
	return g.Data
}

type GlobalEventRulesGetRulesetResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The request has succeeded.
	Object *GlobalEventRulesGetRulesetResponseBody
}

func (g *GlobalEventRulesGetRulesetResponse) GetHTTPMeta() components.HTTPMetadata {
	if g == nil {
		return components.HTTPMetadata{}
	}
	return g.HTTPMeta
}

func (g *GlobalEventRulesGetRulesetResponse) GetObject() *GlobalEventRulesGetRulesetResponseBody {
	if g == nil {
		return nil
	}
	return g.Object
}
