// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/SquadcastHub/squadcast-sdk-go/v1/models/components"
)

type GlobalEventRulesUpdateGlobalEventRuleByIDRequest struct {
	GerID                                          int64                                                     `pathParam:"style=simple,explode=false,name=ger_id"`
	V3GlobalEventRulesUpdateGlobalEventRuleRequest components.V3GlobalEventRulesUpdateGlobalEventRuleRequest `request:"mediaType=application/json"`
}

func (g *GlobalEventRulesUpdateGlobalEventRuleByIDRequest) GetGerID() int64 {
	if g == nil {
		return 0
	}
	return g.GerID
}

func (g *GlobalEventRulesUpdateGlobalEventRuleByIDRequest) GetV3GlobalEventRulesUpdateGlobalEventRuleRequest() components.V3GlobalEventRulesUpdateGlobalEventRuleRequest {
	if g == nil {
		return components.V3GlobalEventRulesUpdateGlobalEventRuleRequest{}
	}
	return g.V3GlobalEventRulesUpdateGlobalEventRuleRequest
}

// GlobalEventRulesUpdateGlobalEventRuleByIDResponseBody - The request has succeeded.
type GlobalEventRulesUpdateGlobalEventRuleByIDResponseBody struct {
	Data components.V3GlobalEventRulesGlobalEventRuleResponse `json:"data"`
}

func (g *GlobalEventRulesUpdateGlobalEventRuleByIDResponseBody) GetData() components.V3GlobalEventRulesGlobalEventRuleResponse {
	if g == nil {
		return components.V3GlobalEventRulesGlobalEventRuleResponse{}
	}
	return g.Data
}

type GlobalEventRulesUpdateGlobalEventRuleByIDResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The request has succeeded.
	Object *GlobalEventRulesUpdateGlobalEventRuleByIDResponseBody
}

func (g *GlobalEventRulesUpdateGlobalEventRuleByIDResponse) GetHTTPMeta() components.HTTPMetadata {
	if g == nil {
		return components.HTTPMetadata{}
	}
	return g.HTTPMeta
}

func (g *GlobalEventRulesUpdateGlobalEventRuleByIDResponse) GetObject() *GlobalEventRulesUpdateGlobalEventRuleByIDResponseBody {
	if g == nil {
		return nil
	}
	return g.Object
}
