// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/SquadcastHub/squadcast-sdk-go/internal/utils"
	"time"
)

type Step struct {
	Content     string     `json:"content"`
	Completed   bool       `json:"completed"`
	CompletedAt *time.Time `json:"completed_at,omitempty"`
}

func (s Step) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *Step) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, []string{"content", "completed"}); err != nil {
		return err
	}
	return nil
}

func (s *Step) GetContent() string {
	if s == nil {
		return ""
	}
	return s.Content
}

func (s *Step) GetCompleted() bool {
	if s == nil {
		return false
	}
	return s.Completed
}

func (s *Step) GetCompletedAt() *time.Time {
	if s == nil {
		return nil
	}
	return s.CompletedAt
}

type V3IncidentsRunbooksRunbookResponse struct {
	ID         *string    `json:"id,omitempty"`
	IncidentID string     `json:"incident_id"`
	RunbookID  string     `json:"runbook_id"`
	Name       string     `json:"name"`
	Steps      []Step     `json:"steps"`
	Deleted    *bool      `json:"deleted,omitempty"`
	DeletedAt  *time.Time `json:"deleted_at,omitempty"`
}

func (v V3IncidentsRunbooksRunbookResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *V3IncidentsRunbooksRunbookResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, []string{"incident_id", "runbook_id", "name", "steps"}); err != nil {
		return err
	}
	return nil
}

func (v *V3IncidentsRunbooksRunbookResponse) GetID() *string {
	if v == nil {
		return nil
	}
	return v.ID
}

func (v *V3IncidentsRunbooksRunbookResponse) GetIncidentID() string {
	if v == nil {
		return ""
	}
	return v.IncidentID
}

func (v *V3IncidentsRunbooksRunbookResponse) GetRunbookID() string {
	if v == nil {
		return ""
	}
	return v.RunbookID
}

func (v *V3IncidentsRunbooksRunbookResponse) GetName() string {
	if v == nil {
		return ""
	}
	return v.Name
}

func (v *V3IncidentsRunbooksRunbookResponse) GetSteps() []Step {
	if v == nil {
		return []Step{}
	}
	return v.Steps
}

func (v *V3IncidentsRunbooksRunbookResponse) GetDeleted() *bool {
	if v == nil {
		return nil
	}
	return v.Deleted
}

func (v *V3IncidentsRunbooksRunbookResponse) GetDeletedAt() *time.Time {
	if v == nil {
		return nil
	}
	return v.DeletedAt
}
