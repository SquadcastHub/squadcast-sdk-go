// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/SquadcastHub/squadcast-sdk-go/internal/utils"
)

type V3WorkflowsUpdateIncidentPriorityUpdateName string

const (
	V3WorkflowsUpdateIncidentPriorityUpdateNameSqUpdateIncidentPriority V3WorkflowsUpdateIncidentPriorityUpdateName = "sq_update_incident_priority"
)

func (e V3WorkflowsUpdateIncidentPriorityUpdateName) ToPointer() *V3WorkflowsUpdateIncidentPriorityUpdateName {
	return &e
}
func (e *V3WorkflowsUpdateIncidentPriorityUpdateName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "sq_update_incident_priority":
		*e = V3WorkflowsUpdateIncidentPriorityUpdateName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for V3WorkflowsUpdateIncidentPriorityUpdateName: %v", v)
	}
}

type V3WorkflowsUpdateIncidentPriorityUpdatePriority string

const (
	V3WorkflowsUpdateIncidentPriorityUpdatePriorityP1    V3WorkflowsUpdateIncidentPriorityUpdatePriority = "P1"
	V3WorkflowsUpdateIncidentPriorityUpdatePriorityP2    V3WorkflowsUpdateIncidentPriorityUpdatePriority = "P2"
	V3WorkflowsUpdateIncidentPriorityUpdatePriorityP3    V3WorkflowsUpdateIncidentPriorityUpdatePriority = "P3"
	V3WorkflowsUpdateIncidentPriorityUpdatePriorityP4    V3WorkflowsUpdateIncidentPriorityUpdatePriority = "P4"
	V3WorkflowsUpdateIncidentPriorityUpdatePriorityP5    V3WorkflowsUpdateIncidentPriorityUpdatePriority = "P5"
	V3WorkflowsUpdateIncidentPriorityUpdatePriorityUnset V3WorkflowsUpdateIncidentPriorityUpdatePriority = "UNSET"
)

func (e V3WorkflowsUpdateIncidentPriorityUpdatePriority) ToPointer() *V3WorkflowsUpdateIncidentPriorityUpdatePriority {
	return &e
}
func (e *V3WorkflowsUpdateIncidentPriorityUpdatePriority) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "P1":
		fallthrough
	case "P2":
		fallthrough
	case "P3":
		fallthrough
	case "P4":
		fallthrough
	case "P5":
		fallthrough
	case "UNSET":
		*e = V3WorkflowsUpdateIncidentPriorityUpdatePriority(v)
		return nil
	default:
		return fmt.Errorf("invalid value for V3WorkflowsUpdateIncidentPriorityUpdatePriority: %v", v)
	}
}

type V3WorkflowsUpdateIncidentPriorityUpdateData struct {
	Priority *V3WorkflowsUpdateIncidentPriorityUpdatePriority `json:"priority,omitempty"`
}

func (v V3WorkflowsUpdateIncidentPriorityUpdateData) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *V3WorkflowsUpdateIncidentPriorityUpdateData) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (v *V3WorkflowsUpdateIncidentPriorityUpdateData) GetPriority() *V3WorkflowsUpdateIncidentPriorityUpdatePriority {
	if v == nil {
		return nil
	}
	return v.Priority
}

type V3WorkflowsUpdateIncidentPriorityUpdate struct {
	Name V3WorkflowsUpdateIncidentPriorityUpdateName  `json:"name"`
	Data *V3WorkflowsUpdateIncidentPriorityUpdateData `json:"data,omitempty"`
}

func (v V3WorkflowsUpdateIncidentPriorityUpdate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *V3WorkflowsUpdateIncidentPriorityUpdate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, []string{"name"}); err != nil {
		return err
	}
	return nil
}

func (v *V3WorkflowsUpdateIncidentPriorityUpdate) GetName() V3WorkflowsUpdateIncidentPriorityUpdateName {
	if v == nil {
		return V3WorkflowsUpdateIncidentPriorityUpdateName("")
	}
	return v.Name
}

func (v *V3WorkflowsUpdateIncidentPriorityUpdate) GetData() *V3WorkflowsUpdateIncidentPriorityUpdateData {
	if v == nil {
		return nil
	}
	return v.Data
}
