// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type V3ServicesRoutingRulesRoutingRuleResponseEntityType string

const (
	V3ServicesRoutingRulesRoutingRuleResponseEntityTypeUser             V3ServicesRoutingRulesRoutingRuleResponseEntityType = "user"
	V3ServicesRoutingRulesRoutingRuleResponseEntityTypeSquad            V3ServicesRoutingRulesRoutingRuleResponseEntityType = "squad"
	V3ServicesRoutingRulesRoutingRuleResponseEntityTypeEscalationPolicy V3ServicesRoutingRulesRoutingRuleResponseEntityType = "escalation_policy"
)

func (e V3ServicesRoutingRulesRoutingRuleResponseEntityType) ToPointer() *V3ServicesRoutingRulesRoutingRuleResponseEntityType {
	return &e
}
func (e *V3ServicesRoutingRulesRoutingRuleResponseEntityType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "user":
		fallthrough
	case "squad":
		fallthrough
	case "escalation_policy":
		*e = V3ServicesRoutingRulesRoutingRuleResponseEntityType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for V3ServicesRoutingRulesRoutingRuleResponseEntityType: %v", v)
	}
}

type V3ServicesRoutingRulesRoutingRuleResponseRouteTo struct {
	EntityType V3ServicesRoutingRulesRoutingRuleResponseEntityType `json:"entity_type"`
	EntityID   string                                              `json:"entity_id"`
}

func (v *V3ServicesRoutingRulesRoutingRuleResponseRouteTo) GetEntityType() V3ServicesRoutingRulesRoutingRuleResponseEntityType {
	if v == nil {
		return V3ServicesRoutingRulesRoutingRuleResponseEntityType("")
	}
	return v.EntityType
}

func (v *V3ServicesRoutingRulesRoutingRuleResponseRouteTo) GetEntityID() string {
	if v == nil {
		return ""
	}
	return v.EntityID
}

type V3ServicesRoutingRulesRoutingRuleResponse struct {
	Expression      string                                           `json:"expression"`
	RouteTo         V3ServicesRoutingRulesRoutingRuleResponseRouteTo `json:"route_to"`
	IsBasic         bool                                             `json:"is_basic"`
	BasicExpression []V3ServicesRoutingRulesExpressionBranch         `json:"basic_expression,omitempty"`
}

func (v *V3ServicesRoutingRulesRoutingRuleResponse) GetExpression() string {
	if v == nil {
		return ""
	}
	return v.Expression
}

func (v *V3ServicesRoutingRulesRoutingRuleResponse) GetRouteTo() V3ServicesRoutingRulesRoutingRuleResponseRouteTo {
	if v == nil {
		return V3ServicesRoutingRulesRoutingRuleResponseRouteTo{}
	}
	return v.RouteTo
}

func (v *V3ServicesRoutingRulesRoutingRuleResponse) GetIsBasic() bool {
	if v == nil {
		return false
	}
	return v.IsBasic
}

func (v *V3ServicesRoutingRulesRoutingRuleResponse) GetBasicExpression() []V3ServicesRoutingRulesExpressionBranch {
	if v == nil {
		return nil
	}
	return v.BasicExpression
}
