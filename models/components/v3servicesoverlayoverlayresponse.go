// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/SquadcastHub/squadcast-sdk-go/internal/utils"
	"time"
)

type V3ServicesOverlayOverlayResponseOverlayTemplateType string

const (
	V3ServicesOverlayOverlayResponseOverlayTemplateTypeDedupKey V3ServicesOverlayOverlayResponseOverlayTemplateType = "dedup_key"
)

func (e V3ServicesOverlayOverlayResponseOverlayTemplateType) ToPointer() *V3ServicesOverlayOverlayResponseOverlayTemplateType {
	return &e
}
func (e *V3ServicesOverlayOverlayResponseOverlayTemplateType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dedup_key":
		*e = V3ServicesOverlayOverlayResponseOverlayTemplateType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for V3ServicesOverlayOverlayResponseOverlayTemplateType: %v", v)
	}
}

type V3ServicesOverlayOverlayResponse struct {
	CreatedAt            time.Time                                           `json:"created_at"`
	UpdatedAt            time.Time                                           `json:"updated_at"`
	DeletedAt            *time.Time                                          `json:"deleted_at"`
	OrgID                string                                              `json:"org_id"`
	ServiceID            string                                              `json:"service_id"`
	AlertSourceVersion   string                                              `json:"alert_source_version"`
	AlertSourceShortname string                                              `json:"alert_source_shortname"`
	OverlayTemplateType  V3ServicesOverlayOverlayResponseOverlayTemplateType `json:"overlay_template_type"`
	Overlay              V3ServicesOverlayDedupKeyOverlay                    `json:"overlay"`
	CreatedBy            string                                              `json:"created_by"`
	UpdatedBy            string                                              `json:"updated_by"`
	AlertSourceType      string                                              `json:"alert_source_type"`
}

func (v V3ServicesOverlayOverlayResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *V3ServicesOverlayOverlayResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, []string{"created_at", "updated_at", "org_id", "service_id", "alert_source_version", "alert_source_shortname", "overlay_template_type", "overlay", "created_by", "updated_by", "alert_source_type"}); err != nil {
		return err
	}
	return nil
}

func (v *V3ServicesOverlayOverlayResponse) GetCreatedAt() time.Time {
	if v == nil {
		return time.Time{}
	}
	return v.CreatedAt
}

func (v *V3ServicesOverlayOverlayResponse) GetUpdatedAt() time.Time {
	if v == nil {
		return time.Time{}
	}
	return v.UpdatedAt
}

func (v *V3ServicesOverlayOverlayResponse) GetDeletedAt() *time.Time {
	if v == nil {
		return nil
	}
	return v.DeletedAt
}

func (v *V3ServicesOverlayOverlayResponse) GetOrgID() string {
	if v == nil {
		return ""
	}
	return v.OrgID
}

func (v *V3ServicesOverlayOverlayResponse) GetServiceID() string {
	if v == nil {
		return ""
	}
	return v.ServiceID
}

func (v *V3ServicesOverlayOverlayResponse) GetAlertSourceVersion() string {
	if v == nil {
		return ""
	}
	return v.AlertSourceVersion
}

func (v *V3ServicesOverlayOverlayResponse) GetAlertSourceShortname() string {
	if v == nil {
		return ""
	}
	return v.AlertSourceShortname
}

func (v *V3ServicesOverlayOverlayResponse) GetOverlayTemplateType() V3ServicesOverlayOverlayResponseOverlayTemplateType {
	if v == nil {
		return V3ServicesOverlayOverlayResponseOverlayTemplateType("")
	}
	return v.OverlayTemplateType
}

func (v *V3ServicesOverlayOverlayResponse) GetOverlay() V3ServicesOverlayDedupKeyOverlay {
	if v == nil {
		return V3ServicesOverlayDedupKeyOverlay{}
	}
	return v.Overlay
}

func (v *V3ServicesOverlayOverlayResponse) GetCreatedBy() string {
	if v == nil {
		return ""
	}
	return v.CreatedBy
}

func (v *V3ServicesOverlayOverlayResponse) GetUpdatedBy() string {
	if v == nil {
		return ""
	}
	return v.UpdatedBy
}

func (v *V3ServicesOverlayOverlayResponse) GetAlertSourceType() string {
	if v == nil {
		return ""
	}
	return v.AlertSourceType
}
