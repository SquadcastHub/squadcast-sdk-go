// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type V3WorkflowsCreateWorkflowRequestUpdateOwnerType string

const (
	V3WorkflowsCreateWorkflowRequestUpdateOwnerTypeUser  V3WorkflowsCreateWorkflowRequestUpdateOwnerType = "user"
	V3WorkflowsCreateWorkflowRequestUpdateOwnerTypeSquad V3WorkflowsCreateWorkflowRequestUpdateOwnerType = "squad"
)

func (e V3WorkflowsCreateWorkflowRequestUpdateOwnerType) ToPointer() *V3WorkflowsCreateWorkflowRequestUpdateOwnerType {
	return &e
}
func (e *V3WorkflowsCreateWorkflowRequestUpdateOwnerType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "user":
		fallthrough
	case "squad":
		*e = V3WorkflowsCreateWorkflowRequestUpdateOwnerType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for V3WorkflowsCreateWorkflowRequestUpdateOwnerType: %v", v)
	}
}

type V3WorkflowsCreateWorkflowRequestUpdate struct {
	Title       *string                                          `json:"title,omitempty"`
	Description *string                                          `json:"description,omitempty"`
	OwnerID     *string                                          `json:"owner_id,omitempty"`
	OwnerType   *V3WorkflowsCreateWorkflowRequestUpdateOwnerType `json:"owner_type,omitempty"`
	EntityOwner *V3WorkflowsEntityOwnerUpdate                    `json:"entity_owner,omitempty"`
	Tags        []V3WorkflowsTag                                 `json:"tags,omitempty"`
	Trigger     *V3WorkflowsWorkflowTrigger                      `json:"trigger,omitempty"`
	Filters     *V3WorkflowsCreateWorkflowFilter                 `json:"filters,omitempty"`
	Actions     []V3WorkflowsActionRequest                       `json:"actions,omitempty"`
	Enabled     *bool                                            `json:"enabled,omitempty"`
}

func (v *V3WorkflowsCreateWorkflowRequestUpdate) GetTitle() *string {
	if v == nil {
		return nil
	}
	return v.Title
}

func (v *V3WorkflowsCreateWorkflowRequestUpdate) GetDescription() *string {
	if v == nil {
		return nil
	}
	return v.Description
}

func (v *V3WorkflowsCreateWorkflowRequestUpdate) GetOwnerID() *string {
	if v == nil {
		return nil
	}
	return v.OwnerID
}

func (v *V3WorkflowsCreateWorkflowRequestUpdate) GetOwnerType() *V3WorkflowsCreateWorkflowRequestUpdateOwnerType {
	if v == nil {
		return nil
	}
	return v.OwnerType
}

func (v *V3WorkflowsCreateWorkflowRequestUpdate) GetEntityOwner() *V3WorkflowsEntityOwnerUpdate {
	if v == nil {
		return nil
	}
	return v.EntityOwner
}

func (v *V3WorkflowsCreateWorkflowRequestUpdate) GetTags() []V3WorkflowsTag {
	if v == nil {
		return nil
	}
	return v.Tags
}

func (v *V3WorkflowsCreateWorkflowRequestUpdate) GetTrigger() *V3WorkflowsWorkflowTrigger {
	if v == nil {
		return nil
	}
	return v.Trigger
}

func (v *V3WorkflowsCreateWorkflowRequestUpdate) GetFilters() *V3WorkflowsCreateWorkflowFilter {
	if v == nil {
		return nil
	}
	return v.Filters
}

func (v *V3WorkflowsCreateWorkflowRequestUpdate) GetActions() []V3WorkflowsActionRequest {
	if v == nil {
		return nil
	}
	return v.Actions
}

func (v *V3WorkflowsCreateWorkflowRequestUpdate) GetEnabled() *bool {
	if v == nil {
		return nil
	}
	return v.Enabled
}
