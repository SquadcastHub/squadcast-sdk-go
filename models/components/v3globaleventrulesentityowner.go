// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type V3GlobalEventRulesEntityOwnerType string

const (
	V3GlobalEventRulesEntityOwnerTypeTeam  V3GlobalEventRulesEntityOwnerType = "team"
	V3GlobalEventRulesEntityOwnerTypeUser  V3GlobalEventRulesEntityOwnerType = "user"
	V3GlobalEventRulesEntityOwnerTypeSquad V3GlobalEventRulesEntityOwnerType = "squad"
)

func (e V3GlobalEventRulesEntityOwnerType) ToPointer() *V3GlobalEventRulesEntityOwnerType {
	return &e
}
func (e *V3GlobalEventRulesEntityOwnerType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "team":
		fallthrough
	case "user":
		fallthrough
	case "squad":
		*e = V3GlobalEventRulesEntityOwnerType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for V3GlobalEventRulesEntityOwnerType: %v", v)
	}
}

type V3GlobalEventRulesEntityOwner struct {
	ID   string                            `json:"id"`
	Type V3GlobalEventRulesEntityOwnerType `json:"type"`
}

func (v *V3GlobalEventRulesEntityOwner) GetID() string {
	if v == nil {
		return ""
	}
	return v.ID
}

func (v *V3GlobalEventRulesEntityOwner) GetType() V3GlobalEventRulesEntityOwnerType {
	if v == nil {
		return V3GlobalEventRulesEntityOwnerType("")
	}
	return v.Type
}
