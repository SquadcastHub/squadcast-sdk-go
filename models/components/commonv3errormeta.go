// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/SquadcastHub/squadcast-sdk-go/internal/utils"
)

type StatusType string

const (
	StatusTypeStr     StatusType = "str"
	StatusTypeInteger StatusType = "integer"
)

type Status struct {
	Str     *string `queryParam:"inline,name=status"`
	Integer *int64  `queryParam:"inline,name=status"`

	Type StatusType
}

func CreateStatusStr(str string) Status {
	typ := StatusTypeStr

	return Status{
		Str:  &str,
		Type: typ,
	}
}

func CreateStatusInteger(integer int64) Status {
	typ := StatusTypeInteger

	return Status{
		Integer: &integer,
		Type:    typ,
	}
}

func (u *Status) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = StatusTypeStr
		return nil
	}

	var integer int64 = int64(0)
	if err := utils.UnmarshalJSON(data, &integer, "", true, nil); err == nil {
		u.Integer = &integer
		u.Type = StatusTypeInteger
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Status", string(data))
}

func (u Status) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	return nil, errors.New("could not marshal union type Status: all fields are null")
}

// CommonV3ErrorMeta - Represents a single response containing data of type T.
type CommonV3ErrorMeta struct {
	Status       Status `json:"status"`
	ErrorMessage string `json:"error_message"`
}

func (c CommonV3ErrorMeta) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CommonV3ErrorMeta) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"status", "error_message"}); err != nil {
		return err
	}
	return nil
}

func (c *CommonV3ErrorMeta) GetStatus() Status {
	if c == nil {
		return Status{}
	}
	return c.Status
}

func (c *CommonV3ErrorMeta) GetErrorMessage() string {
	if c == nil {
		return ""
	}
	return c.ErrorMessage
}
