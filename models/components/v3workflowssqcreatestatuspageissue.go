// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/SquadcastHub/squadcast-sdk-go/v1/internal/utils"
)

type V3WorkflowsSqCreateStatusPageIssueName string

const (
	V3WorkflowsSqCreateStatusPageIssueNameSqAddStatusPageIssue V3WorkflowsSqCreateStatusPageIssueName = "sq_add_status_page_issue"
)

func (e V3WorkflowsSqCreateStatusPageIssueName) ToPointer() *V3WorkflowsSqCreateStatusPageIssueName {
	return &e
}
func (e *V3WorkflowsSqCreateStatusPageIssueName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "sq_add_status_page_issue":
		*e = V3WorkflowsSqCreateStatusPageIssueName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for V3WorkflowsSqCreateStatusPageIssueName: %v", v)
	}
}

type V3WorkflowsSqCreateStatusPageIssueData struct {
	ComponentAndImpact []V3WorkflowsComponentAndImpact    `json:"component_and_impact"`
	IssueTitle         string                             `json:"issue_title"`
	PageStatusID       int                                `json:"page_status_id"`
	StatusAndMessage   []V3WorkflowsIssueStatusAndMessage `json:"status_and_message"`
	StatusPageID       int                                `json:"status_page_id"`
}

func (v V3WorkflowsSqCreateStatusPageIssueData) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *V3WorkflowsSqCreateStatusPageIssueData) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, []string{"component_and_impact", "issue_title", "page_status_id", "status_and_message", "status_page_id"}); err != nil {
		return err
	}
	return nil
}

func (v *V3WorkflowsSqCreateStatusPageIssueData) GetComponentAndImpact() []V3WorkflowsComponentAndImpact {
	if v == nil {
		return []V3WorkflowsComponentAndImpact{}
	}
	return v.ComponentAndImpact
}

func (v *V3WorkflowsSqCreateStatusPageIssueData) GetIssueTitle() string {
	if v == nil {
		return ""
	}
	return v.IssueTitle
}

func (v *V3WorkflowsSqCreateStatusPageIssueData) GetPageStatusID() int {
	if v == nil {
		return 0
	}
	return v.PageStatusID
}

func (v *V3WorkflowsSqCreateStatusPageIssueData) GetStatusAndMessage() []V3WorkflowsIssueStatusAndMessage {
	if v == nil {
		return []V3WorkflowsIssueStatusAndMessage{}
	}
	return v.StatusAndMessage
}

func (v *V3WorkflowsSqCreateStatusPageIssueData) GetStatusPageID() int {
	if v == nil {
		return 0
	}
	return v.StatusPageID
}

type V3WorkflowsSqCreateStatusPageIssue struct {
	Name V3WorkflowsSqCreateStatusPageIssueName `json:"name"`
	Data V3WorkflowsSqCreateStatusPageIssueData `json:"data"`
}

func (v V3WorkflowsSqCreateStatusPageIssue) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *V3WorkflowsSqCreateStatusPageIssue) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, []string{"name", "data"}); err != nil {
		return err
	}
	return nil
}

func (v *V3WorkflowsSqCreateStatusPageIssue) GetName() V3WorkflowsSqCreateStatusPageIssueName {
	if v == nil {
		return V3WorkflowsSqCreateStatusPageIssueName("")
	}
	return v.Name
}

func (v *V3WorkflowsSqCreateStatusPageIssue) GetData() V3WorkflowsSqCreateStatusPageIssueData {
	if v == nil {
		return V3WorkflowsSqCreateStatusPageIssueData{}
	}
	return v.Data
}
