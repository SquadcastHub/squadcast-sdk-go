// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/SquadcastHub/squadcast-sdk-go/internal/utils"
	"time"
)

type V3IncidentsIncidentEventResponseTags struct {
}

type DeduplicationReason struct {
	MatchedEventID      string `json:"matched_event_id"`
	EvaluatedExpression string `json:"evaluated_expression"`
	TimeWindow          int64  `json:"time_window"`
}

func (d *DeduplicationReason) GetMatchedEventID() string {
	if d == nil {
		return ""
	}
	return d.MatchedEventID
}

func (d *DeduplicationReason) GetEvaluatedExpression() string {
	if d == nil {
		return ""
	}
	return d.EvaluatedExpression
}

func (d *DeduplicationReason) GetTimeWindow() int64 {
	if d == nil {
		return 0
	}
	return d.TimeWindow
}

type Payload struct {
}

// V3IncidentsIncidentEventResponse - Represents an incident event.
type V3IncidentsIncidentEventResponse struct {
	IncidentID          string                                `json:"incident_id"`
	AlertSourceID       string                                `json:"alert_source_id"`
	Message             string                                `json:"message"`
	Description         string                                `json:"description"`
	TimeOfCreation      time.Time                             `json:"time_of_creation"`
	Tags                *V3IncidentsIncidentEventResponseTags `json:"tags"`
	DeduplicationReason *DeduplicationReason                  `json:"deduplication_reason,omitempty"`
	Payload             Payload                               `json:"payload"`
}

func (v V3IncidentsIncidentEventResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *V3IncidentsIncidentEventResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, []string{"incident_id", "alert_source_id", "message", "description", "time_of_creation", "payload"}); err != nil {
		return err
	}
	return nil
}

func (v *V3IncidentsIncidentEventResponse) GetIncidentID() string {
	if v == nil {
		return ""
	}
	return v.IncidentID
}

func (v *V3IncidentsIncidentEventResponse) GetAlertSourceID() string {
	if v == nil {
		return ""
	}
	return v.AlertSourceID
}

func (v *V3IncidentsIncidentEventResponse) GetMessage() string {
	if v == nil {
		return ""
	}
	return v.Message
}

func (v *V3IncidentsIncidentEventResponse) GetDescription() string {
	if v == nil {
		return ""
	}
	return v.Description
}

func (v *V3IncidentsIncidentEventResponse) GetTimeOfCreation() time.Time {
	if v == nil {
		return time.Time{}
	}
	return v.TimeOfCreation
}

func (v *V3IncidentsIncidentEventResponse) GetTags() *V3IncidentsIncidentEventResponseTags {
	if v == nil {
		return nil
	}
	return v.Tags
}

func (v *V3IncidentsIncidentEventResponse) GetDeduplicationReason() *DeduplicationReason {
	if v == nil {
		return nil
	}
	return v.DeduplicationReason
}

func (v *V3IncidentsIncidentEventResponse) GetPayload() Payload {
	if v == nil {
		return Payload{}
	}
	return v.Payload
}
