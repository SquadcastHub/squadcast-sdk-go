// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type V3ServicesDedupInitConfigTimeUnit string

const (
	V3ServicesDedupInitConfigTimeUnitMinute V3ServicesDedupInitConfigTimeUnit = "minute"
	V3ServicesDedupInitConfigTimeUnitHour   V3ServicesDedupInitConfigTimeUnit = "hour"
)

func (e V3ServicesDedupInitConfigTimeUnit) ToPointer() *V3ServicesDedupInitConfigTimeUnit {
	return &e
}
func (e *V3ServicesDedupInitConfigTimeUnit) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "minute":
		fallthrough
	case "hour":
		*e = V3ServicesDedupInitConfigTimeUnit(v)
		return nil
	default:
		return fmt.Errorf("invalid value for V3ServicesDedupInitConfigTimeUnit: %v", v)
	}
}

type V3ServicesDedupInitConfig struct {
	TimeWindow int64                             `json:"time_window"`
	TimeUnit   V3ServicesDedupInitConfigTimeUnit `json:"time_unit"`
}

func (v *V3ServicesDedupInitConfig) GetTimeWindow() int64 {
	if v == nil {
		return 0
	}
	return v.TimeWindow
}

func (v *V3ServicesDedupInitConfig) GetTimeUnit() V3ServicesDedupInitConfigTimeUnit {
	if v == nil {
		return V3ServicesDedupInitConfigTimeUnit("")
	}
	return v.TimeUnit
}
