// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type V3ServicesDeduplicationRulesDeduplicationRuleResponseTimeUnit string

const (
	V3ServicesDeduplicationRulesDeduplicationRuleResponseTimeUnitMinute V3ServicesDeduplicationRulesDeduplicationRuleResponseTimeUnit = "minute"
	V3ServicesDeduplicationRulesDeduplicationRuleResponseTimeUnitHour   V3ServicesDeduplicationRulesDeduplicationRuleResponseTimeUnit = "hour"
)

func (e V3ServicesDeduplicationRulesDeduplicationRuleResponseTimeUnit) ToPointer() *V3ServicesDeduplicationRulesDeduplicationRuleResponseTimeUnit {
	return &e
}
func (e *V3ServicesDeduplicationRulesDeduplicationRuleResponseTimeUnit) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "minute":
		fallthrough
	case "hour":
		*e = V3ServicesDeduplicationRulesDeduplicationRuleResponseTimeUnit(v)
		return nil
	default:
		return fmt.Errorf("invalid value for V3ServicesDeduplicationRulesDeduplicationRuleResponseTimeUnit: %v", v)
	}
}

type V3ServicesDeduplicationRulesDeduplicationRuleResponse struct {
	Expression              string                                                        `json:"expression"`
	TimeWindow              int64                                                         `json:"time_window"`
	TimeUnit                V3ServicesDeduplicationRulesDeduplicationRuleResponseTimeUnit `json:"time_unit"`
	IsBasic                 bool                                                          `json:"is_basic"`
	BasicExpression         []V3ServicesDeduplicationRulesExpressionBranch                `json:"basic_expression,omitempty"`
	DependencyDeduplication *bool                                                         `json:"dependency_deduplication,omitempty"`
	Description             *string                                                       `json:"description,omitempty"`
}

func (v *V3ServicesDeduplicationRulesDeduplicationRuleResponse) GetExpression() string {
	if v == nil {
		return ""
	}
	return v.Expression
}

func (v *V3ServicesDeduplicationRulesDeduplicationRuleResponse) GetTimeWindow() int64 {
	if v == nil {
		return 0
	}
	return v.TimeWindow
}

func (v *V3ServicesDeduplicationRulesDeduplicationRuleResponse) GetTimeUnit() V3ServicesDeduplicationRulesDeduplicationRuleResponseTimeUnit {
	if v == nil {
		return V3ServicesDeduplicationRulesDeduplicationRuleResponseTimeUnit("")
	}
	return v.TimeUnit
}

func (v *V3ServicesDeduplicationRulesDeduplicationRuleResponse) GetIsBasic() bool {
	if v == nil {
		return false
	}
	return v.IsBasic
}

func (v *V3ServicesDeduplicationRulesDeduplicationRuleResponse) GetBasicExpression() []V3ServicesDeduplicationRulesExpressionBranch {
	if v == nil {
		return nil
	}
	return v.BasicExpression
}

func (v *V3ServicesDeduplicationRulesDeduplicationRuleResponse) GetDependencyDeduplication() *bool {
	if v == nil {
		return nil
	}
	return v.DependencyDeduplication
}

func (v *V3ServicesDeduplicationRulesDeduplicationRuleResponse) GetDescription() *string {
	if v == nil {
		return nil
	}
	return v.Description
}
