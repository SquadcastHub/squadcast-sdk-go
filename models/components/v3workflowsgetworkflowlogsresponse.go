// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type StatusEnum string

const (
	StatusEnumQueued     StatusEnum = "queued"
	StatusEnumRunning    StatusEnum = "running"
	StatusEnumSuccessful StatusEnum = "successful"
	StatusEnumPartial    StatusEnum = "partial"
	StatusEnumFailed     StatusEnum = "failed"
)

func (e StatusEnum) ToPointer() *StatusEnum {
	return &e
}
func (e *StatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "queued":
		fallthrough
	case "running":
		fallthrough
	case "successful":
		fallthrough
	case "partial":
		fallthrough
	case "failed":
		*e = StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for StatusEnum: %v", v)
	}
}

type V3WorkflowsGetWorkflowLogsResponseData struct {
	ID              string     `json:"id"`
	Status          StatusEnum `json:"status"`
	IncidentID      string     `json:"incident_id"`
	ActionExecution string     `json:"action_execution"`
	Message         string     `json:"message"`
	ExecutedAt      string     `json:"executed_at"`
}

func (v *V3WorkflowsGetWorkflowLogsResponseData) GetID() string {
	if v == nil {
		return ""
	}
	return v.ID
}

func (v *V3WorkflowsGetWorkflowLogsResponseData) GetStatus() StatusEnum {
	if v == nil {
		return StatusEnum("")
	}
	return v.Status
}

func (v *V3WorkflowsGetWorkflowLogsResponseData) GetIncidentID() string {
	if v == nil {
		return ""
	}
	return v.IncidentID
}

func (v *V3WorkflowsGetWorkflowLogsResponseData) GetActionExecution() string {
	if v == nil {
		return ""
	}
	return v.ActionExecution
}

func (v *V3WorkflowsGetWorkflowLogsResponseData) GetMessage() string {
	if v == nil {
		return ""
	}
	return v.Message
}

func (v *V3WorkflowsGetWorkflowLogsResponseData) GetExecutedAt() string {
	if v == nil {
		return ""
	}
	return v.ExecutedAt
}

type V3WorkflowsGetWorkflowLogsResponseMeta struct {
	TotalCount int64 `json:"total_count"`
}

func (v *V3WorkflowsGetWorkflowLogsResponseMeta) GetTotalCount() int64 {
	if v == nil {
		return 0
	}
	return v.TotalCount
}

type V3WorkflowsGetWorkflowLogsResponse struct {
	Data []V3WorkflowsGetWorkflowLogsResponseData `json:"data"`
	Meta V3WorkflowsGetWorkflowLogsResponseMeta   `json:"meta"`
}

func (v *V3WorkflowsGetWorkflowLogsResponse) GetData() []V3WorkflowsGetWorkflowLogsResponseData {
	if v == nil {
		return []V3WorkflowsGetWorkflowLogsResponseData{}
	}
	return v.Data
}

func (v *V3WorkflowsGetWorkflowLogsResponse) GetMeta() V3WorkflowsGetWorkflowLogsResponseMeta {
	if v == nil {
		return V3WorkflowsGetWorkflowLogsResponseMeta{}
	}
	return v.Meta
}
