// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/SquadcastHub/squadcast-sdk-go/internal/utils"
)

type V3WorkflowsSqMarkIncidentSLOAffectingName string

const (
	V3WorkflowsSqMarkIncidentSLOAffectingNameSqMarkIncidentSloAffecting V3WorkflowsSqMarkIncidentSLOAffectingName = "sq_mark_incident_slo_affecting"
)

func (e V3WorkflowsSqMarkIncidentSLOAffectingName) ToPointer() *V3WorkflowsSqMarkIncidentSLOAffectingName {
	return &e
}
func (e *V3WorkflowsSqMarkIncidentSLOAffectingName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "sq_mark_incident_slo_affecting":
		*e = V3WorkflowsSqMarkIncidentSLOAffectingName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for V3WorkflowsSqMarkIncidentSLOAffectingName: %v", v)
	}
}

type V3WorkflowsSqMarkIncidentSLOAffectingData struct {
	Slis []string `json:"slis"`
	Slo  int      `json:"slo"`
}

func (v V3WorkflowsSqMarkIncidentSLOAffectingData) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *V3WorkflowsSqMarkIncidentSLOAffectingData) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, []string{"slis", "slo"}); err != nil {
		return err
	}
	return nil
}

func (v *V3WorkflowsSqMarkIncidentSLOAffectingData) GetSlis() []string {
	if v == nil {
		return []string{}
	}
	return v.Slis
}

func (v *V3WorkflowsSqMarkIncidentSLOAffectingData) GetSlo() int {
	if v == nil {
		return 0
	}
	return v.Slo
}

type V3WorkflowsSqMarkIncidentSLOAffecting struct {
	Name V3WorkflowsSqMarkIncidentSLOAffectingName `json:"name"`
	Data V3WorkflowsSqMarkIncidentSLOAffectingData `json:"data"`
}

func (v V3WorkflowsSqMarkIncidentSLOAffecting) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *V3WorkflowsSqMarkIncidentSLOAffecting) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, []string{"name", "data"}); err != nil {
		return err
	}
	return nil
}

func (v *V3WorkflowsSqMarkIncidentSLOAffecting) GetName() V3WorkflowsSqMarkIncidentSLOAffectingName {
	if v == nil {
		return V3WorkflowsSqMarkIncidentSLOAffectingName("")
	}
	return v.Name
}

func (v *V3WorkflowsSqMarkIncidentSLOAffecting) GetData() V3WorkflowsSqMarkIncidentSLOAffectingData {
	if v == nil {
		return V3WorkflowsSqMarkIncidentSLOAffectingData{}
	}
	return v.Data
}
